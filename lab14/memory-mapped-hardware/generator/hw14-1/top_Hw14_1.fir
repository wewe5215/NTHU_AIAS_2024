circuit top_Hw14_1 :
  module InstMem :
    input clock : Clock
    input reset : Reset
    output io : { flip raddr : UInt<15>, inst : UInt<32>}

    cmem memory : UInt<8> [32768] @[InstMem.scala 15:19]
    wire rdata : UInt<32> @[InstMem.scala 18:19]
    node _rdata_T = add(io.raddr, UInt<2>("h3")) @[InstMem.scala 20:22]
    node _rdata_T_1 = tail(_rdata_T, 1) @[InstMem.scala 20:22]
    infer mport rdata_MPORT = memory[_rdata_T_1], clock @[InstMem.scala 20:11]
    node _rdata_T_2 = add(io.raddr, UInt<2>("h2")) @[InstMem.scala 21:22]
    node _rdata_T_3 = tail(_rdata_T_2, 1) @[InstMem.scala 21:22]
    infer mport rdata_MPORT_1 = memory[_rdata_T_3], clock @[InstMem.scala 21:11]
    node _rdata_T_4 = add(io.raddr, UInt<1>("h1")) @[InstMem.scala 22:22]
    node _rdata_T_5 = tail(_rdata_T_4, 1) @[InstMem.scala 22:22]
    infer mport rdata_MPORT_2 = memory[_rdata_T_5], clock @[InstMem.scala 22:11]
    node _rdata_T_6 = add(io.raddr, UInt<1>("h0")) @[InstMem.scala 23:22]
    node _rdata_T_7 = tail(_rdata_T_6, 1) @[InstMem.scala 23:22]
    infer mport rdata_MPORT_3 = memory[_rdata_T_7], clock @[InstMem.scala 23:11]
    node rdata_lo = cat(rdata_MPORT_2, rdata_MPORT_3) @[Cat.scala 33:92]
    node rdata_hi = cat(rdata_MPORT, rdata_MPORT_1) @[Cat.scala 33:92]
    node _rdata_T_8 = cat(rdata_hi, rdata_lo) @[Cat.scala 33:92]
    rdata <= _rdata_T_8 @[InstMem.scala 19:9]
    io.inst <= rdata @[InstMem.scala 26:11]

  module Controller :
    input clock : Clock
    input reset : Reset
    output io : { flip Inst : UInt<32>, flip BrEq : UInt<1>, flip BrLT : UInt<1>, aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}, PCSel : UInt<2>, ImmSel : UInt<3>, RegWEn : UInt<1>, BrUn : UInt<1>, ASel : UInt<1>, BSel : UInt<2>, ALUSel : UInt<15>, WBSel : UInt<2>, Lui : UInt<1>, Hcf : UInt<1>}

    wire alu_op : UInt<15> @[Controller.scala 40:20]
    node opcode = bits(io.Inst, 6, 0) @[Controller.scala 43:23]
    node funct3 = bits(io.Inst, 14, 12) @[Controller.scala 44:23]
    node funct7 = bits(io.Inst, 31, 25) @[Controller.scala 45:23]
    node rs2 = bits(io.Inst, 24, 20) @[Controller.scala 46:23]
    reg DataMemAccessState : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Controller.scala 56:35]
    wire isDataLoad : UInt<1> @[Controller.scala 59:25]
    wire isDataStore : UInt<1> @[Controller.scala 60:25]
    node _isDataLoad_T = eq(opcode, UInt<2>("h3")) @[Controller.scala 61:26]
    isDataLoad <= _isDataLoad_T @[Controller.scala 61:15]
    node _isDataStore_T = eq(opcode, UInt<6>("h23")) @[Controller.scala 62:26]
    isDataStore <= _isDataStore_T @[Controller.scala 62:15]
    io.ar.valid <= UInt<1>("h0") @[Controller.scala 66:21]
    io.ar.bits.id <= UInt<1>("h0") @[Controller.scala 67:21]
    io.ar.bits.addr <= UInt<1>("h0") @[Controller.scala 68:21]
    io.ar.bits.region <= UInt<1>("h0") @[Controller.scala 69:21]
    io.ar.bits.len <= UInt<1>("h0") @[Controller.scala 70:21]
    io.ar.bits.size <= UInt<2>("h2") @[Controller.scala 71:21]
    io.ar.bits.burst <= UInt<1>("h0") @[Controller.scala 72:21]
    io.ar.bits.lock <= UInt<1>("h0") @[Controller.scala 73:21]
    io.ar.bits.cache <= UInt<1>("h0") @[Controller.scala 74:21]
    io.ar.bits.prot <= UInt<1>("h0") @[Controller.scala 75:21]
    io.ar.bits.qos <= UInt<1>("h0") @[Controller.scala 76:21]
    io.r.ready <= UInt<1>("h0") @[Controller.scala 78:19]
    io.aw.valid <= UInt<1>("h0") @[Controller.scala 80:21]
    io.aw.bits.id <= UInt<1>("h0") @[Controller.scala 81:21]
    io.aw.bits.addr <= UInt<1>("h0") @[Controller.scala 82:21]
    io.aw.bits.region <= UInt<1>("h0") @[Controller.scala 83:21]
    io.aw.bits.len <= UInt<1>("h0") @[Controller.scala 84:21]
    io.aw.bits.size <= UInt<2>("h2") @[Controller.scala 85:21]
    io.aw.bits.burst <= UInt<1>("h0") @[Controller.scala 86:21]
    io.aw.bits.lock <= UInt<1>("h0") @[Controller.scala 87:21]
    io.aw.bits.cache <= UInt<1>("h0") @[Controller.scala 88:21]
    io.aw.bits.prot <= UInt<1>("h0") @[Controller.scala 89:21]
    io.aw.bits.qos <= UInt<1>("h0") @[Controller.scala 90:21]
    io.w.valid <= UInt<1>("h0") @[Controller.scala 92:18]
    io.w.bits.data <= UInt<1>("h0") @[Controller.scala 93:18]
    io.w.bits.strb <= UInt<1>("h0") @[Controller.scala 94:18]
    io.w.bits.last <= UInt<1>("h0") @[Controller.scala 95:18]
    io.b.ready <= UInt<1>("h0") @[Controller.scala 97:18]
    node _T = eq(UInt<3>("h0"), DataMemAccessState) @[Controller.scala 102:30]
    when _T : @[Controller.scala 102:30]
      when isDataLoad : @[Controller.scala 104:24]
        node _DataMemAccessState_T = mux(io.ar.ready, UInt<3>("h2"), UInt<3>("h1")) @[Controller.scala 105:34]
        DataMemAccessState <= _DataMemAccessState_T @[Controller.scala 105:28]
      else :
        when isDataStore : @[Controller.scala 106:31]
          node _DataMemAccessState_T_1 = and(io.aw.ready, io.w.ready) @[Controller.scala 107:48]
          node _DataMemAccessState_T_2 = mux(_DataMemAccessState_T_1, UInt<3>("h4"), UInt<3>("h3")) @[Controller.scala 107:34]
          DataMemAccessState <= _DataMemAccessState_T_2 @[Controller.scala 107:28]
        else :
          DataMemAccessState <= UInt<3>("h0") @[Controller.scala 109:28]
    else :
      node _T_1 = eq(UInt<3>("h1"), DataMemAccessState) @[Controller.scala 102:30]
      when _T_1 : @[Controller.scala 102:30]
        node _DataMemAccessState_T_3 = mux(io.ar.ready, UInt<3>("h2"), UInt<3>("h1")) @[Controller.scala 113:32]
        DataMemAccessState <= _DataMemAccessState_T_3 @[Controller.scala 113:26]
      else :
        node _T_2 = eq(UInt<3>("h2"), DataMemAccessState) @[Controller.scala 102:30]
        when _T_2 : @[Controller.scala 102:30]
          node _DataMemAccessState_T_4 = mux(io.r.valid, UInt<3>("h0"), UInt<3>("h2")) @[Controller.scala 116:32]
          DataMemAccessState <= _DataMemAccessState_T_4 @[Controller.scala 116:26]
        else :
          node _T_3 = eq(UInt<3>("h3"), DataMemAccessState) @[Controller.scala 102:30]
          when _T_3 : @[Controller.scala 102:30]
            node _DataMemAccessState_T_5 = and(io.aw.ready, io.w.ready) @[Controller.scala 119:46]
            node _DataMemAccessState_T_6 = mux(_DataMemAccessState_T_5, UInt<3>("h4"), UInt<3>("h3")) @[Controller.scala 119:32]
            DataMemAccessState <= _DataMemAccessState_T_6 @[Controller.scala 119:26]
          else :
            node _T_4 = eq(UInt<3>("h4"), DataMemAccessState) @[Controller.scala 102:30]
            when _T_4 : @[Controller.scala 102:30]
              node _DataMemAccessState_T_7 = mux(io.b.valid, UInt<3>("h0"), UInt<3>("h4")) @[Controller.scala 122:32]
              DataMemAccessState <= _DataMemAccessState_T_7 @[Controller.scala 122:26]
    node _T_5 = eq(UInt<3>("h0"), DataMemAccessState) @[Controller.scala 128:30]
    when _T_5 : @[Controller.scala 128:30]
      io.ar.valid <= isDataLoad @[Controller.scala 130:20]
      io.aw.valid <= isDataStore @[Controller.scala 131:19]
      io.w.valid <= isDataStore @[Controller.scala 132:18]
    else :
      node _T_6 = eq(UInt<3>("h1"), DataMemAccessState) @[Controller.scala 128:30]
      when _T_6 : @[Controller.scala 128:30]
        io.ar.valid <= UInt<1>("h1") @[Controller.scala 135:19]
      else :
        node _T_7 = eq(UInt<3>("h2"), DataMemAccessState) @[Controller.scala 128:30]
        when _T_7 : @[Controller.scala 128:30]
          io.r.ready <= UInt<1>("h1") @[Controller.scala 138:18]
        else :
          node _T_8 = eq(UInt<3>("h3"), DataMemAccessState) @[Controller.scala 128:30]
          when _T_8 : @[Controller.scala 128:30]
            io.aw.valid <= UInt<1>("h1") @[Controller.scala 141:19]
            io.w.valid <= UInt<1>("h1") @[Controller.scala 142:18]
          else :
            node _T_9 = eq(UInt<3>("h4"), DataMemAccessState) @[Controller.scala 128:30]
            when _T_9 : @[Controller.scala 128:30]
              io.b.ready <= UInt<1>("h1") @[Controller.scala 145:18]
    node _T_10 = eq(opcode, UInt<6>("h33")) @[Controller.scala 153:15]
    when _T_10 : @[Controller.scala 153:23]
      node _T_11 = eq(funct7, UInt<3>("h4")) @[Controller.scala 154:18]
      node _T_12 = eq(funct3, UInt<3>("h4")) @[Controller.scala 154:46]
      node _T_13 = and(_T_11, _T_12) @[Controller.scala 154:36]
      when _T_13 : @[Controller.scala 154:61]
        node alu_op_hi = cat(funct7, UInt<5>("h0")) @[Cat.scala 33:92]
        node _alu_op_T = cat(alu_op_hi, funct3) @[Cat.scala 33:92]
        alu_op <= _alu_op_T @[Controller.scala 156:14]
      else :
        node alu_op_hi_1 = cat(funct7, UInt<5>("h1f")) @[Cat.scala 33:92]
        node _alu_op_T_1 = cat(alu_op_hi_1, funct3) @[Cat.scala 33:92]
        alu_op <= _alu_op_T_1 @[Controller.scala 160:13]
    else :
      node _T_14 = eq(opcode, UInt<5>("h13")) @[Controller.scala 162:20]
      when _T_14 : @[Controller.scala 162:32]
        node _T_15 = eq(funct3, UInt<3>("h5")) @[Controller.scala 163:17]
        node _T_16 = eq(funct7, UInt<6>("h30")) @[Controller.scala 163:42]
        node _T_17 = eq(funct7, UInt<6>("h24")) @[Controller.scala 163:70]
        node _T_18 = or(_T_16, _T_17) @[Controller.scala 163:60]
        node _T_19 = and(_T_15, _T_18) @[Controller.scala 163:31]
        when _T_19 : @[Controller.scala 163:90]
          node alu_op_hi_2 = cat(funct7, UInt<5>("h1f")) @[Cat.scala 33:92]
          node _alu_op_T_2 = cat(alu_op_hi_2, funct3) @[Cat.scala 33:92]
          alu_op <= _alu_op_T_2 @[Controller.scala 166:13]
        else :
          node _T_20 = eq(funct3, UInt<1>("h1")) @[Controller.scala 168:23]
          node _T_21 = bits(funct7, 2, 2) @[Controller.scala 168:46]
          node _T_22 = eq(_T_21, UInt<1>("h1")) @[Controller.scala 168:50]
          node _T_23 = and(_T_20, _T_22) @[Controller.scala 168:37]
          when _T_23 : @[Controller.scala 168:60]
            node alu_op_hi_3 = cat(funct7, UInt<5>("h1f")) @[Cat.scala 33:92]
            node _alu_op_T_3 = cat(alu_op_hi_3, funct3) @[Cat.scala 33:92]
            alu_op <= _alu_op_T_3 @[Controller.scala 171:13]
          else :
            node _T_24 = eq(funct3, UInt<1>("h1")) @[Controller.scala 173:24]
            node _T_25 = eq(funct3, UInt<3>("h5")) @[Controller.scala 173:48]
            node _T_26 = or(_T_24, _T_25) @[Controller.scala 173:38]
            node _T_27 = bits(funct7, 4, 4) @[Controller.scala 173:72]
            node _T_28 = eq(_T_27, UInt<1>("h1")) @[Controller.scala 173:76]
            node _T_29 = and(_T_26, _T_28) @[Controller.scala 173:63]
            when _T_29 : @[Controller.scala 173:86]
              node alu_op_hi_4 = cat(funct7, rs2) @[Cat.scala 33:92]
              node _alu_op_T_4 = cat(alu_op_hi_4, funct3) @[Cat.scala 33:92]
              alu_op <= _alu_op_T_4 @[Controller.scala 176:13]
            else :
              node _T_30 = eq(funct3, UInt<1>("h1")) @[Controller.scala 178:23]
              node _T_31 = eq(funct3, UInt<3>("h5")) @[Controller.scala 178:47]
              node _T_32 = or(_T_30, _T_31) @[Controller.scala 178:37]
              when _T_32 : @[Controller.scala 178:62]
                node alu_op_hi_5 = cat(funct7, UInt<5>("h1f")) @[Cat.scala 33:92]
                node _alu_op_T_5 = cat(alu_op_hi_5, funct3) @[Cat.scala 33:92]
                alu_op <= _alu_op_T_5 @[Controller.scala 181:13]
              else :
                node alu_op_hi_6 = cat(UInt<7>("h0"), UInt<5>("h1f")) @[Cat.scala 33:92]
                node _alu_op_T_6 = cat(alu_op_hi_6, funct3) @[Cat.scala 33:92]
                alu_op <= _alu_op_T_6 @[Controller.scala 185:14]
      else :
        node alu_op_hi_7 = cat(UInt<7>("h0"), UInt<5>("h1f")) @[Cat.scala 33:92]
        node _alu_op_T_7 = cat(alu_op_hi_7, UInt<3>("h0")) @[Cat.scala 33:92]
        alu_op <= _alu_op_T_7 @[Controller.scala 189:12]
    io.PCSel <= UInt<1>("h0") @[Controller.scala 194:12]
    node _T_33 = eq(UInt<3>("h0"), DataMemAccessState) @[Controller.scala 195:30]
    when _T_33 : @[Controller.scala 195:30]
      node _T_34 = or(isDataLoad, isDataStore) @[Controller.scala 197:23]
      when _T_34 : @[Controller.scala 197:38]
        io.PCSel <= UInt<2>("h2") @[Controller.scala 198:18]
      else :
        node _io_PCSel_T = not(io.BrEq) @[Controller.scala 209:23]
        node _io_PCSel_T_1 = not(io.BrLT) @[Controller.scala 211:23]
        node _io_PCSel_T_2 = not(io.BrLT) @[Controller.scala 213:24]
        node _io_PCSel_T_3 = eq(UInt<1>("h0"), funct3) @[Mux.scala 81:61]
        node _io_PCSel_T_4 = mux(_io_PCSel_T_3, io.BrEq, UInt<1>("h0")) @[Mux.scala 81:58]
        node _io_PCSel_T_5 = eq(UInt<1>("h1"), funct3) @[Mux.scala 81:61]
        node _io_PCSel_T_6 = mux(_io_PCSel_T_5, _io_PCSel_T, _io_PCSel_T_4) @[Mux.scala 81:58]
        node _io_PCSel_T_7 = eq(UInt<3>("h4"), funct3) @[Mux.scala 81:61]
        node _io_PCSel_T_8 = mux(_io_PCSel_T_7, io.BrLT, _io_PCSel_T_6) @[Mux.scala 81:58]
        node _io_PCSel_T_9 = eq(UInt<3>("h5"), funct3) @[Mux.scala 81:61]
        node _io_PCSel_T_10 = mux(_io_PCSel_T_9, _io_PCSel_T_1, _io_PCSel_T_8) @[Mux.scala 81:58]
        node _io_PCSel_T_11 = eq(UInt<3>("h6"), funct3) @[Mux.scala 81:61]
        node _io_PCSel_T_12 = mux(_io_PCSel_T_11, io.BrLT, _io_PCSel_T_10) @[Mux.scala 81:58]
        node _io_PCSel_T_13 = eq(UInt<3>("h7"), funct3) @[Mux.scala 81:61]
        node _io_PCSel_T_14 = mux(_io_PCSel_T_13, _io_PCSel_T_2, _io_PCSel_T_12) @[Mux.scala 81:58]
        node _io_PCSel_T_15 = eq(UInt<7>("h63"), opcode) @[Mux.scala 81:61]
        node _io_PCSel_T_16 = mux(_io_PCSel_T_15, _io_PCSel_T_14, UInt<1>("h0")) @[Mux.scala 81:58]
        node _io_PCSel_T_17 = eq(UInt<7>("h67"), opcode) @[Mux.scala 81:61]
        node _io_PCSel_T_18 = mux(_io_PCSel_T_17, UInt<1>("h1"), _io_PCSel_T_16) @[Mux.scala 81:58]
        node _io_PCSel_T_19 = eq(UInt<7>("h6f"), opcode) @[Mux.scala 81:61]
        node _io_PCSel_T_20 = mux(_io_PCSel_T_19, UInt<1>("h1"), _io_PCSel_T_18) @[Mux.scala 81:58]
        io.PCSel <= _io_PCSel_T_20 @[Controller.scala 200:18]
    else :
      node _T_35 = eq(UInt<3>("h1"), DataMemAccessState) @[Controller.scala 195:30]
      when _T_35 : @[Controller.scala 195:30]
        io.PCSel <= UInt<2>("h2") @[Controller.scala 223:16]
      else :
        node _T_36 = eq(UInt<3>("h2"), DataMemAccessState) @[Controller.scala 195:30]
        when _T_36 : @[Controller.scala 195:30]
          node _io_PCSel_T_21 = mux(io.r.valid, UInt<1>("h0"), UInt<2>("h2")) @[Controller.scala 226:22]
          io.PCSel <= _io_PCSel_T_21 @[Controller.scala 226:16]
        else :
          node _T_37 = eq(UInt<3>("h3"), DataMemAccessState) @[Controller.scala 195:30]
          when _T_37 : @[Controller.scala 195:30]
            io.PCSel <= UInt<2>("h2") @[Controller.scala 229:16]
          else :
            node _T_38 = eq(UInt<3>("h4"), DataMemAccessState) @[Controller.scala 195:30]
            when _T_38 : @[Controller.scala 195:30]
              node _io_PCSel_T_22 = mux(io.b.valid, UInt<1>("h0"), UInt<2>("h2")) @[Controller.scala 232:22]
              io.PCSel <= _io_PCSel_T_22 @[Controller.scala 232:16]
    node _io_BrUn_T = bits(io.Inst, 13, 13) @[Controller.scala 239:22]
    node _io_BrUn_T_1 = eq(_io_BrUn_T, UInt<1>("h1")) @[Controller.scala 239:27]
    io.BrUn <= _io_BrUn_T_1 @[Controller.scala 239:11]
    node _io_Lui_T = eq(opcode, UInt<6>("h37")) @[Controller.scala 244:21]
    io.Lui <= _io_Lui_T @[Controller.scala 244:10]
    node _io_ImmSel_T = eq(UInt<5>("h13"), opcode) @[Mux.scala 81:61]
    node _io_ImmSel_T_1 = mux(_io_ImmSel_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_ImmSel_T_2 = eq(UInt<2>("h3"), opcode) @[Mux.scala 81:61]
    node _io_ImmSel_T_3 = mux(_io_ImmSel_T_2, UInt<1>("h1"), _io_ImmSel_T_1) @[Mux.scala 81:58]
    node _io_ImmSel_T_4 = eq(UInt<6>("h23"), opcode) @[Mux.scala 81:61]
    node _io_ImmSel_T_5 = mux(_io_ImmSel_T_4, UInt<2>("h2"), _io_ImmSel_T_3) @[Mux.scala 81:58]
    node _io_ImmSel_T_6 = eq(UInt<7>("h63"), opcode) @[Mux.scala 81:61]
    node _io_ImmSel_T_7 = mux(_io_ImmSel_T_6, UInt<2>("h3"), _io_ImmSel_T_5) @[Mux.scala 81:58]
    node _io_ImmSel_T_8 = eq(UInt<7>("h67"), opcode) @[Mux.scala 81:61]
    node _io_ImmSel_T_9 = mux(_io_ImmSel_T_8, UInt<1>("h1"), _io_ImmSel_T_7) @[Mux.scala 81:58]
    node _io_ImmSel_T_10 = eq(UInt<7>("h6f"), opcode) @[Mux.scala 81:61]
    node _io_ImmSel_T_11 = mux(_io_ImmSel_T_10, UInt<3>("h4"), _io_ImmSel_T_9) @[Mux.scala 81:58]
    node _io_ImmSel_T_12 = eq(UInt<6>("h37"), opcode) @[Mux.scala 81:61]
    node _io_ImmSel_T_13 = mux(_io_ImmSel_T_12, UInt<3>("h5"), _io_ImmSel_T_11) @[Mux.scala 81:58]
    node _io_ImmSel_T_14 = eq(UInt<5>("h17"), opcode) @[Mux.scala 81:61]
    node _io_ImmSel_T_15 = mux(_io_ImmSel_T_14, UInt<3>("h5"), _io_ImmSel_T_13) @[Mux.scala 81:58]
    io.ImmSel <= _io_ImmSel_T_15 @[Controller.scala 245:13]
    node _io_ASel_T = eq(UInt<7>("h63"), opcode) @[Mux.scala 81:61]
    node _io_ASel_T_1 = mux(_io_ASel_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_ASel_T_2 = eq(UInt<7>("h6f"), opcode) @[Mux.scala 81:61]
    node _io_ASel_T_3 = mux(_io_ASel_T_2, UInt<1>("h1"), _io_ASel_T_1) @[Mux.scala 81:58]
    node _io_ASel_T_4 = eq(UInt<5>("h17"), opcode) @[Mux.scala 81:61]
    node _io_ASel_T_5 = mux(_io_ASel_T_4, UInt<1>("h1"), _io_ASel_T_3) @[Mux.scala 81:58]
    io.ASel <= _io_ASel_T_5 @[Controller.scala 262:11]
    node _io_BSel_T = eq(UInt<6>("h33"), opcode) @[Mux.scala 81:61]
    node _io_BSel_T_1 = mux(_io_BSel_T, UInt<1>("h0"), UInt<1>("h1")) @[Mux.scala 81:58]
    io.BSel <= _io_BSel_T_1 @[Controller.scala 271:11]
    io.ALUSel <= alu_op @[Controller.scala 278:13]
    io.RegWEn <= UInt<1>("h0") @[Controller.scala 282:13]
    node _T_39 = eq(UInt<3>("h0"), DataMemAccessState) @[Controller.scala 283:30]
    when _T_39 : @[Controller.scala 283:30]
      node _io_RegWEn_T = eq(UInt<7>("h67"), opcode) @[Mux.scala 81:61]
      node _io_RegWEn_T_1 = mux(_io_RegWEn_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
      node _io_RegWEn_T_2 = eq(UInt<7>("h6f"), opcode) @[Mux.scala 81:61]
      node _io_RegWEn_T_3 = mux(_io_RegWEn_T_2, UInt<1>("h1"), _io_RegWEn_T_1) @[Mux.scala 81:58]
      node _io_RegWEn_T_4 = eq(UInt<5>("h13"), opcode) @[Mux.scala 81:61]
      node _io_RegWEn_T_5 = mux(_io_RegWEn_T_4, UInt<1>("h1"), _io_RegWEn_T_3) @[Mux.scala 81:58]
      node _io_RegWEn_T_6 = eq(UInt<6>("h33"), opcode) @[Mux.scala 81:61]
      node _io_RegWEn_T_7 = mux(_io_RegWEn_T_6, UInt<1>("h1"), _io_RegWEn_T_5) @[Mux.scala 81:58]
      node _io_RegWEn_T_8 = eq(UInt<5>("h17"), opcode) @[Mux.scala 81:61]
      node _io_RegWEn_T_9 = mux(_io_RegWEn_T_8, UInt<1>("h1"), _io_RegWEn_T_7) @[Mux.scala 81:58]
      node _io_RegWEn_T_10 = eq(UInt<6>("h37"), opcode) @[Mux.scala 81:61]
      node _io_RegWEn_T_11 = mux(_io_RegWEn_T_10, UInt<1>("h1"), _io_RegWEn_T_9) @[Mux.scala 81:58]
      io.RegWEn <= _io_RegWEn_T_11 @[Controller.scala 285:17]
    else :
      node _T_40 = eq(UInt<3>("h1"), DataMemAccessState) @[Controller.scala 283:30]
      when _T_40 : @[Controller.scala 283:30]
        io.RegWEn <= UInt<1>("h0") @[Controller.scala 299:17]
      else :
        node _T_41 = eq(UInt<3>("h2"), DataMemAccessState) @[Controller.scala 283:30]
        when _T_41 : @[Controller.scala 283:30]
          node _io_RegWEn_T_12 = eq(opcode, UInt<2>("h3")) @[Controller.scala 302:46]
          node _io_RegWEn_T_13 = and(io.r.valid, _io_RegWEn_T_12) @[Controller.scala 302:36]
          node _io_RegWEn_T_14 = mux(_io_RegWEn_T_13, UInt<1>("h1"), UInt<1>("h0")) @[Controller.scala 302:23]
          io.RegWEn <= _io_RegWEn_T_14 @[Controller.scala 302:17]
        else :
          node _T_42 = eq(UInt<3>("h3"), DataMemAccessState) @[Controller.scala 283:30]
          when _T_42 : @[Controller.scala 283:30]
            io.RegWEn <= UInt<1>("h0") @[Controller.scala 305:17]
          else :
            node _T_43 = eq(UInt<3>("h4"), DataMemAccessState) @[Controller.scala 283:30]
            when _T_43 : @[Controller.scala 283:30]
              io.RegWEn <= UInt<1>("h0") @[Controller.scala 308:17]
    node _io_WBSel_T = eq(UInt<2>("h3"), opcode) @[Mux.scala 81:61]
    node _io_WBSel_T_1 = mux(_io_WBSel_T, UInt<1>("h0"), UInt<1>("h1")) @[Mux.scala 81:58]
    node _io_WBSel_T_2 = eq(UInt<7>("h67"), opcode) @[Mux.scala 81:61]
    node _io_WBSel_T_3 = mux(_io_WBSel_T_2, UInt<2>("h2"), _io_WBSel_T_1) @[Mux.scala 81:58]
    node _io_WBSel_T_4 = eq(UInt<7>("h6f"), opcode) @[Mux.scala 81:61]
    node _io_WBSel_T_5 = mux(_io_WBSel_T_4, UInt<2>("h2"), _io_WBSel_T_3) @[Mux.scala 81:58]
    io.WBSel <= _io_WBSel_T_5 @[Controller.scala 312:11]
    node _io_Hcf_T = eq(opcode, UInt<4>("hb")) @[Controller.scala 323:20]
    io.Hcf <= _io_Hcf_T @[Controller.scala 323:9]

  module PC :
    input clock : Clock
    input reset : Reset
    output io : { flip Hcf : UInt<1>, flip PCSel : UInt<2>, flip alu_out : UInt<32>, pc : UInt<15>}

    reg pcReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[PC.scala 14:22]
    node _T = eq(io.Hcf, UInt<1>("h0")) @[PC.scala 16:8]
    when _T : @[PC.scala 16:17]
      node _pcReg_T = add(pcReg, UInt<3>("h4")) @[PC.scala 19:13]
      node _pcReg_T_1 = tail(_pcReg_T, 1) @[PC.scala 19:13]
      node _pcReg_T_2 = not(UInt<32>("h3")) @[PC.scala 22:30]
      node _pcReg_T_3 = and(io.alu_out, _pcReg_T_2) @[PC.scala 22:28]
      node _pcReg_T_4 = add(pcReg, UInt<3>("h4")) @[PC.scala 23:23]
      node _pcReg_T_5 = tail(_pcReg_T_4, 1) @[PC.scala 23:23]
      node _pcReg_T_6 = eq(UInt<2>("h2"), io.PCSel) @[Mux.scala 81:61]
      node _pcReg_T_7 = mux(_pcReg_T_6, pcReg, _pcReg_T_1) @[Mux.scala 81:58]
      node _pcReg_T_8 = eq(UInt<1>("h1"), io.PCSel) @[Mux.scala 81:61]
      node _pcReg_T_9 = mux(_pcReg_T_8, _pcReg_T_3, _pcReg_T_7) @[Mux.scala 81:58]
      node _pcReg_T_10 = eq(UInt<1>("h0"), io.PCSel) @[Mux.scala 81:61]
      node _pcReg_T_11 = mux(_pcReg_T_10, _pcReg_T_5, _pcReg_T_9) @[Mux.scala 81:58]
      pcReg <= _pcReg_T_11 @[PC.scala 17:11]
    else :
      pcReg <= pcReg @[PC.scala 27:11]
    io.pc <= pcReg @[PC.scala 30:9]

  module ImmGen :
    input clock : Clock
    input reset : Reset
    output io : { flip inst_31_7 : UInt<25>, flip ImmSel : UInt<3>, imm : UInt<32>}

    wire inst_shift : UInt<32> @[ImmGen.scala 15:24]
    node _inst_shift_T = cat(io.inst_31_7, UInt<7>("h0")) @[Cat.scala 33:92]
    inst_shift <= _inst_shift_T @[ImmGen.scala 16:14]
    wire simm : SInt<32> @[ImmGen.scala 18:18]
    node _simm_T = bits(inst_shift, 31, 20) @[ImmGen.scala 28:42]
    node _simm_T_1 = cat(UInt<20>("h0"), _simm_T) @[Cat.scala 33:92]
    node _simm_T_2 = asSInt(_simm_T_1) @[ImmGen.scala 28:52]
    node _simm_T_3 = bits(inst_shift, 31, 31) @[ImmGen.scala 30:31]
    node _simm_T_4 = bits(inst_shift, 7, 7) @[ImmGen.scala 30:47]
    node _simm_T_5 = bits(inst_shift, 30, 25) @[ImmGen.scala 30:62]
    node _simm_T_6 = bits(inst_shift, 11, 8) @[ImmGen.scala 30:82]
    node simm_lo = cat(_simm_T_6, UInt<1>("h0")) @[Cat.scala 33:92]
    node simm_hi_hi = cat(_simm_T_3, _simm_T_4) @[Cat.scala 33:92]
    node simm_hi = cat(simm_hi_hi, _simm_T_5) @[Cat.scala 33:92]
    node _simm_T_7 = cat(simm_hi, simm_lo) @[Cat.scala 33:92]
    node _simm_T_8 = asSInt(_simm_T_7) @[ImmGen.scala 30:101]
    node _simm_T_9 = bits(inst_shift, 31, 31) @[ImmGen.scala 33:31]
    node _simm_T_10 = bits(inst_shift, 30, 25) @[ImmGen.scala 33:47]
    node _simm_T_11 = bits(inst_shift, 11, 8) @[ImmGen.scala 33:67]
    node _simm_T_12 = bits(inst_shift, 7, 7) @[ImmGen.scala 33:86]
    node simm_lo_1 = cat(_simm_T_11, _simm_T_12) @[Cat.scala 33:92]
    node simm_hi_1 = cat(_simm_T_9, _simm_T_10) @[Cat.scala 33:92]
    node _simm_T_13 = cat(simm_hi_1, simm_lo_1) @[Cat.scala 33:92]
    node _simm_T_14 = asSInt(_simm_T_13) @[ImmGen.scala 33:91]
    node _simm_T_15 = bits(inst_shift, 31, 12) @[ImmGen.scala 36:31]
    node _simm_T_16 = cat(_simm_T_15, UInt<12>("h0")) @[Cat.scala 33:92]
    node _simm_T_17 = asSInt(_simm_T_16) @[ImmGen.scala 36:52]
    node _simm_T_18 = bits(inst_shift, 31, 31) @[ImmGen.scala 39:31]
    node _simm_T_19 = bits(inst_shift, 19, 12) @[ImmGen.scala 39:47]
    node _simm_T_20 = bits(inst_shift, 20, 20) @[ImmGen.scala 39:67]
    node _simm_T_21 = bits(inst_shift, 30, 21) @[ImmGen.scala 39:83]
    node simm_lo_2 = cat(_simm_T_21, UInt<1>("h0")) @[Cat.scala 33:92]
    node simm_hi_hi_1 = cat(_simm_T_18, _simm_T_19) @[Cat.scala 33:92]
    node simm_hi_2 = cat(simm_hi_hi_1, _simm_T_20) @[Cat.scala 33:92]
    node _simm_T_22 = cat(simm_hi_2, simm_lo_2) @[Cat.scala 33:92]
    node _simm_T_23 = asSInt(_simm_T_22) @[ImmGen.scala 39:103]
    node _simm_T_24 = eq(UInt<1>("h0"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_25 = mux(_simm_T_24, asSInt(UInt<1>("h0")), asSInt(UInt<1>("h0"))) @[Mux.scala 81:58]
    node _simm_T_26 = eq(UInt<1>("h1"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_27 = mux(_simm_T_26, _simm_T_2, _simm_T_25) @[Mux.scala 81:58]
    node _simm_T_28 = eq(UInt<2>("h3"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_29 = mux(_simm_T_28, _simm_T_8, _simm_T_27) @[Mux.scala 81:58]
    node _simm_T_30 = eq(UInt<2>("h2"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_31 = mux(_simm_T_30, _simm_T_14, _simm_T_29) @[Mux.scala 81:58]
    node _simm_T_32 = eq(UInt<3>("h5"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_33 = mux(_simm_T_32, _simm_T_17, _simm_T_31) @[Mux.scala 81:58]
    node _simm_T_34 = eq(UInt<3>("h4"), io.ImmSel) @[Mux.scala 81:61]
    node _simm_T_35 = mux(_simm_T_34, _simm_T_23, _simm_T_33) @[Mux.scala 81:58]
    simm <= _simm_T_35 @[ImmGen.scala 20:8]
    node _io_imm_T = asUInt(simm) @[ImmGen.scala 43:18]
    io.imm <= _io_imm_T @[ImmGen.scala 43:10]

  module RegFile :
    input clock : Clock
    input reset : Reset
    output io : { flip wen : UInt<1>, flip waddr : UInt<5>, flip wdata : UInt<32>, flip raddr : UInt<5>[2], rdata : UInt<32>[2], regs : UInt<32>[32]}

    node _regs_T = sub(UInt<32>("h10000"), UInt<1>("h1")) @[RegFile.scala 15:77]
    node _regs_T_1 = tail(_regs_T, 1) @[RegFile.scala 15:77]
    wire _regs_WIRE : UInt<32>[32] @[RegFile.scala 15:29]
    _regs_WIRE[0] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[1] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[2] <= _regs_T_1 @[RegFile.scala 15:29]
    _regs_WIRE[3] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[4] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[5] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[6] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[7] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[8] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[9] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[10] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[11] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[12] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[13] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[14] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[15] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[16] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[17] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[18] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[19] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[20] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[21] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[22] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[23] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[24] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[25] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[26] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[27] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[28] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[29] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[30] <= UInt<32>("h0") @[RegFile.scala 15:29]
    _regs_WIRE[31] <= UInt<32>("h0") @[RegFile.scala 15:29]
    reg regs : UInt<32>[32], clock with :
      reset => (reset, _regs_WIRE) @[RegFile.scala 15:21]
    io.rdata[0] <= regs[io.raddr[0]] @[RegFile.scala 18:59]
    io.rdata[1] <= regs[io.raddr[1]] @[RegFile.scala 18:59]
    when io.wen : @[RegFile.scala 19:16]
      regs[io.waddr] <= io.wdata @[RegFile.scala 19:33]
    regs[0] <= UInt<1>("h0") @[RegFile.scala 20:11]
    io.regs <= regs @[RegFile.scala 22:11]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip src1 : UInt<32>, flip src2 : UInt<32>, flip ALUSel : UInt<15>, out : UInt<32>}

    wire funct7 : UInt<7> @[ALU.scala 19:20]
    wire mask : UInt<5> @[ALU.scala 20:20]
    wire funct3 : UInt<3> @[ALU.scala 21:20]
    node _funct7_T = bits(io.ALUSel, 14, 8) @[ALU.scala 22:22]
    funct7 <= _funct7_T @[ALU.scala 22:10]
    node _mask_T = bits(io.ALUSel, 7, 3) @[ALU.scala 23:22]
    mask <= _mask_T @[ALU.scala 23:10]
    node _funct3_T = bits(io.ALUSel, 2, 0) @[ALU.scala 24:22]
    funct3 <= _funct3_T @[ALU.scala 24:10]
    io.out <= UInt<1>("h0") @[ALU.scala 26:10]
    node _T = eq(UInt<8>("hf8"), io.ALUSel) @[ALU.scala 27:21]
    when _T : @[ALU.scala 27:21]
      node _io_out_T = add(io.src1, io.src2) @[ALU.scala 28:33]
      node _io_out_T_1 = tail(_io_out_T, 1) @[ALU.scala 28:33]
      io.out <= _io_out_T_1 @[ALU.scala 28:22]
    else :
      node _T_1 = eq(UInt<8>("hf9"), io.ALUSel) @[ALU.scala 27:21]
      when _T_1 : @[ALU.scala 27:21]
        node _io_out_T_2 = bits(io.src2, 4, 0) @[ALU.scala 29:43]
        node _io_out_T_3 = dshl(io.src1, _io_out_T_2) @[ALU.scala 29:33]
        io.out <= _io_out_T_3 @[ALU.scala 29:22]
      else :
        node _T_2 = eq(UInt<8>("hfa"), io.ALUSel) @[ALU.scala 27:21]
        when _T_2 : @[ALU.scala 27:21]
          node _io_out_T_4 = asSInt(io.src1) @[ALU.scala 30:37]
          node _io_out_T_5 = asSInt(io.src2) @[ALU.scala 30:54]
          node _io_out_T_6 = lt(_io_out_T_4, _io_out_T_5) @[ALU.scala 30:44]
          node _io_out_T_7 = mux(_io_out_T_6, UInt<1>("h1"), UInt<1>("h0")) @[ALU.scala 30:28]
          io.out <= _io_out_T_7 @[ALU.scala 30:22]
        else :
          node _T_3 = eq(UInt<8>("hfb"), io.ALUSel) @[ALU.scala 27:21]
          when _T_3 : @[ALU.scala 27:21]
            node _io_out_T_8 = lt(io.src1, io.src2) @[ALU.scala 31:38]
            node _io_out_T_9 = mux(_io_out_T_8, UInt<1>("h1"), UInt<1>("h0")) @[ALU.scala 31:29]
            io.out <= _io_out_T_9 @[ALU.scala 31:23]
          else :
            node _T_4 = eq(UInt<8>("hfc"), io.ALUSel) @[ALU.scala 27:21]
            when _T_4 : @[ALU.scala 27:21]
              node _io_out_T_10 = xor(io.src1, io.src2) @[ALU.scala 32:33]
              io.out <= _io_out_T_10 @[ALU.scala 32:22]
            else :
              node _T_5 = eq(UInt<8>("hfd"), io.ALUSel) @[ALU.scala 27:21]
              when _T_5 : @[ALU.scala 27:21]
                node _io_out_T_11 = bits(io.src2, 4, 0) @[ALU.scala 33:43]
                node _io_out_T_12 = dshr(io.src1, _io_out_T_11) @[ALU.scala 33:33]
                io.out <= _io_out_T_12 @[ALU.scala 33:22]
              else :
                node _T_6 = eq(UInt<8>("hfe"), io.ALUSel) @[ALU.scala 27:21]
                when _T_6 : @[ALU.scala 27:21]
                  node _io_out_T_13 = or(io.src1, io.src2) @[ALU.scala 34:32]
                  io.out <= _io_out_T_13 @[ALU.scala 34:21]
                else :
                  node _T_7 = eq(UInt<8>("hff"), io.ALUSel) @[ALU.scala 27:21]
                  when _T_7 : @[ALU.scala 27:21]
                    node _io_out_T_14 = and(io.src1, io.src2) @[ALU.scala 35:33]
                    io.out <= _io_out_T_14 @[ALU.scala 35:22]
                  else :
                    node _T_8 = eq(UInt<14>("h20f8"), io.ALUSel) @[ALU.scala 27:21]
                    when _T_8 : @[ALU.scala 27:21]
                      node _io_out_T_15 = sub(io.src1, io.src2) @[ALU.scala 36:33]
                      node _io_out_T_16 = tail(_io_out_T_15, 1) @[ALU.scala 36:33]
                      io.out <= _io_out_T_16 @[ALU.scala 36:22]
                    else :
                      node _T_9 = eq(UInt<14>("h20fd"), io.ALUSel) @[ALU.scala 27:21]
                      when _T_9 : @[ALU.scala 27:21]
                        node _io_out_T_17 = asSInt(io.src1) @[ALU.scala 37:34]
                        node _io_out_T_18 = bits(io.src2, 4, 0) @[ALU.scala 37:51]
                        node _io_out_T_19 = dshr(_io_out_T_17, _io_out_T_18) @[ALU.scala 37:41]
                        node _io_out_T_20 = asUInt(_io_out_T_19) @[ALU.scala 37:59]
                        io.out <= _io_out_T_20 @[ALU.scala 37:22]
                      else :
                        node _T_10 = eq(UInt<9>("h1f8"), io.ALUSel) @[ALU.scala 27:21]
                        when _T_10 : @[ALU.scala 27:21]
                          node _io_out_T_21 = mul(io.src1, io.src2) @[ALU.scala 38:33]
                          io.out <= _io_out_T_21 @[ALU.scala 38:22]
                        else :
                          node _T_11 = eq(UInt<14>("h3001"), io.ALUSel) @[ALU.scala 27:21]
                          when _T_11 : @[ALU.scala 27:21]
                            node _T_12 = bits(io.src1, 31, 31) @[ALU.scala 41:19]
                            node _T_13 = eq(_T_12, UInt<1>("h1")) @[ALU.scala 41:24]
                            when _T_13 : @[ALU.scala 41:33]
                              io.out <= UInt<1>("h0") @[ALU.scala 41:42]
                            else :
                              node _T_14 = eq(io.src1, UInt<1>("h0")) @[ALU.scala 42:27]
                              when _T_14 : @[ALU.scala 42:36]
                                io.out <= UInt<6>("h20") @[ALU.scala 42:45]
                              else :
                                node _T_15 = bits(io.src1, 31, 30) @[ALU.scala 45:25]
                                node _T_16 = cat(UInt<1>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_17 = eq(_T_15, _T_16) @[ALU.scala 45:38]
                                when _T_17 : @[ALU.scala 45:67]
                                  io.out <= UInt<1>("h1") @[ALU.scala 46:22]
                                node _T_18 = bits(io.src1, 31, 29) @[ALU.scala 45:25]
                                node _T_19 = cat(UInt<2>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_20 = eq(_T_18, _T_19) @[ALU.scala 45:38]
                                when _T_20 : @[ALU.scala 45:67]
                                  io.out <= UInt<2>("h2") @[ALU.scala 46:22]
                                node _T_21 = bits(io.src1, 31, 28) @[ALU.scala 45:25]
                                node _T_22 = cat(UInt<3>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_23 = eq(_T_21, _T_22) @[ALU.scala 45:38]
                                when _T_23 : @[ALU.scala 45:67]
                                  io.out <= UInt<2>("h3") @[ALU.scala 46:22]
                                node _T_24 = bits(io.src1, 31, 27) @[ALU.scala 45:25]
                                node _T_25 = cat(UInt<4>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_26 = eq(_T_24, _T_25) @[ALU.scala 45:38]
                                when _T_26 : @[ALU.scala 45:67]
                                  io.out <= UInt<3>("h4") @[ALU.scala 46:22]
                                node _T_27 = bits(io.src1, 31, 26) @[ALU.scala 45:25]
                                node _T_28 = cat(UInt<5>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_29 = eq(_T_27, _T_28) @[ALU.scala 45:38]
                                when _T_29 : @[ALU.scala 45:67]
                                  io.out <= UInt<3>("h5") @[ALU.scala 46:22]
                                node _T_30 = bits(io.src1, 31, 25) @[ALU.scala 45:25]
                                node _T_31 = cat(UInt<6>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_32 = eq(_T_30, _T_31) @[ALU.scala 45:38]
                                when _T_32 : @[ALU.scala 45:67]
                                  io.out <= UInt<3>("h6") @[ALU.scala 46:22]
                                node _T_33 = bits(io.src1, 31, 24) @[ALU.scala 45:25]
                                node _T_34 = cat(UInt<7>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_35 = eq(_T_33, _T_34) @[ALU.scala 45:38]
                                when _T_35 : @[ALU.scala 45:67]
                                  io.out <= UInt<3>("h7") @[ALU.scala 46:22]
                                node _T_36 = bits(io.src1, 31, 23) @[ALU.scala 45:25]
                                node _T_37 = cat(UInt<8>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_38 = eq(_T_36, _T_37) @[ALU.scala 45:38]
                                when _T_38 : @[ALU.scala 45:67]
                                  io.out <= UInt<4>("h8") @[ALU.scala 46:22]
                                node _T_39 = bits(io.src1, 31, 22) @[ALU.scala 45:25]
                                node _T_40 = cat(UInt<9>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_41 = eq(_T_39, _T_40) @[ALU.scala 45:38]
                                when _T_41 : @[ALU.scala 45:67]
                                  io.out <= UInt<4>("h9") @[ALU.scala 46:22]
                                node _T_42 = bits(io.src1, 31, 21) @[ALU.scala 45:25]
                                node _T_43 = cat(UInt<10>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_44 = eq(_T_42, _T_43) @[ALU.scala 45:38]
                                when _T_44 : @[ALU.scala 45:67]
                                  io.out <= UInt<4>("ha") @[ALU.scala 46:22]
                                node _T_45 = bits(io.src1, 31, 20) @[ALU.scala 45:25]
                                node _T_46 = cat(UInt<11>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_47 = eq(_T_45, _T_46) @[ALU.scala 45:38]
                                when _T_47 : @[ALU.scala 45:67]
                                  io.out <= UInt<4>("hb") @[ALU.scala 46:22]
                                node _T_48 = bits(io.src1, 31, 19) @[ALU.scala 45:25]
                                node _T_49 = cat(UInt<12>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_50 = eq(_T_48, _T_49) @[ALU.scala 45:38]
                                when _T_50 : @[ALU.scala 45:67]
                                  io.out <= UInt<4>("hc") @[ALU.scala 46:22]
                                node _T_51 = bits(io.src1, 31, 18) @[ALU.scala 45:25]
                                node _T_52 = cat(UInt<13>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_53 = eq(_T_51, _T_52) @[ALU.scala 45:38]
                                when _T_53 : @[ALU.scala 45:67]
                                  io.out <= UInt<4>("hd") @[ALU.scala 46:22]
                                node _T_54 = bits(io.src1, 31, 17) @[ALU.scala 45:25]
                                node _T_55 = cat(UInt<14>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_56 = eq(_T_54, _T_55) @[ALU.scala 45:38]
                                when _T_56 : @[ALU.scala 45:67]
                                  io.out <= UInt<4>("he") @[ALU.scala 46:22]
                                node _T_57 = bits(io.src1, 31, 16) @[ALU.scala 45:25]
                                node _T_58 = cat(UInt<15>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_59 = eq(_T_57, _T_58) @[ALU.scala 45:38]
                                when _T_59 : @[ALU.scala 45:67]
                                  io.out <= UInt<4>("hf") @[ALU.scala 46:22]
                                node _T_60 = bits(io.src1, 31, 15) @[ALU.scala 45:25]
                                node _T_61 = cat(UInt<16>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_62 = eq(_T_60, _T_61) @[ALU.scala 45:38]
                                when _T_62 : @[ALU.scala 45:67]
                                  io.out <= UInt<5>("h10") @[ALU.scala 46:22]
                                node _T_63 = bits(io.src1, 31, 14) @[ALU.scala 45:25]
                                node _T_64 = cat(UInt<17>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_65 = eq(_T_63, _T_64) @[ALU.scala 45:38]
                                when _T_65 : @[ALU.scala 45:67]
                                  io.out <= UInt<5>("h11") @[ALU.scala 46:22]
                                node _T_66 = bits(io.src1, 31, 13) @[ALU.scala 45:25]
                                node _T_67 = cat(UInt<18>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_68 = eq(_T_66, _T_67) @[ALU.scala 45:38]
                                when _T_68 : @[ALU.scala 45:67]
                                  io.out <= UInt<5>("h12") @[ALU.scala 46:22]
                                node _T_69 = bits(io.src1, 31, 12) @[ALU.scala 45:25]
                                node _T_70 = cat(UInt<19>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_71 = eq(_T_69, _T_70) @[ALU.scala 45:38]
                                when _T_71 : @[ALU.scala 45:67]
                                  io.out <= UInt<5>("h13") @[ALU.scala 46:22]
                                node _T_72 = bits(io.src1, 31, 11) @[ALU.scala 45:25]
                                node _T_73 = cat(UInt<20>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_74 = eq(_T_72, _T_73) @[ALU.scala 45:38]
                                when _T_74 : @[ALU.scala 45:67]
                                  io.out <= UInt<5>("h14") @[ALU.scala 46:22]
                                node _T_75 = bits(io.src1, 31, 10) @[ALU.scala 45:25]
                                node _T_76 = cat(UInt<21>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_77 = eq(_T_75, _T_76) @[ALU.scala 45:38]
                                when _T_77 : @[ALU.scala 45:67]
                                  io.out <= UInt<5>("h15") @[ALU.scala 46:22]
                                node _T_78 = bits(io.src1, 31, 9) @[ALU.scala 45:25]
                                node _T_79 = cat(UInt<22>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_80 = eq(_T_78, _T_79) @[ALU.scala 45:38]
                                when _T_80 : @[ALU.scala 45:67]
                                  io.out <= UInt<5>("h16") @[ALU.scala 46:22]
                                node _T_81 = bits(io.src1, 31, 8) @[ALU.scala 45:25]
                                node _T_82 = cat(UInt<23>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_83 = eq(_T_81, _T_82) @[ALU.scala 45:38]
                                when _T_83 : @[ALU.scala 45:67]
                                  io.out <= UInt<5>("h17") @[ALU.scala 46:22]
                                node _T_84 = bits(io.src1, 31, 7) @[ALU.scala 45:25]
                                node _T_85 = cat(UInt<24>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_86 = eq(_T_84, _T_85) @[ALU.scala 45:38]
                                when _T_86 : @[ALU.scala 45:67]
                                  io.out <= UInt<5>("h18") @[ALU.scala 46:22]
                                node _T_87 = bits(io.src1, 31, 6) @[ALU.scala 45:25]
                                node _T_88 = cat(UInt<25>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_89 = eq(_T_87, _T_88) @[ALU.scala 45:38]
                                when _T_89 : @[ALU.scala 45:67]
                                  io.out <= UInt<5>("h19") @[ALU.scala 46:22]
                                node _T_90 = bits(io.src1, 31, 5) @[ALU.scala 45:25]
                                node _T_91 = cat(UInt<26>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_92 = eq(_T_90, _T_91) @[ALU.scala 45:38]
                                when _T_92 : @[ALU.scala 45:67]
                                  io.out <= UInt<5>("h1a") @[ALU.scala 46:22]
                                node _T_93 = bits(io.src1, 31, 4) @[ALU.scala 45:25]
                                node _T_94 = cat(UInt<27>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_95 = eq(_T_93, _T_94) @[ALU.scala 45:38]
                                when _T_95 : @[ALU.scala 45:67]
                                  io.out <= UInt<5>("h1b") @[ALU.scala 46:22]
                                node _T_96 = bits(io.src1, 31, 3) @[ALU.scala 45:25]
                                node _T_97 = cat(UInt<28>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_98 = eq(_T_96, _T_97) @[ALU.scala 45:38]
                                when _T_98 : @[ALU.scala 45:67]
                                  io.out <= UInt<5>("h1c") @[ALU.scala 46:22]
                                node _T_99 = bits(io.src1, 31, 2) @[ALU.scala 45:25]
                                node _T_100 = cat(UInt<29>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_101 = eq(_T_99, _T_100) @[ALU.scala 45:38]
                                when _T_101 : @[ALU.scala 45:67]
                                  io.out <= UInt<5>("h1d") @[ALU.scala 46:22]
                                node _T_102 = bits(io.src1, 31, 1) @[ALU.scala 45:25]
                                node _T_103 = cat(UInt<30>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_104 = eq(_T_102, _T_103) @[ALU.scala 45:38]
                                when _T_104 : @[ALU.scala 45:67]
                                  io.out <= UInt<5>("h1e") @[ALU.scala 46:22]
                                node _T_105 = bits(io.src1, 31, 0) @[ALU.scala 45:25]
                                node _T_106 = cat(UInt<31>("h0"), UInt<1>("h1")) @[Cat.scala 33:92]
                                node _T_107 = eq(_T_105, _T_106) @[ALU.scala 45:38]
                                when _T_107 : @[ALU.scala 45:67]
                                  io.out <= UInt<5>("h1f") @[ALU.scala 46:22]
                          else :
                            node _T_108 = eq(UInt<14>("h3009"), io.ALUSel) @[ALU.scala 27:21]
                            when _T_108 : @[ALU.scala 27:21]
                              node _T_109 = bits(io.src1, 0, 0) @[ALU.scala 53:19]
                              node _T_110 = eq(_T_109, UInt<1>("h1")) @[ALU.scala 53:23]
                              when _T_110 : @[ALU.scala 53:32]
                                io.out <= UInt<1>("h0") @[ALU.scala 53:41]
                              else :
                                node _T_111 = eq(io.src1, UInt<1>("h0")) @[ALU.scala 54:27]
                                when _T_111 : @[ALU.scala 54:36]
                                  io.out <= UInt<6>("h20") @[ALU.scala 54:45]
                                else :
                                  node _T_112 = bits(io.src1, 1, 0) @[ALU.scala 57:25]
                                  node _T_113 = cat(UInt<1>("h1"), UInt<1>("h0")) @[Cat.scala 33:92]
                                  node _T_114 = eq(_T_112, _T_113) @[ALU.scala 57:32]
                                  when _T_114 : @[ALU.scala 57:61]
                                    io.out <= UInt<1>("h1") @[ALU.scala 58:22]
                                  node _T_115 = bits(io.src1, 2, 0) @[ALU.scala 57:25]
                                  node _T_116 = cat(UInt<1>("h1"), UInt<2>("h0")) @[Cat.scala 33:92]
                                  node _T_117 = eq(_T_115, _T_116) @[ALU.scala 57:32]
                                  when _T_117 : @[ALU.scala 57:61]
                                    io.out <= UInt<2>("h2") @[ALU.scala 58:22]
                                  node _T_118 = bits(io.src1, 3, 0) @[ALU.scala 57:25]
                                  node _T_119 = cat(UInt<1>("h1"), UInt<3>("h0")) @[Cat.scala 33:92]
                                  node _T_120 = eq(_T_118, _T_119) @[ALU.scala 57:32]
                                  when _T_120 : @[ALU.scala 57:61]
                                    io.out <= UInt<2>("h3") @[ALU.scala 58:22]
                                  node _T_121 = bits(io.src1, 4, 0) @[ALU.scala 57:25]
                                  node _T_122 = cat(UInt<1>("h1"), UInt<4>("h0")) @[Cat.scala 33:92]
                                  node _T_123 = eq(_T_121, _T_122) @[ALU.scala 57:32]
                                  when _T_123 : @[ALU.scala 57:61]
                                    io.out <= UInt<3>("h4") @[ALU.scala 58:22]
                                  node _T_124 = bits(io.src1, 5, 0) @[ALU.scala 57:25]
                                  node _T_125 = cat(UInt<1>("h1"), UInt<5>("h0")) @[Cat.scala 33:92]
                                  node _T_126 = eq(_T_124, _T_125) @[ALU.scala 57:32]
                                  when _T_126 : @[ALU.scala 57:61]
                                    io.out <= UInt<3>("h5") @[ALU.scala 58:22]
                                  node _T_127 = bits(io.src1, 6, 0) @[ALU.scala 57:25]
                                  node _T_128 = cat(UInt<1>("h1"), UInt<6>("h0")) @[Cat.scala 33:92]
                                  node _T_129 = eq(_T_127, _T_128) @[ALU.scala 57:32]
                                  when _T_129 : @[ALU.scala 57:61]
                                    io.out <= UInt<3>("h6") @[ALU.scala 58:22]
                                  node _T_130 = bits(io.src1, 7, 0) @[ALU.scala 57:25]
                                  node _T_131 = cat(UInt<1>("h1"), UInt<7>("h0")) @[Cat.scala 33:92]
                                  node _T_132 = eq(_T_130, _T_131) @[ALU.scala 57:32]
                                  when _T_132 : @[ALU.scala 57:61]
                                    io.out <= UInt<3>("h7") @[ALU.scala 58:22]
                                  node _T_133 = bits(io.src1, 8, 0) @[ALU.scala 57:25]
                                  node _T_134 = cat(UInt<1>("h1"), UInt<8>("h0")) @[Cat.scala 33:92]
                                  node _T_135 = eq(_T_133, _T_134) @[ALU.scala 57:32]
                                  when _T_135 : @[ALU.scala 57:61]
                                    io.out <= UInt<4>("h8") @[ALU.scala 58:22]
                                  node _T_136 = bits(io.src1, 9, 0) @[ALU.scala 57:25]
                                  node _T_137 = cat(UInt<1>("h1"), UInt<9>("h0")) @[Cat.scala 33:92]
                                  node _T_138 = eq(_T_136, _T_137) @[ALU.scala 57:32]
                                  when _T_138 : @[ALU.scala 57:61]
                                    io.out <= UInt<4>("h9") @[ALU.scala 58:22]
                                  node _T_139 = bits(io.src1, 10, 0) @[ALU.scala 57:25]
                                  node _T_140 = cat(UInt<1>("h1"), UInt<10>("h0")) @[Cat.scala 33:92]
                                  node _T_141 = eq(_T_139, _T_140) @[ALU.scala 57:32]
                                  when _T_141 : @[ALU.scala 57:61]
                                    io.out <= UInt<4>("ha") @[ALU.scala 58:22]
                                  node _T_142 = bits(io.src1, 11, 0) @[ALU.scala 57:25]
                                  node _T_143 = cat(UInt<1>("h1"), UInt<11>("h0")) @[Cat.scala 33:92]
                                  node _T_144 = eq(_T_142, _T_143) @[ALU.scala 57:32]
                                  when _T_144 : @[ALU.scala 57:61]
                                    io.out <= UInt<4>("hb") @[ALU.scala 58:22]
                                  node _T_145 = bits(io.src1, 12, 0) @[ALU.scala 57:25]
                                  node _T_146 = cat(UInt<1>("h1"), UInt<12>("h0")) @[Cat.scala 33:92]
                                  node _T_147 = eq(_T_145, _T_146) @[ALU.scala 57:32]
                                  when _T_147 : @[ALU.scala 57:61]
                                    io.out <= UInt<4>("hc") @[ALU.scala 58:22]
                                  node _T_148 = bits(io.src1, 13, 0) @[ALU.scala 57:25]
                                  node _T_149 = cat(UInt<1>("h1"), UInt<13>("h0")) @[Cat.scala 33:92]
                                  node _T_150 = eq(_T_148, _T_149) @[ALU.scala 57:32]
                                  when _T_150 : @[ALU.scala 57:61]
                                    io.out <= UInt<4>("hd") @[ALU.scala 58:22]
                                  node _T_151 = bits(io.src1, 14, 0) @[ALU.scala 57:25]
                                  node _T_152 = cat(UInt<1>("h1"), UInt<14>("h0")) @[Cat.scala 33:92]
                                  node _T_153 = eq(_T_151, _T_152) @[ALU.scala 57:32]
                                  when _T_153 : @[ALU.scala 57:61]
                                    io.out <= UInt<4>("he") @[ALU.scala 58:22]
                                  node _T_154 = bits(io.src1, 15, 0) @[ALU.scala 57:25]
                                  node _T_155 = cat(UInt<1>("h1"), UInt<15>("h0")) @[Cat.scala 33:92]
                                  node _T_156 = eq(_T_154, _T_155) @[ALU.scala 57:32]
                                  when _T_156 : @[ALU.scala 57:61]
                                    io.out <= UInt<4>("hf") @[ALU.scala 58:22]
                                  node _T_157 = bits(io.src1, 16, 0) @[ALU.scala 57:25]
                                  node _T_158 = cat(UInt<1>("h1"), UInt<16>("h0")) @[Cat.scala 33:92]
                                  node _T_159 = eq(_T_157, _T_158) @[ALU.scala 57:32]
                                  when _T_159 : @[ALU.scala 57:61]
                                    io.out <= UInt<5>("h10") @[ALU.scala 58:22]
                                  node _T_160 = bits(io.src1, 17, 0) @[ALU.scala 57:25]
                                  node _T_161 = cat(UInt<1>("h1"), UInt<17>("h0")) @[Cat.scala 33:92]
                                  node _T_162 = eq(_T_160, _T_161) @[ALU.scala 57:32]
                                  when _T_162 : @[ALU.scala 57:61]
                                    io.out <= UInt<5>("h11") @[ALU.scala 58:22]
                                  node _T_163 = bits(io.src1, 18, 0) @[ALU.scala 57:25]
                                  node _T_164 = cat(UInt<1>("h1"), UInt<18>("h0")) @[Cat.scala 33:92]
                                  node _T_165 = eq(_T_163, _T_164) @[ALU.scala 57:32]
                                  when _T_165 : @[ALU.scala 57:61]
                                    io.out <= UInt<5>("h12") @[ALU.scala 58:22]
                                  node _T_166 = bits(io.src1, 19, 0) @[ALU.scala 57:25]
                                  node _T_167 = cat(UInt<1>("h1"), UInt<19>("h0")) @[Cat.scala 33:92]
                                  node _T_168 = eq(_T_166, _T_167) @[ALU.scala 57:32]
                                  when _T_168 : @[ALU.scala 57:61]
                                    io.out <= UInt<5>("h13") @[ALU.scala 58:22]
                                  node _T_169 = bits(io.src1, 20, 0) @[ALU.scala 57:25]
                                  node _T_170 = cat(UInt<1>("h1"), UInt<20>("h0")) @[Cat.scala 33:92]
                                  node _T_171 = eq(_T_169, _T_170) @[ALU.scala 57:32]
                                  when _T_171 : @[ALU.scala 57:61]
                                    io.out <= UInt<5>("h14") @[ALU.scala 58:22]
                                  node _T_172 = bits(io.src1, 21, 0) @[ALU.scala 57:25]
                                  node _T_173 = cat(UInt<1>("h1"), UInt<21>("h0")) @[Cat.scala 33:92]
                                  node _T_174 = eq(_T_172, _T_173) @[ALU.scala 57:32]
                                  when _T_174 : @[ALU.scala 57:61]
                                    io.out <= UInt<5>("h15") @[ALU.scala 58:22]
                                  node _T_175 = bits(io.src1, 22, 0) @[ALU.scala 57:25]
                                  node _T_176 = cat(UInt<1>("h1"), UInt<22>("h0")) @[Cat.scala 33:92]
                                  node _T_177 = eq(_T_175, _T_176) @[ALU.scala 57:32]
                                  when _T_177 : @[ALU.scala 57:61]
                                    io.out <= UInt<5>("h16") @[ALU.scala 58:22]
                                  node _T_178 = bits(io.src1, 23, 0) @[ALU.scala 57:25]
                                  node _T_179 = cat(UInt<1>("h1"), UInt<23>("h0")) @[Cat.scala 33:92]
                                  node _T_180 = eq(_T_178, _T_179) @[ALU.scala 57:32]
                                  when _T_180 : @[ALU.scala 57:61]
                                    io.out <= UInt<5>("h17") @[ALU.scala 58:22]
                                  node _T_181 = bits(io.src1, 24, 0) @[ALU.scala 57:25]
                                  node _T_182 = cat(UInt<1>("h1"), UInt<24>("h0")) @[Cat.scala 33:92]
                                  node _T_183 = eq(_T_181, _T_182) @[ALU.scala 57:32]
                                  when _T_183 : @[ALU.scala 57:61]
                                    io.out <= UInt<5>("h18") @[ALU.scala 58:22]
                                  node _T_184 = bits(io.src1, 25, 0) @[ALU.scala 57:25]
                                  node _T_185 = cat(UInt<1>("h1"), UInt<25>("h0")) @[Cat.scala 33:92]
                                  node _T_186 = eq(_T_184, _T_185) @[ALU.scala 57:32]
                                  when _T_186 : @[ALU.scala 57:61]
                                    io.out <= UInt<5>("h19") @[ALU.scala 58:22]
                                  node _T_187 = bits(io.src1, 26, 0) @[ALU.scala 57:25]
                                  node _T_188 = cat(UInt<1>("h1"), UInt<26>("h0")) @[Cat.scala 33:92]
                                  node _T_189 = eq(_T_187, _T_188) @[ALU.scala 57:32]
                                  when _T_189 : @[ALU.scala 57:61]
                                    io.out <= UInt<5>("h1a") @[ALU.scala 58:22]
                                  node _T_190 = bits(io.src1, 27, 0) @[ALU.scala 57:25]
                                  node _T_191 = cat(UInt<1>("h1"), UInt<27>("h0")) @[Cat.scala 33:92]
                                  node _T_192 = eq(_T_190, _T_191) @[ALU.scala 57:32]
                                  when _T_192 : @[ALU.scala 57:61]
                                    io.out <= UInt<5>("h1b") @[ALU.scala 58:22]
                                  node _T_193 = bits(io.src1, 28, 0) @[ALU.scala 57:25]
                                  node _T_194 = cat(UInt<1>("h1"), UInt<28>("h0")) @[Cat.scala 33:92]
                                  node _T_195 = eq(_T_193, _T_194) @[ALU.scala 57:32]
                                  when _T_195 : @[ALU.scala 57:61]
                                    io.out <= UInt<5>("h1c") @[ALU.scala 58:22]
                                  node _T_196 = bits(io.src1, 29, 0) @[ALU.scala 57:25]
                                  node _T_197 = cat(UInt<1>("h1"), UInt<29>("h0")) @[Cat.scala 33:92]
                                  node _T_198 = eq(_T_196, _T_197) @[ALU.scala 57:32]
                                  when _T_198 : @[ALU.scala 57:61]
                                    io.out <= UInt<5>("h1d") @[ALU.scala 58:22]
                                  node _T_199 = bits(io.src1, 30, 0) @[ALU.scala 57:25]
                                  node _T_200 = cat(UInt<1>("h1"), UInt<30>("h0")) @[Cat.scala 33:92]
                                  node _T_201 = eq(_T_199, _T_200) @[ALU.scala 57:32]
                                  when _T_201 : @[ALU.scala 57:61]
                                    io.out <= UInt<5>("h1e") @[ALU.scala 58:22]
                                  node _T_202 = bits(io.src1, 31, 0) @[ALU.scala 57:25]
                                  node _T_203 = cat(UInt<1>("h1"), UInt<31>("h0")) @[Cat.scala 33:92]
                                  node _T_204 = eq(_T_202, _T_203) @[ALU.scala 57:32]
                                  when _T_204 : @[ALU.scala 57:61]
                                    io.out <= UInt<5>("h1f") @[ALU.scala 58:22]
                            else :
                              node _T_205 = eq(UInt<14>("h3011"), io.ALUSel) @[ALU.scala 27:21]
                              when _T_205 : @[ALU.scala 27:21]
                                node _io_out_T_22 = bits(io.src1, 0, 0) @[ALU.scala 64:36]
                                node _io_out_T_23 = cat(UInt<6>("h0"), _io_out_T_22) @[ALU.scala 64:26]
                                node _io_out_T_24 = bits(io.src1, 1, 1) @[ALU.scala 64:61]
                                node _io_out_T_25 = cat(UInt<6>("h0"), _io_out_T_24) @[ALU.scala 64:51]
                                node _io_out_T_26 = add(_io_out_T_23, _io_out_T_25) @[ALU.scala 64:40]
                                node _io_out_T_27 = tail(_io_out_T_26, 1) @[ALU.scala 64:40]
                                node _io_out_T_28 = bits(io.src1, 2, 2) @[ALU.scala 64:86]
                                node _io_out_T_29 = cat(UInt<6>("h0"), _io_out_T_28) @[ALU.scala 64:76]
                                node _io_out_T_30 = add(_io_out_T_27, _io_out_T_29) @[ALU.scala 64:65]
                                node _io_out_T_31 = tail(_io_out_T_30, 1) @[ALU.scala 64:65]
                                node _io_out_T_32 = bits(io.src1, 3, 3) @[ALU.scala 64:111]
                                node _io_out_T_33 = cat(UInt<6>("h0"), _io_out_T_32) @[ALU.scala 64:101]
                                node _io_out_T_34 = add(_io_out_T_31, _io_out_T_33) @[ALU.scala 64:90]
                                node _io_out_T_35 = tail(_io_out_T_34, 1) @[ALU.scala 64:90]
                                node _io_out_T_36 = bits(io.src1, 4, 4) @[ALU.scala 65:28]
                                node _io_out_T_37 = cat(UInt<6>("h0"), _io_out_T_36) @[ALU.scala 65:18]
                                node _io_out_T_38 = add(_io_out_T_35, _io_out_T_37) @[ALU.scala 64:115]
                                node _io_out_T_39 = tail(_io_out_T_38, 1) @[ALU.scala 64:115]
                                node _io_out_T_40 = bits(io.src1, 5, 5) @[ALU.scala 65:53]
                                node _io_out_T_41 = cat(UInt<6>("h0"), _io_out_T_40) @[ALU.scala 65:43]
                                node _io_out_T_42 = add(_io_out_T_39, _io_out_T_41) @[ALU.scala 65:32]
                                node _io_out_T_43 = tail(_io_out_T_42, 1) @[ALU.scala 65:32]
                                node _io_out_T_44 = bits(io.src1, 6, 6) @[ALU.scala 65:78]
                                node _io_out_T_45 = cat(UInt<6>("h0"), _io_out_T_44) @[ALU.scala 65:68]
                                node _io_out_T_46 = add(_io_out_T_43, _io_out_T_45) @[ALU.scala 65:57]
                                node _io_out_T_47 = tail(_io_out_T_46, 1) @[ALU.scala 65:57]
                                node _io_out_T_48 = bits(io.src1, 7, 7) @[ALU.scala 65:103]
                                node _io_out_T_49 = cat(UInt<6>("h0"), _io_out_T_48) @[ALU.scala 65:93]
                                node _io_out_T_50 = add(_io_out_T_47, _io_out_T_49) @[ALU.scala 65:82]
                                node _io_out_T_51 = tail(_io_out_T_50, 1) @[ALU.scala 65:82]
                                node _io_out_T_52 = bits(io.src1, 8, 8) @[ALU.scala 66:28]
                                node _io_out_T_53 = cat(UInt<6>("h0"), _io_out_T_52) @[ALU.scala 66:18]
                                node _io_out_T_54 = add(_io_out_T_51, _io_out_T_53) @[ALU.scala 65:107]
                                node _io_out_T_55 = tail(_io_out_T_54, 1) @[ALU.scala 65:107]
                                node _io_out_T_56 = bits(io.src1, 9, 9) @[ALU.scala 66:53]
                                node _io_out_T_57 = cat(UInt<6>("h0"), _io_out_T_56) @[ALU.scala 66:43]
                                node _io_out_T_58 = add(_io_out_T_55, _io_out_T_57) @[ALU.scala 66:32]
                                node _io_out_T_59 = tail(_io_out_T_58, 1) @[ALU.scala 66:32]
                                node _io_out_T_60 = bits(io.src1, 10, 10) @[ALU.scala 66:78]
                                node _io_out_T_61 = cat(UInt<6>("h0"), _io_out_T_60) @[ALU.scala 66:68]
                                node _io_out_T_62 = add(_io_out_T_59, _io_out_T_61) @[ALU.scala 66:57]
                                node _io_out_T_63 = tail(_io_out_T_62, 1) @[ALU.scala 66:57]
                                node _io_out_T_64 = bits(io.src1, 11, 11) @[ALU.scala 66:104]
                                node _io_out_T_65 = cat(UInt<6>("h0"), _io_out_T_64) @[ALU.scala 66:94]
                                node _io_out_T_66 = add(_io_out_T_63, _io_out_T_65) @[ALU.scala 66:83]
                                node _io_out_T_67 = tail(_io_out_T_66, 1) @[ALU.scala 66:83]
                                node _io_out_T_68 = bits(io.src1, 12, 12) @[ALU.scala 67:28]
                                node _io_out_T_69 = cat(UInt<6>("h0"), _io_out_T_68) @[ALU.scala 67:18]
                                node _io_out_T_70 = add(_io_out_T_67, _io_out_T_69) @[ALU.scala 66:109]
                                node _io_out_T_71 = tail(_io_out_T_70, 1) @[ALU.scala 66:109]
                                node _io_out_T_72 = bits(io.src1, 13, 13) @[ALU.scala 67:54]
                                node _io_out_T_73 = cat(UInt<6>("h0"), _io_out_T_72) @[ALU.scala 67:44]
                                node _io_out_T_74 = add(_io_out_T_71, _io_out_T_73) @[ALU.scala 67:33]
                                node _io_out_T_75 = tail(_io_out_T_74, 1) @[ALU.scala 67:33]
                                node _io_out_T_76 = bits(io.src1, 14, 14) @[ALU.scala 67:80]
                                node _io_out_T_77 = cat(UInt<6>("h0"), _io_out_T_76) @[ALU.scala 67:70]
                                node _io_out_T_78 = add(_io_out_T_75, _io_out_T_77) @[ALU.scala 67:59]
                                node _io_out_T_79 = tail(_io_out_T_78, 1) @[ALU.scala 67:59]
                                node _io_out_T_80 = bits(io.src1, 15, 15) @[ALU.scala 67:106]
                                node _io_out_T_81 = cat(UInt<6>("h0"), _io_out_T_80) @[ALU.scala 67:96]
                                node _io_out_T_82 = add(_io_out_T_79, _io_out_T_81) @[ALU.scala 67:85]
                                node _io_out_T_83 = tail(_io_out_T_82, 1) @[ALU.scala 67:85]
                                node _io_out_T_84 = bits(io.src1, 16, 16) @[ALU.scala 68:28]
                                node _io_out_T_85 = cat(UInt<6>("h0"), _io_out_T_84) @[ALU.scala 68:18]
                                node _io_out_T_86 = add(_io_out_T_83, _io_out_T_85) @[ALU.scala 67:111]
                                node _io_out_T_87 = tail(_io_out_T_86, 1) @[ALU.scala 67:111]
                                node _io_out_T_88 = bits(io.src1, 17, 17) @[ALU.scala 68:54]
                                node _io_out_T_89 = cat(UInt<6>("h0"), _io_out_T_88) @[ALU.scala 68:44]
                                node _io_out_T_90 = add(_io_out_T_87, _io_out_T_89) @[ALU.scala 68:33]
                                node _io_out_T_91 = tail(_io_out_T_90, 1) @[ALU.scala 68:33]
                                node _io_out_T_92 = bits(io.src1, 18, 18) @[ALU.scala 68:80]
                                node _io_out_T_93 = cat(UInt<6>("h0"), _io_out_T_92) @[ALU.scala 68:70]
                                node _io_out_T_94 = add(_io_out_T_91, _io_out_T_93) @[ALU.scala 68:59]
                                node _io_out_T_95 = tail(_io_out_T_94, 1) @[ALU.scala 68:59]
                                node _io_out_T_96 = bits(io.src1, 19, 19) @[ALU.scala 68:106]
                                node _io_out_T_97 = cat(UInt<6>("h0"), _io_out_T_96) @[ALU.scala 68:96]
                                node _io_out_T_98 = add(_io_out_T_95, _io_out_T_97) @[ALU.scala 68:85]
                                node _io_out_T_99 = tail(_io_out_T_98, 1) @[ALU.scala 68:85]
                                node _io_out_T_100 = bits(io.src1, 20, 20) @[ALU.scala 69:28]
                                node _io_out_T_101 = cat(UInt<6>("h0"), _io_out_T_100) @[ALU.scala 69:18]
                                node _io_out_T_102 = add(_io_out_T_99, _io_out_T_101) @[ALU.scala 68:111]
                                node _io_out_T_103 = tail(_io_out_T_102, 1) @[ALU.scala 68:111]
                                node _io_out_T_104 = bits(io.src1, 21, 21) @[ALU.scala 69:54]
                                node _io_out_T_105 = cat(UInt<6>("h0"), _io_out_T_104) @[ALU.scala 69:44]
                                node _io_out_T_106 = add(_io_out_T_103, _io_out_T_105) @[ALU.scala 69:33]
                                node _io_out_T_107 = tail(_io_out_T_106, 1) @[ALU.scala 69:33]
                                node _io_out_T_108 = bits(io.src1, 22, 22) @[ALU.scala 69:80]
                                node _io_out_T_109 = cat(UInt<6>("h0"), _io_out_T_108) @[ALU.scala 69:70]
                                node _io_out_T_110 = add(_io_out_T_107, _io_out_T_109) @[ALU.scala 69:59]
                                node _io_out_T_111 = tail(_io_out_T_110, 1) @[ALU.scala 69:59]
                                node _io_out_T_112 = bits(io.src1, 23, 23) @[ALU.scala 69:106]
                                node _io_out_T_113 = cat(UInt<6>("h0"), _io_out_T_112) @[ALU.scala 69:96]
                                node _io_out_T_114 = add(_io_out_T_111, _io_out_T_113) @[ALU.scala 69:85]
                                node _io_out_T_115 = tail(_io_out_T_114, 1) @[ALU.scala 69:85]
                                node _io_out_T_116 = bits(io.src1, 24, 24) @[ALU.scala 70:28]
                                node _io_out_T_117 = cat(UInt<6>("h0"), _io_out_T_116) @[ALU.scala 70:18]
                                node _io_out_T_118 = add(_io_out_T_115, _io_out_T_117) @[ALU.scala 69:111]
                                node _io_out_T_119 = tail(_io_out_T_118, 1) @[ALU.scala 69:111]
                                node _io_out_T_120 = bits(io.src1, 25, 25) @[ALU.scala 70:54]
                                node _io_out_T_121 = cat(UInt<6>("h0"), _io_out_T_120) @[ALU.scala 70:44]
                                node _io_out_T_122 = add(_io_out_T_119, _io_out_T_121) @[ALU.scala 70:33]
                                node _io_out_T_123 = tail(_io_out_T_122, 1) @[ALU.scala 70:33]
                                node _io_out_T_124 = bits(io.src1, 26, 26) @[ALU.scala 70:80]
                                node _io_out_T_125 = cat(UInt<6>("h0"), _io_out_T_124) @[ALU.scala 70:70]
                                node _io_out_T_126 = add(_io_out_T_123, _io_out_T_125) @[ALU.scala 70:59]
                                node _io_out_T_127 = tail(_io_out_T_126, 1) @[ALU.scala 70:59]
                                node _io_out_T_128 = bits(io.src1, 27, 27) @[ALU.scala 70:106]
                                node _io_out_T_129 = cat(UInt<6>("h0"), _io_out_T_128) @[ALU.scala 70:96]
                                node _io_out_T_130 = add(_io_out_T_127, _io_out_T_129) @[ALU.scala 70:85]
                                node _io_out_T_131 = tail(_io_out_T_130, 1) @[ALU.scala 70:85]
                                node _io_out_T_132 = bits(io.src1, 28, 28) @[ALU.scala 71:28]
                                node _io_out_T_133 = cat(UInt<6>("h0"), _io_out_T_132) @[ALU.scala 71:18]
                                node _io_out_T_134 = add(_io_out_T_131, _io_out_T_133) @[ALU.scala 70:111]
                                node _io_out_T_135 = tail(_io_out_T_134, 1) @[ALU.scala 70:111]
                                node _io_out_T_136 = bits(io.src1, 29, 29) @[ALU.scala 71:54]
                                node _io_out_T_137 = cat(UInt<6>("h0"), _io_out_T_136) @[ALU.scala 71:44]
                                node _io_out_T_138 = add(_io_out_T_135, _io_out_T_137) @[ALU.scala 71:33]
                                node _io_out_T_139 = tail(_io_out_T_138, 1) @[ALU.scala 71:33]
                                node _io_out_T_140 = bits(io.src1, 30, 30) @[ALU.scala 71:80]
                                node _io_out_T_141 = cat(UInt<6>("h0"), _io_out_T_140) @[ALU.scala 71:70]
                                node _io_out_T_142 = add(_io_out_T_139, _io_out_T_141) @[ALU.scala 71:59]
                                node _io_out_T_143 = tail(_io_out_T_142, 1) @[ALU.scala 71:59]
                                node _io_out_T_144 = bits(io.src1, 31, 31) @[ALU.scala 71:106]
                                node _io_out_T_145 = cat(UInt<6>("h0"), _io_out_T_144) @[ALU.scala 71:96]
                                node _io_out_T_146 = add(_io_out_T_143, _io_out_T_145) @[ALU.scala 71:85]
                                node _io_out_T_147 = tail(_io_out_T_146, 1) @[ALU.scala 71:85]
                                io.out <= _io_out_T_147 @[ALU.scala 64:14]
                              else :
                                node _T_206 = eq(UInt<14>("h20ff"), io.ALUSel) @[ALU.scala 27:21]
                                when _T_206 : @[ALU.scala 27:21]
                                  node _io_out_T_148 = not(io.src2) @[ALU.scala 74:37]
                                  node _io_out_T_149 = and(io.src1, _io_out_T_148) @[ALU.scala 74:34]
                                  io.out <= _io_out_T_149 @[ALU.scala 74:23]
                                else :
                                  node _T_207 = eq(UInt<14>("h20fe"), io.ALUSel) @[ALU.scala 27:21]
                                  when _T_207 : @[ALU.scala 27:21]
                                    node _io_out_T_150 = not(io.src2) @[ALU.scala 75:36]
                                    node _io_out_T_151 = or(io.src1, _io_out_T_150) @[ALU.scala 75:33]
                                    io.out <= _io_out_T_151 @[ALU.scala 75:22]
                                  else :
                                    node _T_208 = eq(UInt<14>("h20fc"), io.ALUSel) @[ALU.scala 27:21]
                                    when _T_208 : @[ALU.scala 27:21]
                                      node _io_out_T_152 = xor(io.src1, io.src2) @[ALU.scala 76:36]
                                      node _io_out_T_153 = not(_io_out_T_152) @[ALU.scala 76:26]
                                      io.out <= _io_out_T_153 @[ALU.scala 76:23]
                                    else :
                                      node _T_209 = eq(UInt<11>("h5fc"), io.ALUSel) @[ALU.scala 27:21]
                                      when _T_209 : @[ALU.scala 27:21]
                                        node _io_out_T_154 = asSInt(io.src1) @[ALU.scala 77:37]
                                        node _io_out_T_155 = asSInt(io.src2) @[ALU.scala 77:54]
                                        node _io_out_T_156 = lt(_io_out_T_154, _io_out_T_155) @[ALU.scala 77:44]
                                        node _io_out_T_157 = mux(_io_out_T_156, io.src1, io.src2) @[ALU.scala 77:28]
                                        io.out <= _io_out_T_157 @[ALU.scala 77:22]
                                      else :
                                        node _T_210 = eq(UInt<11>("h5fd"), io.ALUSel) @[ALU.scala 27:21]
                                        when _T_210 : @[ALU.scala 27:21]
                                          node _io_out_T_158 = lt(io.src1, io.src2) @[ALU.scala 78:38]
                                          node _io_out_T_159 = mux(_io_out_T_158, io.src1, io.src2) @[ALU.scala 78:29]
                                          io.out <= _io_out_T_159 @[ALU.scala 78:23]
                                        else :
                                          node _T_211 = eq(UInt<11>("h5fe"), io.ALUSel) @[ALU.scala 27:21]
                                          when _T_211 : @[ALU.scala 27:21]
                                            node _io_out_T_160 = asSInt(io.src1) @[ALU.scala 79:37]
                                            node _io_out_T_161 = asSInt(io.src2) @[ALU.scala 79:54]
                                            node _io_out_T_162 = lt(_io_out_T_160, _io_out_T_161) @[ALU.scala 79:44]
                                            node _io_out_T_163 = mux(_io_out_T_162, io.src2, io.src1) @[ALU.scala 79:28]
                                            io.out <= _io_out_T_163 @[ALU.scala 79:22]
                                          else :
                                            node _T_212 = eq(UInt<11>("h5ff"), io.ALUSel) @[ALU.scala 27:21]
                                            when _T_212 : @[ALU.scala 27:21]
                                              node _io_out_T_164 = lt(io.src1, io.src2) @[ALU.scala 80:38]
                                              node _io_out_T_165 = mux(_io_out_T_164, io.src2, io.src1) @[ALU.scala 80:29]
                                              io.out <= _io_out_T_165 @[ALU.scala 80:23]
                                            else :
                                              node _T_213 = eq(UInt<14>("h3021"), io.ALUSel) @[ALU.scala 27:21]
                                              when _T_213 : @[ALU.scala 27:21]
                                                node _io_out_T_166 = bits(io.src1, 7, 7) @[ALU.scala 82:48]
                                                node _io_out_T_167 = bits(_io_out_T_166, 0, 0) @[Bitwise.scala 77:15]
                                                node _io_out_T_168 = mux(_io_out_T_167, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
                                                node _io_out_T_169 = bits(io.src1, 7, 0) @[ALU.scala 82:61]
                                                node _io_out_T_170 = cat(_io_out_T_168, _io_out_T_169) @[Cat.scala 33:92]
                                                io.out <= _io_out_T_170 @[ALU.scala 82:25]
                                              else :
                                                node _T_214 = eq(UInt<14>("h3029"), io.ALUSel) @[ALU.scala 27:21]
                                                when _T_214 : @[ALU.scala 27:21]
                                                  node _io_out_T_171 = bits(io.src1, 15, 15) @[ALU.scala 83:48]
                                                  node _io_out_T_172 = bits(_io_out_T_171, 0, 0) @[Bitwise.scala 77:15]
                                                  node _io_out_T_173 = mux(_io_out_T_172, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
                                                  node _io_out_T_174 = bits(io.src1, 15, 0) @[ALU.scala 83:62]
                                                  node _io_out_T_175 = cat(_io_out_T_173, _io_out_T_174) @[Cat.scala 33:92]
                                                  io.out <= _io_out_T_175 @[ALU.scala 83:25]
                                                else :
                                                  node _T_215 = eq(UInt<14>("h24f9"), io.ALUSel) @[ALU.scala 27:21]
                                                  when _T_215 : @[ALU.scala 27:21]
                                                    node _io_out_T_176 = bits(io.src2, 4, 0) @[ALU.scala 85:58]
                                                    node _io_out_T_177 = dshl(UInt<32>("h1"), _io_out_T_176) @[ALU.scala 85:48]
                                                    node _io_out_T_178 = not(_io_out_T_177) @[ALU.scala 85:36]
                                                    node _io_out_T_179 = and(io.src1, _io_out_T_178) @[ALU.scala 85:34]
                                                    io.out <= _io_out_T_179 @[ALU.scala 85:23]
                                                  else :
                                                    node _T_216 = eq(UInt<13>("h14f9"), io.ALUSel) @[ALU.scala 27:21]
                                                    when _T_216 : @[ALU.scala 27:21]
                                                      node _io_out_T_180 = bits(io.src2, 4, 0) @[ALU.scala 86:57]
                                                      node _io_out_T_181 = dshl(UInt<32>("h1"), _io_out_T_180) @[ALU.scala 86:47]
                                                      node _io_out_T_182 = or(io.src1, _io_out_T_181) @[ALU.scala 86:34]
                                                      io.out <= _io_out_T_182 @[ALU.scala 86:23]
                                                    else :
                                                      node _T_217 = eq(UInt<14>("h34f9"), io.ALUSel) @[ALU.scala 27:21]
                                                      when _T_217 : @[ALU.scala 27:21]
                                                        node _io_out_T_183 = bits(io.src2, 4, 0) @[ALU.scala 87:57]
                                                        node _io_out_T_184 = dshl(UInt<32>("h1"), _io_out_T_183) @[ALU.scala 87:47]
                                                        node _io_out_T_185 = xor(io.src1, _io_out_T_184) @[ALU.scala 87:34]
                                                        io.out <= _io_out_T_185 @[ALU.scala 87:23]
                                                      else :
                                                        node _T_218 = eq(UInt<14>("h24fd"), io.ALUSel) @[ALU.scala 27:21]
                                                        when _T_218 : @[ALU.scala 27:21]
                                                          node _io_out_T_186 = bits(io.src2, 4, 0) @[ALU.scala 88:45]
                                                          node _io_out_T_187 = dshr(io.src1, _io_out_T_186) @[ALU.scala 88:35]
                                                          node _io_out_T_188 = and(_io_out_T_187, UInt<1>("h1")) @[ALU.scala 88:53]
                                                          io.out <= _io_out_T_188 @[ALU.scala 88:23]
                                                        else :
                                                          node _T_219 = eq(UInt<14>("h30f9"), io.ALUSel) @[ALU.scala 27:21]
                                                          when _T_219 : @[ALU.scala 27:21]
                                                            node _io_out_T_189 = bits(io.src2, 4, 0) @[ALU.scala 90:44]
                                                            node _io_out_T_190 = dshl(io.src1, _io_out_T_189) @[ALU.scala 90:34]
                                                            node _io_out_T_191 = bits(io.src2, 4, 0) @[ALU.scala 90:98]
                                                            node _io_out_T_192 = cat(UInt<1>("h0"), _io_out_T_191) @[ALU.scala 90:88]
                                                            node _io_out_T_193 = sub(UInt<6>("h20"), _io_out_T_192) @[ALU.scala 90:77]
                                                            node _io_out_T_194 = tail(_io_out_T_193, 1) @[ALU.scala 90:77]
                                                            node _io_out_T_195 = dshr(io.src1, _io_out_T_194) @[ALU.scala 90:63]
                                                            node _io_out_T_196 = or(_io_out_T_190, _io_out_T_195) @[ALU.scala 90:52]
                                                            io.out <= _io_out_T_196 @[ALU.scala 90:22]
                                                          else :
                                                            node _T_220 = eq(UInt<14>("h30fd"), io.ALUSel) @[ALU.scala 27:21]
                                                            when _T_220 : @[ALU.scala 27:21]
                                                              node _io_out_T_197 = bits(io.src2, 4, 0) @[ALU.scala 91:44]
                                                              node _io_out_T_198 = dshr(io.src1, _io_out_T_197) @[ALU.scala 91:34]
                                                              node _io_out_T_199 = bits(io.src2, 4, 0) @[ALU.scala 91:98]
                                                              node _io_out_T_200 = cat(UInt<1>("h0"), _io_out_T_199) @[ALU.scala 91:88]
                                                              node _io_out_T_201 = sub(UInt<6>("h20"), _io_out_T_200) @[ALU.scala 91:77]
                                                              node _io_out_T_202 = tail(_io_out_T_201, 1) @[ALU.scala 91:77]
                                                              node _io_out_T_203 = dshl(io.src1, _io_out_T_202) @[ALU.scala 91:63]
                                                              node _io_out_T_204 = or(_io_out_T_198, _io_out_T_203) @[ALU.scala 91:52]
                                                              io.out <= _io_out_T_204 @[ALU.scala 91:22]
                                                            else :
                                                              node _T_221 = eq(UInt<13>("h10fa"), io.ALUSel) @[ALU.scala 27:21]
                                                              when _T_221 : @[ALU.scala 27:21]
                                                                node _io_out_T_205 = dshl(io.src1, UInt<1>("h1")) @[ALU.scala 93:47]
                                                                node _io_out_T_206 = add(io.src2, _io_out_T_205) @[ALU.scala 93:36]
                                                                node _io_out_T_207 = tail(_io_out_T_206, 1) @[ALU.scala 93:36]
                                                                io.out <= _io_out_T_207 @[ALU.scala 93:25]
                                                              else :
                                                                node _T_222 = eq(UInt<13>("h10fc"), io.ALUSel) @[ALU.scala 27:21]
                                                                when _T_222 : @[ALU.scala 27:21]
                                                                  node _io_out_T_208 = dshl(io.src1, UInt<2>("h2")) @[ALU.scala 94:47]
                                                                  node _io_out_T_209 = add(io.src2, _io_out_T_208) @[ALU.scala 94:36]
                                                                  node _io_out_T_210 = tail(_io_out_T_209, 1) @[ALU.scala 94:36]
                                                                  io.out <= _io_out_T_210 @[ALU.scala 94:25]
                                                                else :
                                                                  node _T_223 = eq(UInt<13>("h10fe"), io.ALUSel) @[ALU.scala 27:21]
                                                                  when _T_223 : @[ALU.scala 27:21]
                                                                    node _io_out_T_211 = dshl(io.src1, UInt<2>("h3")) @[ALU.scala 95:47]
                                                                    node _io_out_T_212 = add(io.src2, _io_out_T_211) @[ALU.scala 95:36]
                                                                    node _io_out_T_213 = tail(_io_out_T_212, 1) @[ALU.scala 95:36]
                                                                    io.out <= _io_out_T_213 @[ALU.scala 95:25]
                                                                  else :
                                                                    node _T_224 = eq(UInt<14>("h34c5"), io.ALUSel) @[ALU.scala 27:21]
                                                                    when _T_224 : @[ALU.scala 27:21]
                                                                      node _io_out_T_214 = bits(io.src1, 7, 0) @[ALU.scala 97:37]
                                                                      node _io_out_T_215 = bits(io.src1, 15, 8) @[ALU.scala 97:52]
                                                                      node _io_out_T_216 = bits(io.src1, 23, 16) @[ALU.scala 97:68]
                                                                      node _io_out_T_217 = bits(io.src1, 31, 24) @[ALU.scala 97:85]
                                                                      node io_out_lo = cat(_io_out_T_216, _io_out_T_217) @[Cat.scala 33:92]
                                                                      node io_out_hi = cat(_io_out_T_214, _io_out_T_215) @[Cat.scala 33:92]
                                                                      node _io_out_T_218 = cat(io_out_hi, io_out_lo) @[Cat.scala 33:92]
                                                                      io.out <= _io_out_T_218 @[ALU.scala 97:23]
                                                                    else :
                                                                      node _T_225 = eq(UInt<11>("h404"), io.ALUSel) @[ALU.scala 27:21]
                                                                      when _T_225 : @[ALU.scala 27:21]
                                                                        node _io_out_T_219 = bits(io.src1, 15, 0) @[ALU.scala 99:50]
                                                                        node _io_out_T_220 = cat(UInt<16>("h0"), _io_out_T_219) @[Cat.scala 33:92]
                                                                        io.out <= _io_out_T_220 @[ALU.scala 99:25]
                                                                      else :
                                                                        node _T_226 = eq(UInt<13>("h143d"), io.ALUSel) @[ALU.scala 27:21]
                                                                        when _T_226 : @[ALU.scala 27:21]
                                                                          node _io_out_T_221 = bits(io.src1, 31, 24) @[ALU.scala 103:20]
                                                                          node _io_out_T_222 = eq(_io_out_T_221, UInt<1>("h0")) @[ALU.scala 103:29]
                                                                          node _io_out_T_223 = mux(_io_out_T_222, UInt<1>("h0"), UInt<8>("hff")) @[ALU.scala 103:12]
                                                                          node _io_out_T_224 = bits(io.src1, 23, 16) @[ALU.scala 104:20]
                                                                          node _io_out_T_225 = eq(_io_out_T_224, UInt<1>("h0")) @[ALU.scala 104:29]
                                                                          node _io_out_T_226 = mux(_io_out_T_225, UInt<1>("h0"), UInt<8>("hff")) @[ALU.scala 104:12]
                                                                          node _io_out_T_227 = bits(io.src1, 15, 8) @[ALU.scala 105:20]
                                                                          node _io_out_T_228 = eq(_io_out_T_227, UInt<1>("h0")) @[ALU.scala 105:28]
                                                                          node _io_out_T_229 = mux(_io_out_T_228, UInt<1>("h0"), UInt<8>("hff")) @[ALU.scala 105:12]
                                                                          node _io_out_T_230 = bits(io.src1, 7, 0) @[ALU.scala 106:20]
                                                                          node _io_out_T_231 = eq(_io_out_T_230, UInt<1>("h0")) @[ALU.scala 106:27]
                                                                          node _io_out_T_232 = mux(_io_out_T_231, UInt<1>("h0"), UInt<8>("hff")) @[ALU.scala 106:12]
                                                                          node io_out_lo_1 = cat(_io_out_T_229, _io_out_T_232) @[Cat.scala 33:92]
                                                                          node io_out_hi_1 = cat(_io_out_T_223, _io_out_T_226) @[Cat.scala 33:92]
                                                                          node _io_out_T_233 = cat(io_out_hi_1, io_out_lo_1) @[Cat.scala 33:92]
                                                                          io.out <= _io_out_T_233 @[ALU.scala 102:14]

  module BranchComp :
    input clock : Clock
    input reset : Reset
    output io : { flip BrUn : UInt<1>, flip src1 : UInt<32>, flip src2 : UInt<32>, BrEq : UInt<1>, BrLT : UInt<1>}

    wire eq : UInt<1>
    eq <= UInt<1>("h0")
    wire lt : UInt<1>
    lt <= UInt<1>("h0")
    when io.BrUn : @[BranchComp.scala 19:17]
      node _T = lt(io.src1, io.src2) @[BranchComp.scala 20:18]
      when _T : @[BranchComp.scala 20:29]
        lt <= UInt<1>("h1") @[BranchComp.scala 20:34]
    else :
      node _T_1 = asSInt(io.src1) @[BranchComp.scala 22:18]
      node _T_2 = asSInt(io.src2) @[BranchComp.scala 22:35]
      node _T_3 = lt(_T_1, _T_2) @[BranchComp.scala 22:25]
      when _T_3 : @[BranchComp.scala 22:43]
        lt <= UInt<1>("h1") @[BranchComp.scala 22:48]
    node _eq_T = eq(io.src1, io.src2) @[BranchComp.scala 25:21]
    node _eq_T_1 = mux(_eq_T, UInt<1>("h1"), UInt<1>("h0")) @[BranchComp.scala 25:12]
    eq <= _eq_T_1 @[BranchComp.scala 25:6]
    io.BrEq <= eq @[BranchComp.scala 27:11]
    io.BrLT <= lt @[BranchComp.scala 28:11]

  module SingleCycleCPU :
    input clock : Clock
    input reset : Reset
    output io : { master : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, pc : UInt<15>, regs : UInt<32>[32], Hcf : UInt<1>}

    inst im of InstMem @[SigleCycleCPU.scala 26:19]
    im.clock <= clock
    im.reset <= reset
    inst ct of Controller @[SigleCycleCPU.scala 27:19]
    ct.clock <= clock
    ct.reset <= reset
    inst pc of PC @[SigleCycleCPU.scala 28:19]
    pc.clock <= clock
    pc.reset <= reset
    inst ig of ImmGen @[SigleCycleCPU.scala 29:19]
    ig.clock <= clock
    ig.reset <= reset
    inst rf of RegFile @[SigleCycleCPU.scala 30:19]
    rf.clock <= clock
    rf.reset <= reset
    inst alu of ALU @[SigleCycleCPU.scala 31:19]
    alu.clock <= clock
    alu.reset <= reset
    inst bc of BranchComp @[SigleCycleCPU.scala 32:19]
    bc.clock <= clock
    bc.reset <= reset
    wire opcode : UInt<7> @[SigleCycleCPU.scala 36:22]
    wire rd : UInt<5> @[SigleCycleCPU.scala 37:22]
    wire rs1 : UInt<5> @[SigleCycleCPU.scala 38:22]
    wire rs2 : UInt<5> @[SigleCycleCPU.scala 39:22]
    wire funct3 : UInt<3> @[SigleCycleCPU.scala 40:22]
    wire inst_31_7 : UInt<25> @[SigleCycleCPU.scala 41:22]
    node _opcode_T = bits(im.io.inst, 6, 0) @[SigleCycleCPU.scala 43:26]
    opcode <= _opcode_T @[SigleCycleCPU.scala 43:13]
    node _rd_T = bits(im.io.inst, 11, 7) @[SigleCycleCPU.scala 44:26]
    rd <= _rd_T @[SigleCycleCPU.scala 44:13]
    node _rs1_T = bits(im.io.inst, 19, 15) @[SigleCycleCPU.scala 45:26]
    rs1 <= _rs1_T @[SigleCycleCPU.scala 45:13]
    node _rs2_T = bits(im.io.inst, 24, 20) @[SigleCycleCPU.scala 46:26]
    rs2 <= _rs2_T @[SigleCycleCPU.scala 46:13]
    node _funct3_T = bits(im.io.inst, 14, 12) @[SigleCycleCPU.scala 47:26]
    funct3 <= _funct3_T @[SigleCycleCPU.scala 47:13]
    node _inst_31_7_T = bits(im.io.inst, 31, 7) @[SigleCycleCPU.scala 48:26]
    inst_31_7 <= _inst_31_7_T @[SigleCycleCPU.scala 48:13]
    pc.io.PCSel <= ct.io.PCSel @[SigleCycleCPU.scala 51:17]
    pc.io.alu_out <= alu.io.out @[SigleCycleCPU.scala 52:17]
    pc.io.Hcf <= ct.io.Hcf @[SigleCycleCPU.scala 53:17]
    im.io.raddr <= pc.io.pc @[SigleCycleCPU.scala 56:14]
    ig.io.ImmSel <= ct.io.ImmSel @[SigleCycleCPU.scala 59:18]
    ig.io.inst_31_7 <= inst_31_7 @[SigleCycleCPU.scala 60:18]
    rf.io.raddr[0] <= rs1 @[SigleCycleCPU.scala 63:18]
    rf.io.raddr[1] <= rs2 @[SigleCycleCPU.scala 64:18]
    rf.io.wen <= ct.io.RegWEn @[SigleCycleCPU.scala 65:18]
    rf.io.waddr <= rd @[SigleCycleCPU.scala 66:18]
    node _rf_io_wdata_T = bits(io.master.r.bits.data, 31, 0) @[SigleCycleCPU.scala 73:30]
    node _rf_io_wdata_T_1 = bits(io.master.r.bits.data, 7, 7) @[SigleCycleCPU.scala 75:62]
    node _rf_io_wdata_T_2 = bits(_rf_io_wdata_T_1, 0, 0) @[Bitwise.scala 77:15]
    node _rf_io_wdata_T_3 = mux(_rf_io_wdata_T_2, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 77:12]
    node _rf_io_wdata_T_4 = bits(io.master.r.bits.data, 7, 0) @[SigleCycleCPU.scala 75:89]
    node _rf_io_wdata_T_5 = cat(_rf_io_wdata_T_3, _rf_io_wdata_T_4) @[Cat.scala 33:92]
    node _rf_io_wdata_T_6 = bits(io.master.r.bits.data, 15, 15) @[SigleCycleCPU.scala 76:62]
    node _rf_io_wdata_T_7 = bits(_rf_io_wdata_T_6, 0, 0) @[Bitwise.scala 77:15]
    node _rf_io_wdata_T_8 = mux(_rf_io_wdata_T_7, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 77:12]
    node _rf_io_wdata_T_9 = bits(io.master.r.bits.data, 15, 0) @[SigleCycleCPU.scala 76:90]
    node _rf_io_wdata_T_10 = cat(_rf_io_wdata_T_8, _rf_io_wdata_T_9) @[Cat.scala 33:92]
    node _rf_io_wdata_T_11 = bits(io.master.r.bits.data, 31, 0) @[SigleCycleCPU.scala 77:49]
    node _rf_io_wdata_T_12 = bits(io.master.r.bits.data, 7, 0) @[SigleCycleCPU.scala 78:64]
    node _rf_io_wdata_T_13 = cat(UInt<24>("h0"), _rf_io_wdata_T_12) @[Cat.scala 33:92]
    node _rf_io_wdata_T_14 = bits(io.master.r.bits.data, 15, 0) @[SigleCycleCPU.scala 79:64]
    node _rf_io_wdata_T_15 = cat(UInt<16>("h0"), _rf_io_wdata_T_14) @[Cat.scala 33:92]
    node _rf_io_wdata_T_16 = eq(UInt<3>("h0"), funct3) @[Mux.scala 81:61]
    node _rf_io_wdata_T_17 = mux(_rf_io_wdata_T_16, _rf_io_wdata_T_5, _rf_io_wdata_T) @[Mux.scala 81:58]
    node _rf_io_wdata_T_18 = eq(UInt<3>("h1"), funct3) @[Mux.scala 81:61]
    node _rf_io_wdata_T_19 = mux(_rf_io_wdata_T_18, _rf_io_wdata_T_10, _rf_io_wdata_T_17) @[Mux.scala 81:58]
    node _rf_io_wdata_T_20 = eq(UInt<3>("h2"), funct3) @[Mux.scala 81:61]
    node _rf_io_wdata_T_21 = mux(_rf_io_wdata_T_20, _rf_io_wdata_T_11, _rf_io_wdata_T_19) @[Mux.scala 81:58]
    node _rf_io_wdata_T_22 = eq(UInt<3>("h4"), funct3) @[Mux.scala 81:61]
    node _rf_io_wdata_T_23 = mux(_rf_io_wdata_T_22, _rf_io_wdata_T_13, _rf_io_wdata_T_21) @[Mux.scala 81:58]
    node _rf_io_wdata_T_24 = eq(UInt<3>("h5"), funct3) @[Mux.scala 81:61]
    node _rf_io_wdata_T_25 = mux(_rf_io_wdata_T_24, _rf_io_wdata_T_15, _rf_io_wdata_T_23) @[Mux.scala 81:58]
    node _rf_io_wdata_T_26 = add(pc.io.pc, UInt<3>("h4")) @[SigleCycleCPU.scala 83:24]
    node _rf_io_wdata_T_27 = tail(_rf_io_wdata_T_26, 1) @[SigleCycleCPU.scala 83:24]
    node _rf_io_wdata_T_28 = eq(UInt<1>("h0"), ct.io.WBSel) @[Mux.scala 81:61]
    node _rf_io_wdata_T_29 = mux(_rf_io_wdata_T_28, _rf_io_wdata_T_25, UInt<1>("h0")) @[Mux.scala 81:58]
    node _rf_io_wdata_T_30 = eq(UInt<1>("h1"), ct.io.WBSel) @[Mux.scala 81:61]
    node _rf_io_wdata_T_31 = mux(_rf_io_wdata_T_30, alu.io.out, _rf_io_wdata_T_29) @[Mux.scala 81:58]
    node _rf_io_wdata_T_32 = eq(UInt<2>("h2"), ct.io.WBSel) @[Mux.scala 81:61]
    node _rf_io_wdata_T_33 = mux(_rf_io_wdata_T_32, _rf_io_wdata_T_27, _rf_io_wdata_T_31) @[Mux.scala 81:58]
    rf.io.wdata <= _rf_io_wdata_T_33 @[SigleCycleCPU.scala 67:15]
    node rdata_or_zero = mux(ct.io.Lui, UInt<32>("h0"), rf.io.rdata[0]) @[SigleCycleCPU.scala 89:25]
    node _alu_io_src1_T = eq(UInt<1>("h1"), ct.io.ASel) @[Mux.scala 81:61]
    node _alu_io_src1_T_1 = mux(_alu_io_src1_T, pc.io.pc, rdata_or_zero) @[Mux.scala 81:58]
    alu.io.src1 <= _alu_io_src1_T_1 @[SigleCycleCPU.scala 90:14]
    node _alu_io_src2_T = eq(UInt<1>("h0"), ct.io.BSel) @[Mux.scala 81:61]
    node _alu_io_src2_T_1 = mux(_alu_io_src2_T, rf.io.rdata[1], UInt<1>("h0")) @[Mux.scala 81:58]
    node _alu_io_src2_T_2 = eq(UInt<1>("h1"), ct.io.BSel) @[Mux.scala 81:61]
    node _alu_io_src2_T_3 = mux(_alu_io_src2_T_2, ig.io.imm, _alu_io_src2_T_1) @[Mux.scala 81:58]
    alu.io.src2 <= _alu_io_src2_T_3 @[SigleCycleCPU.scala 98:14]
    alu.io.ALUSel <= ct.io.ALUSel @[SigleCycleCPU.scala 106:16]
    bc.io.BrUn <= ct.io.BrUn @[SigleCycleCPU.scala 110:13]
    bc.io.src1 <= rf.io.rdata[0] @[SigleCycleCPU.scala 111:13]
    bc.io.src2 <= rf.io.rdata[1] @[SigleCycleCPU.scala 112:13]
    ct.io.Inst <= im.io.inst @[SigleCycleCPU.scala 115:13]
    ct.io.BrEq <= bc.io.BrEq @[SigleCycleCPU.scala 116:13]
    ct.io.BrLT <= bc.io.BrLT @[SigleCycleCPU.scala 117:13]
    io.master.aw.bits <= ct.io.aw.bits @[SigleCycleCPU.scala 120:16]
    io.master.aw.valid <= ct.io.aw.valid @[SigleCycleCPU.scala 120:16]
    ct.io.aw.ready <= io.master.aw.ready @[SigleCycleCPU.scala 120:16]
    io.master.w.bits <= ct.io.w.bits @[SigleCycleCPU.scala 121:15]
    io.master.w.valid <= ct.io.w.valid @[SigleCycleCPU.scala 121:15]
    ct.io.w.ready <= io.master.w.ready @[SigleCycleCPU.scala 121:15]
    ct.io.b <= io.master.b @[SigleCycleCPU.scala 122:15]
    io.master.ar.bits <= ct.io.ar.bits @[SigleCycleCPU.scala 123:16]
    io.master.ar.valid <= ct.io.ar.valid @[SigleCycleCPU.scala 123:16]
    ct.io.ar.ready <= io.master.ar.ready @[SigleCycleCPU.scala 123:16]
    ct.io.r <= io.master.r @[SigleCycleCPU.scala 124:15]
    io.master.ar.bits.addr <= alu.io.out @[SigleCycleCPU.scala 126:27]
    io.master.aw.bits.addr <= alu.io.out @[SigleCycleCPU.scala 127:26]
    io.master.w.bits.data <= rf.io.rdata[1] @[SigleCycleCPU.scala 128:25]
    node _io_master_w_bits_strb_T = eq(UInt<3>("h0"), funct3) @[Mux.scala 81:61]
    node _io_master_w_bits_strb_T_1 = mux(_io_master_w_bits_strb_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_master_w_bits_strb_T_2 = eq(UInt<3>("h1"), funct3) @[Mux.scala 81:61]
    node _io_master_w_bits_strb_T_3 = mux(_io_master_w_bits_strb_T_2, UInt<2>("h3"), _io_master_w_bits_strb_T_1) @[Mux.scala 81:58]
    node _io_master_w_bits_strb_T_4 = eq(UInt<3>("h2"), funct3) @[Mux.scala 81:61]
    node _io_master_w_bits_strb_T_5 = mux(_io_master_w_bits_strb_T_4, UInt<4>("hf"), _io_master_w_bits_strb_T_3) @[Mux.scala 81:58]
    node _io_master_w_bits_strb_T_6 = eq(UInt<6>("h23"), opcode) @[Mux.scala 81:61]
    node _io_master_w_bits_strb_T_7 = mux(_io_master_w_bits_strb_T_6, _io_master_w_bits_strb_T_5, UInt<1>("h0")) @[Mux.scala 81:58]
    io.master.w.bits.strb <= _io_master_w_bits_strb_T_7 @[SigleCycleCPU.scala 129:25]
    io.pc <= pc.io.pc @[SigleCycleCPU.scala 144:17]
    io.regs <= rf.io.regs @[SigleCycleCPU.scala 145:17]
    io.Hcf <= ct.io.Hcf @[SigleCycleCPU.scala 146:17]

  module DataMem :
    input clock : Clock
    input reset : Reset
    output io : { slave : { flip aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}, flip ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}}

    reg stateReg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[DataMem.scala 21:27]
    cmem memory : UInt<8> [65536] @[DataMem.scala 23:21]
    reg write_addr_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DataMem.scala 25:33]
    reg write_addr_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[DataMem.scala 26:39]
    reg write_addr_reg_id : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[DataMem.scala 27:36]
    reg write_addr_reg_size : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[DataMem.scala 28:38]
    reg write_data_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DataMem.scala 30:33]
    reg write_data_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[DataMem.scala 31:39]
    reg write_data_reg_strb : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[DataMem.scala 32:38]
    reg write_data_reg_last : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[DataMem.scala 33:38]
    node _T = eq(UInt<2>("h0"), stateReg) @[DataMem.scala 39:22]
    when _T : @[DataMem.scala 39:22]
      when io.slave.ar.valid : @[DataMem.scala 41:37]
        stateReg <= UInt<2>("h1") @[DataMem.scala 42:26]
      else :
        node _T_1 = and(write_data_reg_valid, write_addr_reg_valid) @[DataMem.scala 43:45]
        when _T_1 : @[DataMem.scala 43:69]
          stateReg <= UInt<2>("h2") @[DataMem.scala 44:26]
        else :
          stateReg <= UInt<2>("h0") @[DataMem.scala 46:26]
    else :
      node _T_2 = eq(UInt<2>("h1"), stateReg) @[DataMem.scala 39:22]
      when _T_2 : @[DataMem.scala 39:22]
        node _stateReg_T = mux(io.slave.r.ready, UInt<2>("h0"), UInt<2>("h1")) @[DataMem.scala 50:28]
        stateReg <= _stateReg_T @[DataMem.scala 50:22]
      else :
        node _T_3 = eq(UInt<2>("h2"), stateReg) @[DataMem.scala 39:22]
        when _T_3 : @[DataMem.scala 39:22]
          node _stateReg_T_1 = mux(io.slave.b.ready, UInt<2>("h0"), UInt<2>("h2")) @[DataMem.scala 53:28]
          stateReg <= _stateReg_T_1 @[DataMem.scala 53:22]
    io.slave.ar.ready <= UInt<1>("h0") @[DataMem.scala 58:24]
    io.slave.r.valid <= UInt<1>("h0") @[DataMem.scala 59:23]
    io.slave.r.bits.last <= UInt<1>("h1") @[DataMem.scala 60:26]
    io.slave.r.bits.id <= UInt<1>("h0") @[DataMem.scala 61:24]
    io.slave.r.bits.resp <= UInt<1>("h0") @[DataMem.scala 62:26]
    io.slave.aw.ready <= UInt<1>("h0") @[DataMem.scala 64:23]
    io.slave.w.ready <= UInt<1>("h0") @[DataMem.scala 65:22]
    io.slave.b.valid <= UInt<1>("h0") @[DataMem.scala 66:22]
    io.slave.b.bits.resp <= UInt<1>("h0") @[DataMem.scala 67:26]
    io.slave.b.bits.id <= UInt<1>("h0") @[DataMem.scala 68:24]
    node _T_4 = and(io.slave.aw.ready, io.slave.aw.valid) @[Decoupled.scala 52:35]
    when _T_4 : @[DataMem.scala 70:28]
      write_addr_reg <= io.slave.aw.bits.addr @[DataMem.scala 71:24]
      write_addr_reg_valid <= UInt<1>("h1") @[DataMem.scala 72:30]
      write_addr_reg_id <= io.slave.aw.bits.id @[DataMem.scala 73:27]
      write_addr_reg_size <= io.slave.aw.bits.size @[DataMem.scala 74:29]
    node _T_5 = and(io.slave.w.ready, io.slave.w.valid) @[Decoupled.scala 52:35]
    when _T_5 : @[DataMem.scala 76:27]
      write_data_reg <= io.slave.w.bits.data @[DataMem.scala 77:24]
      write_data_reg_valid <= UInt<1>("h1") @[DataMem.scala 78:30]
      write_data_reg_strb <= io.slave.w.bits.strb @[DataMem.scala 79:29]
      write_data_reg_last <= io.slave.w.bits.last @[DataMem.scala 80:29]
    node _T_6 = eq(UInt<2>("h0"), stateReg) @[DataMem.scala 83:22]
    when _T_6 : @[DataMem.scala 83:22]
      io.slave.ar.ready <= UInt<1>("h1") @[DataMem.scala 86:32]
      io.slave.aw.ready <= UInt<1>("h1") @[DataMem.scala 87:31]
      io.slave.w.ready <= UInt<1>("h1") @[DataMem.scala 88:30]
    else :
      node _T_7 = eq(UInt<2>("h1"), stateReg) @[DataMem.scala 83:22]
      when _T_7 : @[DataMem.scala 83:22]
        io.slave.r.valid <= UInt<1>("h1") @[DataMem.scala 92:30]
      else :
        node _T_8 = eq(UInt<2>("h2"), stateReg) @[DataMem.scala 83:22]
        when _T_8 : @[DataMem.scala 83:22]
          io.slave.b.valid <= UInt<1>("h1") @[DataMem.scala 96:30]
          write_addr_reg_valid <= UInt<1>("h0") @[DataMem.scala 97:34]
          write_data_reg_valid <= UInt<1>("h0") @[DataMem.scala 98:34]
    reg addrReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DataMem.scala 103:26]
    node _T_9 = eq(stateReg, UInt<2>("h0")) @[DataMem.scala 105:19]
    when _T_9 : @[DataMem.scala 105:30]
      node _addrReg_T = sub(io.slave.ar.bits.addr, UInt<16>("h8000")) @[DataMem.scala 106:65]
      node _addrReg_T_1 = tail(_addrReg_T, 1) @[DataMem.scala 106:65]
      node _addrReg_T_2 = mux(io.slave.ar.valid, _addrReg_T_1, addrReg) @[DataMem.scala 106:23]
      addrReg <= _addrReg_T_2 @[DataMem.scala 106:17]
      node _T_10 = and(write_data_reg_valid, write_addr_reg_valid) @[DataMem.scala 107:35]
      when _T_10 : @[DataMem.scala 107:59]
        node _T_11 = sub(write_addr_reg, UInt<16>("h8000")) @[DataMem.scala 109:40]
        node _T_12 = tail(_T_11, 1) @[DataMem.scala 109:40]
        node _T_13 = add(_T_12, UInt<1>("h0")) @[DataMem.scala 109:53]
        node _T_14 = tail(_T_13, 1) @[DataMem.scala 109:53]
        node _T_15 = bits(_T_14, 15, 0) @[DataMem.scala 109:23]
        infer mport MPORT = memory[_T_15], clock @[DataMem.scala 109:23]
        node _T_16 = bits(write_data_reg_strb, 0, 0) @[DataMem.scala 110:41]
        node _T_17 = eq(_T_16, UInt<1>("h1")) @[DataMem.scala 110:45]
        node _T_18 = bits(write_data_reg, 7, 0) @[DataMem.scala 111:35]
        node _T_19 = sub(write_addr_reg, UInt<16>("h8000")) @[DataMem.scala 112:44]
        node _T_20 = tail(_T_19, 1) @[DataMem.scala 112:44]
        node _T_21 = add(_T_20, UInt<1>("h0")) @[DataMem.scala 112:57]
        node _T_22 = tail(_T_21, 1) @[DataMem.scala 112:57]
        node _T_23 = bits(_T_22, 15, 0) @[DataMem.scala 112:27]
        infer mport MPORT_1 = memory[_T_23], clock @[DataMem.scala 112:27]
        node _T_24 = mux(_T_17, _T_18, MPORT_1) @[DataMem.scala 109:66]
        MPORT <= _T_24 @[DataMem.scala 109:60]
        node _T_25 = sub(write_addr_reg, UInt<16>("h8000")) @[DataMem.scala 109:40]
        node _T_26 = tail(_T_25, 1) @[DataMem.scala 109:40]
        node _T_27 = add(_T_26, UInt<1>("h1")) @[DataMem.scala 109:53]
        node _T_28 = tail(_T_27, 1) @[DataMem.scala 109:53]
        node _T_29 = bits(_T_28, 15, 0) @[DataMem.scala 109:23]
        infer mport MPORT_2 = memory[_T_29], clock @[DataMem.scala 109:23]
        node _T_30 = bits(write_data_reg_strb, 1, 1) @[DataMem.scala 110:41]
        node _T_31 = eq(_T_30, UInt<1>("h1")) @[DataMem.scala 110:45]
        node _T_32 = bits(write_data_reg, 15, 8) @[DataMem.scala 111:35]
        node _T_33 = sub(write_addr_reg, UInt<16>("h8000")) @[DataMem.scala 112:44]
        node _T_34 = tail(_T_33, 1) @[DataMem.scala 112:44]
        node _T_35 = add(_T_34, UInt<1>("h1")) @[DataMem.scala 112:57]
        node _T_36 = tail(_T_35, 1) @[DataMem.scala 112:57]
        node _T_37 = bits(_T_36, 15, 0) @[DataMem.scala 112:27]
        infer mport MPORT_3 = memory[_T_37], clock @[DataMem.scala 112:27]
        node _T_38 = mux(_T_31, _T_32, MPORT_3) @[DataMem.scala 109:66]
        MPORT_2 <= _T_38 @[DataMem.scala 109:60]
        node _T_39 = sub(write_addr_reg, UInt<16>("h8000")) @[DataMem.scala 109:40]
        node _T_40 = tail(_T_39, 1) @[DataMem.scala 109:40]
        node _T_41 = add(_T_40, UInt<2>("h2")) @[DataMem.scala 109:53]
        node _T_42 = tail(_T_41, 1) @[DataMem.scala 109:53]
        node _T_43 = bits(_T_42, 15, 0) @[DataMem.scala 109:23]
        infer mport MPORT_4 = memory[_T_43], clock @[DataMem.scala 109:23]
        node _T_44 = bits(write_data_reg_strb, 2, 2) @[DataMem.scala 110:41]
        node _T_45 = eq(_T_44, UInt<1>("h1")) @[DataMem.scala 110:45]
        node _T_46 = bits(write_data_reg, 23, 16) @[DataMem.scala 111:35]
        node _T_47 = sub(write_addr_reg, UInt<16>("h8000")) @[DataMem.scala 112:44]
        node _T_48 = tail(_T_47, 1) @[DataMem.scala 112:44]
        node _T_49 = add(_T_48, UInt<2>("h2")) @[DataMem.scala 112:57]
        node _T_50 = tail(_T_49, 1) @[DataMem.scala 112:57]
        node _T_51 = bits(_T_50, 15, 0) @[DataMem.scala 112:27]
        infer mport MPORT_5 = memory[_T_51], clock @[DataMem.scala 112:27]
        node _T_52 = mux(_T_45, _T_46, MPORT_5) @[DataMem.scala 109:66]
        MPORT_4 <= _T_52 @[DataMem.scala 109:60]
        node _T_53 = sub(write_addr_reg, UInt<16>("h8000")) @[DataMem.scala 109:40]
        node _T_54 = tail(_T_53, 1) @[DataMem.scala 109:40]
        node _T_55 = add(_T_54, UInt<2>("h3")) @[DataMem.scala 109:53]
        node _T_56 = tail(_T_55, 1) @[DataMem.scala 109:53]
        node _T_57 = bits(_T_56, 15, 0) @[DataMem.scala 109:23]
        infer mport MPORT_6 = memory[_T_57], clock @[DataMem.scala 109:23]
        node _T_58 = bits(write_data_reg_strb, 3, 3) @[DataMem.scala 110:41]
        node _T_59 = eq(_T_58, UInt<1>("h1")) @[DataMem.scala 110:45]
        node _T_60 = bits(write_data_reg, 31, 24) @[DataMem.scala 111:35]
        node _T_61 = sub(write_addr_reg, UInt<16>("h8000")) @[DataMem.scala 112:44]
        node _T_62 = tail(_T_61, 1) @[DataMem.scala 112:44]
        node _T_63 = add(_T_62, UInt<2>("h3")) @[DataMem.scala 112:57]
        node _T_64 = tail(_T_63, 1) @[DataMem.scala 112:57]
        node _T_65 = bits(_T_64, 15, 0) @[DataMem.scala 112:27]
        infer mport MPORT_7 = memory[_T_65], clock @[DataMem.scala 112:27]
        node _T_66 = mux(_T_59, _T_60, MPORT_7) @[DataMem.scala 109:66]
        MPORT_6 <= _T_66 @[DataMem.scala 109:60]
    else :
      addrReg <= addrReg @[DataMem.scala 117:17]
    node _io_slave_r_bits_data_T = add(addrReg, UInt<3>("h7")) @[DataMem.scala 121:24]
    node _io_slave_r_bits_data_T_1 = tail(_io_slave_r_bits_data_T, 1) @[DataMem.scala 121:24]
    node _io_slave_r_bits_data_T_2 = bits(_io_slave_r_bits_data_T_1, 15, 0) @[DataMem.scala 121:15]
    infer mport io_slave_r_bits_data_MPORT = memory[_io_slave_r_bits_data_T_2], clock @[DataMem.scala 121:15]
    node _io_slave_r_bits_data_T_3 = add(addrReg, UInt<3>("h6")) @[DataMem.scala 122:24]
    node _io_slave_r_bits_data_T_4 = tail(_io_slave_r_bits_data_T_3, 1) @[DataMem.scala 122:24]
    node _io_slave_r_bits_data_T_5 = bits(_io_slave_r_bits_data_T_4, 15, 0) @[DataMem.scala 122:15]
    infer mport io_slave_r_bits_data_MPORT_1 = memory[_io_slave_r_bits_data_T_5], clock @[DataMem.scala 122:15]
    node _io_slave_r_bits_data_T_6 = add(addrReg, UInt<3>("h5")) @[DataMem.scala 123:24]
    node _io_slave_r_bits_data_T_7 = tail(_io_slave_r_bits_data_T_6, 1) @[DataMem.scala 123:24]
    node _io_slave_r_bits_data_T_8 = bits(_io_slave_r_bits_data_T_7, 15, 0) @[DataMem.scala 123:15]
    infer mport io_slave_r_bits_data_MPORT_2 = memory[_io_slave_r_bits_data_T_8], clock @[DataMem.scala 123:15]
    node _io_slave_r_bits_data_T_9 = add(addrReg, UInt<3>("h4")) @[DataMem.scala 124:24]
    node _io_slave_r_bits_data_T_10 = tail(_io_slave_r_bits_data_T_9, 1) @[DataMem.scala 124:24]
    node _io_slave_r_bits_data_T_11 = bits(_io_slave_r_bits_data_T_10, 15, 0) @[DataMem.scala 124:15]
    infer mport io_slave_r_bits_data_MPORT_3 = memory[_io_slave_r_bits_data_T_11], clock @[DataMem.scala 124:15]
    node _io_slave_r_bits_data_T_12 = add(addrReg, UInt<2>("h3")) @[DataMem.scala 125:24]
    node _io_slave_r_bits_data_T_13 = tail(_io_slave_r_bits_data_T_12, 1) @[DataMem.scala 125:24]
    node _io_slave_r_bits_data_T_14 = bits(_io_slave_r_bits_data_T_13, 15, 0) @[DataMem.scala 125:15]
    infer mport io_slave_r_bits_data_MPORT_4 = memory[_io_slave_r_bits_data_T_14], clock @[DataMem.scala 125:15]
    node _io_slave_r_bits_data_T_15 = add(addrReg, UInt<2>("h2")) @[DataMem.scala 126:24]
    node _io_slave_r_bits_data_T_16 = tail(_io_slave_r_bits_data_T_15, 1) @[DataMem.scala 126:24]
    node _io_slave_r_bits_data_T_17 = bits(_io_slave_r_bits_data_T_16, 15, 0) @[DataMem.scala 126:15]
    infer mport io_slave_r_bits_data_MPORT_5 = memory[_io_slave_r_bits_data_T_17], clock @[DataMem.scala 126:15]
    node _io_slave_r_bits_data_T_18 = add(addrReg, UInt<1>("h1")) @[DataMem.scala 127:24]
    node _io_slave_r_bits_data_T_19 = tail(_io_slave_r_bits_data_T_18, 1) @[DataMem.scala 127:24]
    node _io_slave_r_bits_data_T_20 = bits(_io_slave_r_bits_data_T_19, 15, 0) @[DataMem.scala 127:15]
    infer mport io_slave_r_bits_data_MPORT_6 = memory[_io_slave_r_bits_data_T_20], clock @[DataMem.scala 127:15]
    node _io_slave_r_bits_data_T_21 = bits(addrReg, 15, 0) @[DataMem.scala 128:15]
    infer mport io_slave_r_bits_data_MPORT_7 = memory[_io_slave_r_bits_data_T_21], clock @[DataMem.scala 128:15]
    node io_slave_r_bits_data_lo_lo = cat(io_slave_r_bits_data_MPORT_6, io_slave_r_bits_data_MPORT_7) @[Cat.scala 33:92]
    node io_slave_r_bits_data_lo_hi = cat(io_slave_r_bits_data_MPORT_4, io_slave_r_bits_data_MPORT_5) @[Cat.scala 33:92]
    node io_slave_r_bits_data_lo = cat(io_slave_r_bits_data_lo_hi, io_slave_r_bits_data_lo_lo) @[Cat.scala 33:92]
    node io_slave_r_bits_data_hi_lo = cat(io_slave_r_bits_data_MPORT_2, io_slave_r_bits_data_MPORT_3) @[Cat.scala 33:92]
    node io_slave_r_bits_data_hi_hi = cat(io_slave_r_bits_data_MPORT, io_slave_r_bits_data_MPORT_1) @[Cat.scala 33:92]
    node io_slave_r_bits_data_hi = cat(io_slave_r_bits_data_hi_hi, io_slave_r_bits_data_hi_lo) @[Cat.scala 33:92]
    node _io_slave_r_bits_data_T_22 = cat(io_slave_r_bits_data_hi, io_slave_r_bits_data_lo) @[Cat.scala 33:92]
    io.slave.r.bits.data <= _io_slave_r_bits_data_T_22 @[DataMem.scala 120:26]

  module PE :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}, fwd_input : { valid : UInt<1>, bits : UInt<8>}, flip weight : { valid : UInt<1>, bits : UInt<8>}, fwd_weight : { valid : UInt<1>, bits : UInt<8>}, flip preload : UInt<1>, flip ps : UInt<16>, fwd_ps : { valid : UInt<1>, bits : UInt<16>}}

    wire weightReg_init : { valid : UInt<1>, bits : UInt<8>} @[PE.scala 32:20]
    weightReg_init.bits is invalid @[PE.scala 33:10]
    weightReg_init.valid is invalid @[PE.scala 33:10]
    reg weightReg : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, weightReg_init) @[PE.scala 31:26]
    node _weightReg_bits_T = mux(io.preload, io.weight.bits, weightReg.bits) @[PE.scala 38:25]
    weightReg.bits <= _weightReg_bits_T @[PE.scala 38:19]
    node _weightReg_valid_T = mux(io.preload, io.weight.valid, weightReg.valid) @[PE.scala 39:25]
    weightReg.valid <= _weightReg_valid_T @[PE.scala 39:19]
    io.fwd_weight.bits <= weightReg.bits @[PE.scala 42:23]
    io.fwd_weight.valid <= weightReg.valid @[PE.scala 43:23]
    reg io_fwd_input_REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), io_fwd_input_REG) @[PE.scala 45:26]
    io_fwd_input_REG.bits <= io.input.bits @[PE.scala 45:26]
    io_fwd_input_REG.valid <= io.input.valid @[PE.scala 45:26]
    io.fwd_input <= io_fwd_input_REG @[PE.scala 45:16]
    reg io_fwd_ps_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_valid_REG) @[PE.scala 47:29]
    io_fwd_ps_valid_REG <= io.input.valid @[PE.scala 47:29]
    io.fwd_ps.valid <= io_fwd_ps_valid_REG @[PE.scala 47:19]
    node _io_fwd_ps_bits_T = mul(weightReg.bits, io.input.bits) @[PE.scala 48:53]
    node _io_fwd_ps_bits_T_1 = add(io.ps, _io_fwd_ps_bits_T) @[PE.scala 48:36]
    node _io_fwd_ps_bits_T_2 = tail(_io_fwd_ps_bits_T_1, 1) @[PE.scala 48:36]
    reg io_fwd_ps_bits_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_bits_REG) @[PE.scala 48:29]
    io_fwd_ps_bits_REG <= _io_fwd_ps_bits_T_2 @[PE.scala 48:29]
    io.fwd_ps.bits <= io_fwd_ps_bits_REG @[PE.scala 48:19]

  module PE_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}, fwd_input : { valid : UInt<1>, bits : UInt<8>}, flip weight : { valid : UInt<1>, bits : UInt<8>}, fwd_weight : { valid : UInt<1>, bits : UInt<8>}, flip preload : UInt<1>, flip ps : UInt<16>, fwd_ps : { valid : UInt<1>, bits : UInt<16>}}

    wire weightReg_init : { valid : UInt<1>, bits : UInt<8>} @[PE.scala 32:20]
    weightReg_init.bits is invalid @[PE.scala 33:10]
    weightReg_init.valid is invalid @[PE.scala 33:10]
    reg weightReg : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, weightReg_init) @[PE.scala 31:26]
    node _weightReg_bits_T = mux(io.preload, io.weight.bits, weightReg.bits) @[PE.scala 38:25]
    weightReg.bits <= _weightReg_bits_T @[PE.scala 38:19]
    node _weightReg_valid_T = mux(io.preload, io.weight.valid, weightReg.valid) @[PE.scala 39:25]
    weightReg.valid <= _weightReg_valid_T @[PE.scala 39:19]
    io.fwd_weight.bits <= weightReg.bits @[PE.scala 42:23]
    io.fwd_weight.valid <= weightReg.valid @[PE.scala 43:23]
    reg io_fwd_input_REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), io_fwd_input_REG) @[PE.scala 45:26]
    io_fwd_input_REG.bits <= io.input.bits @[PE.scala 45:26]
    io_fwd_input_REG.valid <= io.input.valid @[PE.scala 45:26]
    io.fwd_input <= io_fwd_input_REG @[PE.scala 45:16]
    reg io_fwd_ps_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_valid_REG) @[PE.scala 47:29]
    io_fwd_ps_valid_REG <= io.input.valid @[PE.scala 47:29]
    io.fwd_ps.valid <= io_fwd_ps_valid_REG @[PE.scala 47:19]
    node _io_fwd_ps_bits_T = mul(weightReg.bits, io.input.bits) @[PE.scala 48:53]
    node _io_fwd_ps_bits_T_1 = add(io.ps, _io_fwd_ps_bits_T) @[PE.scala 48:36]
    node _io_fwd_ps_bits_T_2 = tail(_io_fwd_ps_bits_T_1, 1) @[PE.scala 48:36]
    reg io_fwd_ps_bits_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_bits_REG) @[PE.scala 48:29]
    io_fwd_ps_bits_REG <= _io_fwd_ps_bits_T_2 @[PE.scala 48:29]
    io.fwd_ps.bits <= io_fwd_ps_bits_REG @[PE.scala 48:19]

  module PE_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}, fwd_input : { valid : UInt<1>, bits : UInt<8>}, flip weight : { valid : UInt<1>, bits : UInt<8>}, fwd_weight : { valid : UInt<1>, bits : UInt<8>}, flip preload : UInt<1>, flip ps : UInt<16>, fwd_ps : { valid : UInt<1>, bits : UInt<16>}}

    wire weightReg_init : { valid : UInt<1>, bits : UInt<8>} @[PE.scala 32:20]
    weightReg_init.bits is invalid @[PE.scala 33:10]
    weightReg_init.valid is invalid @[PE.scala 33:10]
    reg weightReg : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, weightReg_init) @[PE.scala 31:26]
    node _weightReg_bits_T = mux(io.preload, io.weight.bits, weightReg.bits) @[PE.scala 38:25]
    weightReg.bits <= _weightReg_bits_T @[PE.scala 38:19]
    node _weightReg_valid_T = mux(io.preload, io.weight.valid, weightReg.valid) @[PE.scala 39:25]
    weightReg.valid <= _weightReg_valid_T @[PE.scala 39:19]
    io.fwd_weight.bits <= weightReg.bits @[PE.scala 42:23]
    io.fwd_weight.valid <= weightReg.valid @[PE.scala 43:23]
    reg io_fwd_input_REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), io_fwd_input_REG) @[PE.scala 45:26]
    io_fwd_input_REG.bits <= io.input.bits @[PE.scala 45:26]
    io_fwd_input_REG.valid <= io.input.valid @[PE.scala 45:26]
    io.fwd_input <= io_fwd_input_REG @[PE.scala 45:16]
    reg io_fwd_ps_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_valid_REG) @[PE.scala 47:29]
    io_fwd_ps_valid_REG <= io.input.valid @[PE.scala 47:29]
    io.fwd_ps.valid <= io_fwd_ps_valid_REG @[PE.scala 47:19]
    node _io_fwd_ps_bits_T = mul(weightReg.bits, io.input.bits) @[PE.scala 48:53]
    node _io_fwd_ps_bits_T_1 = add(io.ps, _io_fwd_ps_bits_T) @[PE.scala 48:36]
    node _io_fwd_ps_bits_T_2 = tail(_io_fwd_ps_bits_T_1, 1) @[PE.scala 48:36]
    reg io_fwd_ps_bits_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_bits_REG) @[PE.scala 48:29]
    io_fwd_ps_bits_REG <= _io_fwd_ps_bits_T_2 @[PE.scala 48:29]
    io.fwd_ps.bits <= io_fwd_ps_bits_REG @[PE.scala 48:19]

  module PE_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}, fwd_input : { valid : UInt<1>, bits : UInt<8>}, flip weight : { valid : UInt<1>, bits : UInt<8>}, fwd_weight : { valid : UInt<1>, bits : UInt<8>}, flip preload : UInt<1>, flip ps : UInt<16>, fwd_ps : { valid : UInt<1>, bits : UInt<16>}}

    wire weightReg_init : { valid : UInt<1>, bits : UInt<8>} @[PE.scala 32:20]
    weightReg_init.bits is invalid @[PE.scala 33:10]
    weightReg_init.valid is invalid @[PE.scala 33:10]
    reg weightReg : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, weightReg_init) @[PE.scala 31:26]
    node _weightReg_bits_T = mux(io.preload, io.weight.bits, weightReg.bits) @[PE.scala 38:25]
    weightReg.bits <= _weightReg_bits_T @[PE.scala 38:19]
    node _weightReg_valid_T = mux(io.preload, io.weight.valid, weightReg.valid) @[PE.scala 39:25]
    weightReg.valid <= _weightReg_valid_T @[PE.scala 39:19]
    io.fwd_weight.bits <= weightReg.bits @[PE.scala 42:23]
    io.fwd_weight.valid <= weightReg.valid @[PE.scala 43:23]
    reg io_fwd_input_REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), io_fwd_input_REG) @[PE.scala 45:26]
    io_fwd_input_REG.bits <= io.input.bits @[PE.scala 45:26]
    io_fwd_input_REG.valid <= io.input.valid @[PE.scala 45:26]
    io.fwd_input <= io_fwd_input_REG @[PE.scala 45:16]
    reg io_fwd_ps_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_valid_REG) @[PE.scala 47:29]
    io_fwd_ps_valid_REG <= io.input.valid @[PE.scala 47:29]
    io.fwd_ps.valid <= io_fwd_ps_valid_REG @[PE.scala 47:19]
    node _io_fwd_ps_bits_T = mul(weightReg.bits, io.input.bits) @[PE.scala 48:53]
    node _io_fwd_ps_bits_T_1 = add(io.ps, _io_fwd_ps_bits_T) @[PE.scala 48:36]
    node _io_fwd_ps_bits_T_2 = tail(_io_fwd_ps_bits_T_1, 1) @[PE.scala 48:36]
    reg io_fwd_ps_bits_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_bits_REG) @[PE.scala 48:29]
    io_fwd_ps_bits_REG <= _io_fwd_ps_bits_T_2 @[PE.scala 48:29]
    io.fwd_ps.bits <= io_fwd_ps_bits_REG @[PE.scala 48:19]

  module PE_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}, fwd_input : { valid : UInt<1>, bits : UInt<8>}, flip weight : { valid : UInt<1>, bits : UInt<8>}, fwd_weight : { valid : UInt<1>, bits : UInt<8>}, flip preload : UInt<1>, flip ps : UInt<16>, fwd_ps : { valid : UInt<1>, bits : UInt<16>}}

    wire weightReg_init : { valid : UInt<1>, bits : UInt<8>} @[PE.scala 32:20]
    weightReg_init.bits is invalid @[PE.scala 33:10]
    weightReg_init.valid is invalid @[PE.scala 33:10]
    reg weightReg : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, weightReg_init) @[PE.scala 31:26]
    node _weightReg_bits_T = mux(io.preload, io.weight.bits, weightReg.bits) @[PE.scala 38:25]
    weightReg.bits <= _weightReg_bits_T @[PE.scala 38:19]
    node _weightReg_valid_T = mux(io.preload, io.weight.valid, weightReg.valid) @[PE.scala 39:25]
    weightReg.valid <= _weightReg_valid_T @[PE.scala 39:19]
    io.fwd_weight.bits <= weightReg.bits @[PE.scala 42:23]
    io.fwd_weight.valid <= weightReg.valid @[PE.scala 43:23]
    reg io_fwd_input_REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), io_fwd_input_REG) @[PE.scala 45:26]
    io_fwd_input_REG.bits <= io.input.bits @[PE.scala 45:26]
    io_fwd_input_REG.valid <= io.input.valid @[PE.scala 45:26]
    io.fwd_input <= io_fwd_input_REG @[PE.scala 45:16]
    reg io_fwd_ps_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_valid_REG) @[PE.scala 47:29]
    io_fwd_ps_valid_REG <= io.input.valid @[PE.scala 47:29]
    io.fwd_ps.valid <= io_fwd_ps_valid_REG @[PE.scala 47:19]
    node _io_fwd_ps_bits_T = mul(weightReg.bits, io.input.bits) @[PE.scala 48:53]
    node _io_fwd_ps_bits_T_1 = add(io.ps, _io_fwd_ps_bits_T) @[PE.scala 48:36]
    node _io_fwd_ps_bits_T_2 = tail(_io_fwd_ps_bits_T_1, 1) @[PE.scala 48:36]
    reg io_fwd_ps_bits_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_bits_REG) @[PE.scala 48:29]
    io_fwd_ps_bits_REG <= _io_fwd_ps_bits_T_2 @[PE.scala 48:29]
    io.fwd_ps.bits <= io_fwd_ps_bits_REG @[PE.scala 48:19]

  module PE_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}, fwd_input : { valid : UInt<1>, bits : UInt<8>}, flip weight : { valid : UInt<1>, bits : UInt<8>}, fwd_weight : { valid : UInt<1>, bits : UInt<8>}, flip preload : UInt<1>, flip ps : UInt<16>, fwd_ps : { valid : UInt<1>, bits : UInt<16>}}

    wire weightReg_init : { valid : UInt<1>, bits : UInt<8>} @[PE.scala 32:20]
    weightReg_init.bits is invalid @[PE.scala 33:10]
    weightReg_init.valid is invalid @[PE.scala 33:10]
    reg weightReg : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, weightReg_init) @[PE.scala 31:26]
    node _weightReg_bits_T = mux(io.preload, io.weight.bits, weightReg.bits) @[PE.scala 38:25]
    weightReg.bits <= _weightReg_bits_T @[PE.scala 38:19]
    node _weightReg_valid_T = mux(io.preload, io.weight.valid, weightReg.valid) @[PE.scala 39:25]
    weightReg.valid <= _weightReg_valid_T @[PE.scala 39:19]
    io.fwd_weight.bits <= weightReg.bits @[PE.scala 42:23]
    io.fwd_weight.valid <= weightReg.valid @[PE.scala 43:23]
    reg io_fwd_input_REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), io_fwd_input_REG) @[PE.scala 45:26]
    io_fwd_input_REG.bits <= io.input.bits @[PE.scala 45:26]
    io_fwd_input_REG.valid <= io.input.valid @[PE.scala 45:26]
    io.fwd_input <= io_fwd_input_REG @[PE.scala 45:16]
    reg io_fwd_ps_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_valid_REG) @[PE.scala 47:29]
    io_fwd_ps_valid_REG <= io.input.valid @[PE.scala 47:29]
    io.fwd_ps.valid <= io_fwd_ps_valid_REG @[PE.scala 47:19]
    node _io_fwd_ps_bits_T = mul(weightReg.bits, io.input.bits) @[PE.scala 48:53]
    node _io_fwd_ps_bits_T_1 = add(io.ps, _io_fwd_ps_bits_T) @[PE.scala 48:36]
    node _io_fwd_ps_bits_T_2 = tail(_io_fwd_ps_bits_T_1, 1) @[PE.scala 48:36]
    reg io_fwd_ps_bits_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_bits_REG) @[PE.scala 48:29]
    io_fwd_ps_bits_REG <= _io_fwd_ps_bits_T_2 @[PE.scala 48:29]
    io.fwd_ps.bits <= io_fwd_ps_bits_REG @[PE.scala 48:19]

  module PE_6 :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}, fwd_input : { valid : UInt<1>, bits : UInt<8>}, flip weight : { valid : UInt<1>, bits : UInt<8>}, fwd_weight : { valid : UInt<1>, bits : UInt<8>}, flip preload : UInt<1>, flip ps : UInt<16>, fwd_ps : { valid : UInt<1>, bits : UInt<16>}}

    wire weightReg_init : { valid : UInt<1>, bits : UInt<8>} @[PE.scala 32:20]
    weightReg_init.bits is invalid @[PE.scala 33:10]
    weightReg_init.valid is invalid @[PE.scala 33:10]
    reg weightReg : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, weightReg_init) @[PE.scala 31:26]
    node _weightReg_bits_T = mux(io.preload, io.weight.bits, weightReg.bits) @[PE.scala 38:25]
    weightReg.bits <= _weightReg_bits_T @[PE.scala 38:19]
    node _weightReg_valid_T = mux(io.preload, io.weight.valid, weightReg.valid) @[PE.scala 39:25]
    weightReg.valid <= _weightReg_valid_T @[PE.scala 39:19]
    io.fwd_weight.bits <= weightReg.bits @[PE.scala 42:23]
    io.fwd_weight.valid <= weightReg.valid @[PE.scala 43:23]
    reg io_fwd_input_REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), io_fwd_input_REG) @[PE.scala 45:26]
    io_fwd_input_REG.bits <= io.input.bits @[PE.scala 45:26]
    io_fwd_input_REG.valid <= io.input.valid @[PE.scala 45:26]
    io.fwd_input <= io_fwd_input_REG @[PE.scala 45:16]
    reg io_fwd_ps_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_valid_REG) @[PE.scala 47:29]
    io_fwd_ps_valid_REG <= io.input.valid @[PE.scala 47:29]
    io.fwd_ps.valid <= io_fwd_ps_valid_REG @[PE.scala 47:19]
    node _io_fwd_ps_bits_T = mul(weightReg.bits, io.input.bits) @[PE.scala 48:53]
    node _io_fwd_ps_bits_T_1 = add(io.ps, _io_fwd_ps_bits_T) @[PE.scala 48:36]
    node _io_fwd_ps_bits_T_2 = tail(_io_fwd_ps_bits_T_1, 1) @[PE.scala 48:36]
    reg io_fwd_ps_bits_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_bits_REG) @[PE.scala 48:29]
    io_fwd_ps_bits_REG <= _io_fwd_ps_bits_T_2 @[PE.scala 48:29]
    io.fwd_ps.bits <= io_fwd_ps_bits_REG @[PE.scala 48:19]

  module PE_7 :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}, fwd_input : { valid : UInt<1>, bits : UInt<8>}, flip weight : { valid : UInt<1>, bits : UInt<8>}, fwd_weight : { valid : UInt<1>, bits : UInt<8>}, flip preload : UInt<1>, flip ps : UInt<16>, fwd_ps : { valid : UInt<1>, bits : UInt<16>}}

    wire weightReg_init : { valid : UInt<1>, bits : UInt<8>} @[PE.scala 32:20]
    weightReg_init.bits is invalid @[PE.scala 33:10]
    weightReg_init.valid is invalid @[PE.scala 33:10]
    reg weightReg : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, weightReg_init) @[PE.scala 31:26]
    node _weightReg_bits_T = mux(io.preload, io.weight.bits, weightReg.bits) @[PE.scala 38:25]
    weightReg.bits <= _weightReg_bits_T @[PE.scala 38:19]
    node _weightReg_valid_T = mux(io.preload, io.weight.valid, weightReg.valid) @[PE.scala 39:25]
    weightReg.valid <= _weightReg_valid_T @[PE.scala 39:19]
    io.fwd_weight.bits <= weightReg.bits @[PE.scala 42:23]
    io.fwd_weight.valid <= weightReg.valid @[PE.scala 43:23]
    reg io_fwd_input_REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), io_fwd_input_REG) @[PE.scala 45:26]
    io_fwd_input_REG.bits <= io.input.bits @[PE.scala 45:26]
    io_fwd_input_REG.valid <= io.input.valid @[PE.scala 45:26]
    io.fwd_input <= io_fwd_input_REG @[PE.scala 45:16]
    reg io_fwd_ps_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_valid_REG) @[PE.scala 47:29]
    io_fwd_ps_valid_REG <= io.input.valid @[PE.scala 47:29]
    io.fwd_ps.valid <= io_fwd_ps_valid_REG @[PE.scala 47:19]
    node _io_fwd_ps_bits_T = mul(weightReg.bits, io.input.bits) @[PE.scala 48:53]
    node _io_fwd_ps_bits_T_1 = add(io.ps, _io_fwd_ps_bits_T) @[PE.scala 48:36]
    node _io_fwd_ps_bits_T_2 = tail(_io_fwd_ps_bits_T_1, 1) @[PE.scala 48:36]
    reg io_fwd_ps_bits_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_bits_REG) @[PE.scala 48:29]
    io_fwd_ps_bits_REG <= _io_fwd_ps_bits_T_2 @[PE.scala 48:29]
    io.fwd_ps.bits <= io_fwd_ps_bits_REG @[PE.scala 48:19]

  module PE_8 :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}, fwd_input : { valid : UInt<1>, bits : UInt<8>}, flip weight : { valid : UInt<1>, bits : UInt<8>}, fwd_weight : { valid : UInt<1>, bits : UInt<8>}, flip preload : UInt<1>, flip ps : UInt<16>, fwd_ps : { valid : UInt<1>, bits : UInt<16>}}

    wire weightReg_init : { valid : UInt<1>, bits : UInt<8>} @[PE.scala 32:20]
    weightReg_init.bits is invalid @[PE.scala 33:10]
    weightReg_init.valid is invalid @[PE.scala 33:10]
    reg weightReg : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, weightReg_init) @[PE.scala 31:26]
    node _weightReg_bits_T = mux(io.preload, io.weight.bits, weightReg.bits) @[PE.scala 38:25]
    weightReg.bits <= _weightReg_bits_T @[PE.scala 38:19]
    node _weightReg_valid_T = mux(io.preload, io.weight.valid, weightReg.valid) @[PE.scala 39:25]
    weightReg.valid <= _weightReg_valid_T @[PE.scala 39:19]
    io.fwd_weight.bits <= weightReg.bits @[PE.scala 42:23]
    io.fwd_weight.valid <= weightReg.valid @[PE.scala 43:23]
    reg io_fwd_input_REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), io_fwd_input_REG) @[PE.scala 45:26]
    io_fwd_input_REG.bits <= io.input.bits @[PE.scala 45:26]
    io_fwd_input_REG.valid <= io.input.valid @[PE.scala 45:26]
    io.fwd_input <= io_fwd_input_REG @[PE.scala 45:16]
    reg io_fwd_ps_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_valid_REG) @[PE.scala 47:29]
    io_fwd_ps_valid_REG <= io.input.valid @[PE.scala 47:29]
    io.fwd_ps.valid <= io_fwd_ps_valid_REG @[PE.scala 47:19]
    node _io_fwd_ps_bits_T = mul(weightReg.bits, io.input.bits) @[PE.scala 48:53]
    node _io_fwd_ps_bits_T_1 = add(io.ps, _io_fwd_ps_bits_T) @[PE.scala 48:36]
    node _io_fwd_ps_bits_T_2 = tail(_io_fwd_ps_bits_T_1, 1) @[PE.scala 48:36]
    reg io_fwd_ps_bits_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_bits_REG) @[PE.scala 48:29]
    io_fwd_ps_bits_REG <= _io_fwd_ps_bits_T_2 @[PE.scala 48:29]
    io.fwd_ps.bits <= io_fwd_ps_bits_REG @[PE.scala 48:19]

  module PE_9 :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}, fwd_input : { valid : UInt<1>, bits : UInt<8>}, flip weight : { valid : UInt<1>, bits : UInt<8>}, fwd_weight : { valid : UInt<1>, bits : UInt<8>}, flip preload : UInt<1>, flip ps : UInt<16>, fwd_ps : { valid : UInt<1>, bits : UInt<16>}}

    wire weightReg_init : { valid : UInt<1>, bits : UInt<8>} @[PE.scala 32:20]
    weightReg_init.bits is invalid @[PE.scala 33:10]
    weightReg_init.valid is invalid @[PE.scala 33:10]
    reg weightReg : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, weightReg_init) @[PE.scala 31:26]
    node _weightReg_bits_T = mux(io.preload, io.weight.bits, weightReg.bits) @[PE.scala 38:25]
    weightReg.bits <= _weightReg_bits_T @[PE.scala 38:19]
    node _weightReg_valid_T = mux(io.preload, io.weight.valid, weightReg.valid) @[PE.scala 39:25]
    weightReg.valid <= _weightReg_valid_T @[PE.scala 39:19]
    io.fwd_weight.bits <= weightReg.bits @[PE.scala 42:23]
    io.fwd_weight.valid <= weightReg.valid @[PE.scala 43:23]
    reg io_fwd_input_REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), io_fwd_input_REG) @[PE.scala 45:26]
    io_fwd_input_REG.bits <= io.input.bits @[PE.scala 45:26]
    io_fwd_input_REG.valid <= io.input.valid @[PE.scala 45:26]
    io.fwd_input <= io_fwd_input_REG @[PE.scala 45:16]
    reg io_fwd_ps_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_valid_REG) @[PE.scala 47:29]
    io_fwd_ps_valid_REG <= io.input.valid @[PE.scala 47:29]
    io.fwd_ps.valid <= io_fwd_ps_valid_REG @[PE.scala 47:19]
    node _io_fwd_ps_bits_T = mul(weightReg.bits, io.input.bits) @[PE.scala 48:53]
    node _io_fwd_ps_bits_T_1 = add(io.ps, _io_fwd_ps_bits_T) @[PE.scala 48:36]
    node _io_fwd_ps_bits_T_2 = tail(_io_fwd_ps_bits_T_1, 1) @[PE.scala 48:36]
    reg io_fwd_ps_bits_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_bits_REG) @[PE.scala 48:29]
    io_fwd_ps_bits_REG <= _io_fwd_ps_bits_T_2 @[PE.scala 48:29]
    io.fwd_ps.bits <= io_fwd_ps_bits_REG @[PE.scala 48:19]

  module PE_10 :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}, fwd_input : { valid : UInt<1>, bits : UInt<8>}, flip weight : { valid : UInt<1>, bits : UInt<8>}, fwd_weight : { valid : UInt<1>, bits : UInt<8>}, flip preload : UInt<1>, flip ps : UInt<16>, fwd_ps : { valid : UInt<1>, bits : UInt<16>}}

    wire weightReg_init : { valid : UInt<1>, bits : UInt<8>} @[PE.scala 32:20]
    weightReg_init.bits is invalid @[PE.scala 33:10]
    weightReg_init.valid is invalid @[PE.scala 33:10]
    reg weightReg : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, weightReg_init) @[PE.scala 31:26]
    node _weightReg_bits_T = mux(io.preload, io.weight.bits, weightReg.bits) @[PE.scala 38:25]
    weightReg.bits <= _weightReg_bits_T @[PE.scala 38:19]
    node _weightReg_valid_T = mux(io.preload, io.weight.valid, weightReg.valid) @[PE.scala 39:25]
    weightReg.valid <= _weightReg_valid_T @[PE.scala 39:19]
    io.fwd_weight.bits <= weightReg.bits @[PE.scala 42:23]
    io.fwd_weight.valid <= weightReg.valid @[PE.scala 43:23]
    reg io_fwd_input_REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), io_fwd_input_REG) @[PE.scala 45:26]
    io_fwd_input_REG.bits <= io.input.bits @[PE.scala 45:26]
    io_fwd_input_REG.valid <= io.input.valid @[PE.scala 45:26]
    io.fwd_input <= io_fwd_input_REG @[PE.scala 45:16]
    reg io_fwd_ps_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_valid_REG) @[PE.scala 47:29]
    io_fwd_ps_valid_REG <= io.input.valid @[PE.scala 47:29]
    io.fwd_ps.valid <= io_fwd_ps_valid_REG @[PE.scala 47:19]
    node _io_fwd_ps_bits_T = mul(weightReg.bits, io.input.bits) @[PE.scala 48:53]
    node _io_fwd_ps_bits_T_1 = add(io.ps, _io_fwd_ps_bits_T) @[PE.scala 48:36]
    node _io_fwd_ps_bits_T_2 = tail(_io_fwd_ps_bits_T_1, 1) @[PE.scala 48:36]
    reg io_fwd_ps_bits_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_bits_REG) @[PE.scala 48:29]
    io_fwd_ps_bits_REG <= _io_fwd_ps_bits_T_2 @[PE.scala 48:29]
    io.fwd_ps.bits <= io_fwd_ps_bits_REG @[PE.scala 48:19]

  module PE_11 :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}, fwd_input : { valid : UInt<1>, bits : UInt<8>}, flip weight : { valid : UInt<1>, bits : UInt<8>}, fwd_weight : { valid : UInt<1>, bits : UInt<8>}, flip preload : UInt<1>, flip ps : UInt<16>, fwd_ps : { valid : UInt<1>, bits : UInt<16>}}

    wire weightReg_init : { valid : UInt<1>, bits : UInt<8>} @[PE.scala 32:20]
    weightReg_init.bits is invalid @[PE.scala 33:10]
    weightReg_init.valid is invalid @[PE.scala 33:10]
    reg weightReg : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, weightReg_init) @[PE.scala 31:26]
    node _weightReg_bits_T = mux(io.preload, io.weight.bits, weightReg.bits) @[PE.scala 38:25]
    weightReg.bits <= _weightReg_bits_T @[PE.scala 38:19]
    node _weightReg_valid_T = mux(io.preload, io.weight.valid, weightReg.valid) @[PE.scala 39:25]
    weightReg.valid <= _weightReg_valid_T @[PE.scala 39:19]
    io.fwd_weight.bits <= weightReg.bits @[PE.scala 42:23]
    io.fwd_weight.valid <= weightReg.valid @[PE.scala 43:23]
    reg io_fwd_input_REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), io_fwd_input_REG) @[PE.scala 45:26]
    io_fwd_input_REG.bits <= io.input.bits @[PE.scala 45:26]
    io_fwd_input_REG.valid <= io.input.valid @[PE.scala 45:26]
    io.fwd_input <= io_fwd_input_REG @[PE.scala 45:16]
    reg io_fwd_ps_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_valid_REG) @[PE.scala 47:29]
    io_fwd_ps_valid_REG <= io.input.valid @[PE.scala 47:29]
    io.fwd_ps.valid <= io_fwd_ps_valid_REG @[PE.scala 47:19]
    node _io_fwd_ps_bits_T = mul(weightReg.bits, io.input.bits) @[PE.scala 48:53]
    node _io_fwd_ps_bits_T_1 = add(io.ps, _io_fwd_ps_bits_T) @[PE.scala 48:36]
    node _io_fwd_ps_bits_T_2 = tail(_io_fwd_ps_bits_T_1, 1) @[PE.scala 48:36]
    reg io_fwd_ps_bits_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_bits_REG) @[PE.scala 48:29]
    io_fwd_ps_bits_REG <= _io_fwd_ps_bits_T_2 @[PE.scala 48:29]
    io.fwd_ps.bits <= io_fwd_ps_bits_REG @[PE.scala 48:19]

  module PE_12 :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}, fwd_input : { valid : UInt<1>, bits : UInt<8>}, flip weight : { valid : UInt<1>, bits : UInt<8>}, fwd_weight : { valid : UInt<1>, bits : UInt<8>}, flip preload : UInt<1>, flip ps : UInt<16>, fwd_ps : { valid : UInt<1>, bits : UInt<16>}}

    wire weightReg_init : { valid : UInt<1>, bits : UInt<8>} @[PE.scala 32:20]
    weightReg_init.bits is invalid @[PE.scala 33:10]
    weightReg_init.valid is invalid @[PE.scala 33:10]
    reg weightReg : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, weightReg_init) @[PE.scala 31:26]
    node _weightReg_bits_T = mux(io.preload, io.weight.bits, weightReg.bits) @[PE.scala 38:25]
    weightReg.bits <= _weightReg_bits_T @[PE.scala 38:19]
    node _weightReg_valid_T = mux(io.preload, io.weight.valid, weightReg.valid) @[PE.scala 39:25]
    weightReg.valid <= _weightReg_valid_T @[PE.scala 39:19]
    io.fwd_weight.bits <= weightReg.bits @[PE.scala 42:23]
    io.fwd_weight.valid <= weightReg.valid @[PE.scala 43:23]
    reg io_fwd_input_REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), io_fwd_input_REG) @[PE.scala 45:26]
    io_fwd_input_REG.bits <= io.input.bits @[PE.scala 45:26]
    io_fwd_input_REG.valid <= io.input.valid @[PE.scala 45:26]
    io.fwd_input <= io_fwd_input_REG @[PE.scala 45:16]
    reg io_fwd_ps_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_valid_REG) @[PE.scala 47:29]
    io_fwd_ps_valid_REG <= io.input.valid @[PE.scala 47:29]
    io.fwd_ps.valid <= io_fwd_ps_valid_REG @[PE.scala 47:19]
    node _io_fwd_ps_bits_T = mul(weightReg.bits, io.input.bits) @[PE.scala 48:53]
    node _io_fwd_ps_bits_T_1 = add(io.ps, _io_fwd_ps_bits_T) @[PE.scala 48:36]
    node _io_fwd_ps_bits_T_2 = tail(_io_fwd_ps_bits_T_1, 1) @[PE.scala 48:36]
    reg io_fwd_ps_bits_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_bits_REG) @[PE.scala 48:29]
    io_fwd_ps_bits_REG <= _io_fwd_ps_bits_T_2 @[PE.scala 48:29]
    io.fwd_ps.bits <= io_fwd_ps_bits_REG @[PE.scala 48:19]

  module PE_13 :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}, fwd_input : { valid : UInt<1>, bits : UInt<8>}, flip weight : { valid : UInt<1>, bits : UInt<8>}, fwd_weight : { valid : UInt<1>, bits : UInt<8>}, flip preload : UInt<1>, flip ps : UInt<16>, fwd_ps : { valid : UInt<1>, bits : UInt<16>}}

    wire weightReg_init : { valid : UInt<1>, bits : UInt<8>} @[PE.scala 32:20]
    weightReg_init.bits is invalid @[PE.scala 33:10]
    weightReg_init.valid is invalid @[PE.scala 33:10]
    reg weightReg : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, weightReg_init) @[PE.scala 31:26]
    node _weightReg_bits_T = mux(io.preload, io.weight.bits, weightReg.bits) @[PE.scala 38:25]
    weightReg.bits <= _weightReg_bits_T @[PE.scala 38:19]
    node _weightReg_valid_T = mux(io.preload, io.weight.valid, weightReg.valid) @[PE.scala 39:25]
    weightReg.valid <= _weightReg_valid_T @[PE.scala 39:19]
    io.fwd_weight.bits <= weightReg.bits @[PE.scala 42:23]
    io.fwd_weight.valid <= weightReg.valid @[PE.scala 43:23]
    reg io_fwd_input_REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), io_fwd_input_REG) @[PE.scala 45:26]
    io_fwd_input_REG.bits <= io.input.bits @[PE.scala 45:26]
    io_fwd_input_REG.valid <= io.input.valid @[PE.scala 45:26]
    io.fwd_input <= io_fwd_input_REG @[PE.scala 45:16]
    reg io_fwd_ps_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_valid_REG) @[PE.scala 47:29]
    io_fwd_ps_valid_REG <= io.input.valid @[PE.scala 47:29]
    io.fwd_ps.valid <= io_fwd_ps_valid_REG @[PE.scala 47:19]
    node _io_fwd_ps_bits_T = mul(weightReg.bits, io.input.bits) @[PE.scala 48:53]
    node _io_fwd_ps_bits_T_1 = add(io.ps, _io_fwd_ps_bits_T) @[PE.scala 48:36]
    node _io_fwd_ps_bits_T_2 = tail(_io_fwd_ps_bits_T_1, 1) @[PE.scala 48:36]
    reg io_fwd_ps_bits_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_bits_REG) @[PE.scala 48:29]
    io_fwd_ps_bits_REG <= _io_fwd_ps_bits_T_2 @[PE.scala 48:29]
    io.fwd_ps.bits <= io_fwd_ps_bits_REG @[PE.scala 48:19]

  module PE_14 :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}, fwd_input : { valid : UInt<1>, bits : UInt<8>}, flip weight : { valid : UInt<1>, bits : UInt<8>}, fwd_weight : { valid : UInt<1>, bits : UInt<8>}, flip preload : UInt<1>, flip ps : UInt<16>, fwd_ps : { valid : UInt<1>, bits : UInt<16>}}

    wire weightReg_init : { valid : UInt<1>, bits : UInt<8>} @[PE.scala 32:20]
    weightReg_init.bits is invalid @[PE.scala 33:10]
    weightReg_init.valid is invalid @[PE.scala 33:10]
    reg weightReg : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, weightReg_init) @[PE.scala 31:26]
    node _weightReg_bits_T = mux(io.preload, io.weight.bits, weightReg.bits) @[PE.scala 38:25]
    weightReg.bits <= _weightReg_bits_T @[PE.scala 38:19]
    node _weightReg_valid_T = mux(io.preload, io.weight.valid, weightReg.valid) @[PE.scala 39:25]
    weightReg.valid <= _weightReg_valid_T @[PE.scala 39:19]
    io.fwd_weight.bits <= weightReg.bits @[PE.scala 42:23]
    io.fwd_weight.valid <= weightReg.valid @[PE.scala 43:23]
    reg io_fwd_input_REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), io_fwd_input_REG) @[PE.scala 45:26]
    io_fwd_input_REG.bits <= io.input.bits @[PE.scala 45:26]
    io_fwd_input_REG.valid <= io.input.valid @[PE.scala 45:26]
    io.fwd_input <= io_fwd_input_REG @[PE.scala 45:16]
    reg io_fwd_ps_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_valid_REG) @[PE.scala 47:29]
    io_fwd_ps_valid_REG <= io.input.valid @[PE.scala 47:29]
    io.fwd_ps.valid <= io_fwd_ps_valid_REG @[PE.scala 47:19]
    node _io_fwd_ps_bits_T = mul(weightReg.bits, io.input.bits) @[PE.scala 48:53]
    node _io_fwd_ps_bits_T_1 = add(io.ps, _io_fwd_ps_bits_T) @[PE.scala 48:36]
    node _io_fwd_ps_bits_T_2 = tail(_io_fwd_ps_bits_T_1, 1) @[PE.scala 48:36]
    reg io_fwd_ps_bits_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_bits_REG) @[PE.scala 48:29]
    io_fwd_ps_bits_REG <= _io_fwd_ps_bits_T_2 @[PE.scala 48:29]
    io.fwd_ps.bits <= io_fwd_ps_bits_REG @[PE.scala 48:19]

  module PE_15 :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}, fwd_input : { valid : UInt<1>, bits : UInt<8>}, flip weight : { valid : UInt<1>, bits : UInt<8>}, fwd_weight : { valid : UInt<1>, bits : UInt<8>}, flip preload : UInt<1>, flip ps : UInt<16>, fwd_ps : { valid : UInt<1>, bits : UInt<16>}}

    wire weightReg_init : { valid : UInt<1>, bits : UInt<8>} @[PE.scala 32:20]
    weightReg_init.bits is invalid @[PE.scala 33:10]
    weightReg_init.valid is invalid @[PE.scala 33:10]
    reg weightReg : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, weightReg_init) @[PE.scala 31:26]
    node _weightReg_bits_T = mux(io.preload, io.weight.bits, weightReg.bits) @[PE.scala 38:25]
    weightReg.bits <= _weightReg_bits_T @[PE.scala 38:19]
    node _weightReg_valid_T = mux(io.preload, io.weight.valid, weightReg.valid) @[PE.scala 39:25]
    weightReg.valid <= _weightReg_valid_T @[PE.scala 39:19]
    io.fwd_weight.bits <= weightReg.bits @[PE.scala 42:23]
    io.fwd_weight.valid <= weightReg.valid @[PE.scala 43:23]
    reg io_fwd_input_REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (UInt<1>("h0"), io_fwd_input_REG) @[PE.scala 45:26]
    io_fwd_input_REG.bits <= io.input.bits @[PE.scala 45:26]
    io_fwd_input_REG.valid <= io.input.valid @[PE.scala 45:26]
    io.fwd_input <= io_fwd_input_REG @[PE.scala 45:16]
    reg io_fwd_ps_valid_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_valid_REG) @[PE.scala 47:29]
    io_fwd_ps_valid_REG <= io.input.valid @[PE.scala 47:29]
    io.fwd_ps.valid <= io_fwd_ps_valid_REG @[PE.scala 47:19]
    node _io_fwd_ps_bits_T = mul(weightReg.bits, io.input.bits) @[PE.scala 48:53]
    node _io_fwd_ps_bits_T_1 = add(io.ps, _io_fwd_ps_bits_T) @[PE.scala 48:36]
    node _io_fwd_ps_bits_T_2 = tail(_io_fwd_ps_bits_T_1, 1) @[PE.scala 48:36]
    reg io_fwd_ps_bits_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_fwd_ps_bits_REG) @[PE.scala 48:29]
    io_fwd_ps_bits_REG <= _io_fwd_ps_bits_T_2 @[PE.scala 48:29]
    io.fwd_ps.bits <= io_fwd_ps_bits_REG @[PE.scala 48:19]

  module tile :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}[4], flip weight : { valid : UInt<1>, bits : UInt<8>}[4], flip preload : UInt<1>, output : { valid : UInt<1>, bits : UInt<16>}[4]}

    inst PE of PE @[tile.scala 23:41]
    PE.clock <= clock
    PE.reset <= reset
    inst PE_1 of PE_1 @[tile.scala 23:41]
    PE_1.clock <= clock
    PE_1.reset <= reset
    inst PE_2 of PE_2 @[tile.scala 23:41]
    PE_2.clock <= clock
    PE_2.reset <= reset
    inst PE_3 of PE_3 @[tile.scala 23:41]
    PE_3.clock <= clock
    PE_3.reset <= reset
    inst PE_4 of PE_4 @[tile.scala 23:41]
    PE_4.clock <= clock
    PE_4.reset <= reset
    inst PE_5 of PE_5 @[tile.scala 23:41]
    PE_5.clock <= clock
    PE_5.reset <= reset
    inst PE_6 of PE_6 @[tile.scala 23:41]
    PE_6.clock <= clock
    PE_6.reset <= reset
    inst PE_7 of PE_7 @[tile.scala 23:41]
    PE_7.clock <= clock
    PE_7.reset <= reset
    inst PE_8 of PE_8 @[tile.scala 23:41]
    PE_8.clock <= clock
    PE_8.reset <= reset
    inst PE_9 of PE_9 @[tile.scala 23:41]
    PE_9.clock <= clock
    PE_9.reset <= reset
    inst PE_10 of PE_10 @[tile.scala 23:41]
    PE_10.clock <= clock
    PE_10.reset <= reset
    inst PE_11 of PE_11 @[tile.scala 23:41]
    PE_11.clock <= clock
    PE_11.reset <= reset
    inst PE_12 of PE_12 @[tile.scala 23:41]
    PE_12.clock <= clock
    PE_12.reset <= reset
    inst PE_13 of PE_13 @[tile.scala 23:41]
    PE_13.clock <= clock
    PE_13.reset <= reset
    inst PE_14 of PE_14 @[tile.scala 23:41]
    PE_14.clock <= clock
    PE_14.reset <= reset
    inst PE_15 of PE_15 @[tile.scala 23:41]
    PE_15.clock <= clock
    PE_15.reset <= reset
    PE.io.preload <= io.preload @[tile.scala 28:24]
    PE.io.input <= io.input[0] @[tile.scala 33:24]
    PE.io.weight <= io.weight[0] @[tile.scala 42:25]
    PE.io.ps <= UInt<1>("h0") @[tile.scala 43:21]
    PE_1.io.preload <= io.preload @[tile.scala 28:24]
    PE_1.io.input <= PE.io.fwd_input @[tile.scala 36:24]
    PE_1.io.weight <= io.weight[1] @[tile.scala 42:25]
    PE_1.io.ps <= UInt<1>("h0") @[tile.scala 43:21]
    PE_2.io.preload <= io.preload @[tile.scala 28:24]
    PE_2.io.input <= PE_1.io.fwd_input @[tile.scala 36:24]
    PE_2.io.weight <= io.weight[2] @[tile.scala 42:25]
    PE_2.io.ps <= UInt<1>("h0") @[tile.scala 43:21]
    PE_3.io.preload <= io.preload @[tile.scala 28:24]
    PE_3.io.input <= PE_2.io.fwd_input @[tile.scala 36:24]
    PE_3.io.weight <= io.weight[3] @[tile.scala 42:25]
    PE_3.io.ps <= UInt<1>("h0") @[tile.scala 43:21]
    PE_4.io.preload <= io.preload @[tile.scala 28:24]
    PE_4.io.input <= io.input[1] @[tile.scala 33:24]
    PE_4.io.weight <= PE.io.fwd_weight @[tile.scala 46:25]
    PE_4.io.ps <= PE.io.fwd_ps.bits @[tile.scala 47:21]
    PE_5.io.preload <= io.preload @[tile.scala 28:24]
    PE_5.io.input <= PE_4.io.fwd_input @[tile.scala 36:24]
    PE_5.io.weight <= PE_1.io.fwd_weight @[tile.scala 46:25]
    PE_5.io.ps <= PE_1.io.fwd_ps.bits @[tile.scala 47:21]
    PE_6.io.preload <= io.preload @[tile.scala 28:24]
    PE_6.io.input <= PE_5.io.fwd_input @[tile.scala 36:24]
    PE_6.io.weight <= PE_2.io.fwd_weight @[tile.scala 46:25]
    PE_6.io.ps <= PE_2.io.fwd_ps.bits @[tile.scala 47:21]
    PE_7.io.preload <= io.preload @[tile.scala 28:24]
    PE_7.io.input <= PE_6.io.fwd_input @[tile.scala 36:24]
    PE_7.io.weight <= PE_3.io.fwd_weight @[tile.scala 46:25]
    PE_7.io.ps <= PE_3.io.fwd_ps.bits @[tile.scala 47:21]
    PE_8.io.preload <= io.preload @[tile.scala 28:24]
    PE_8.io.input <= io.input[2] @[tile.scala 33:24]
    PE_8.io.weight <= PE_4.io.fwd_weight @[tile.scala 46:25]
    PE_8.io.ps <= PE_4.io.fwd_ps.bits @[tile.scala 47:21]
    PE_9.io.preload <= io.preload @[tile.scala 28:24]
    PE_9.io.input <= PE_8.io.fwd_input @[tile.scala 36:24]
    PE_9.io.weight <= PE_5.io.fwd_weight @[tile.scala 46:25]
    PE_9.io.ps <= PE_5.io.fwd_ps.bits @[tile.scala 47:21]
    PE_10.io.preload <= io.preload @[tile.scala 28:24]
    PE_10.io.input <= PE_9.io.fwd_input @[tile.scala 36:24]
    PE_10.io.weight <= PE_6.io.fwd_weight @[tile.scala 46:25]
    PE_10.io.ps <= PE_6.io.fwd_ps.bits @[tile.scala 47:21]
    PE_11.io.preload <= io.preload @[tile.scala 28:24]
    PE_11.io.input <= PE_10.io.fwd_input @[tile.scala 36:24]
    PE_11.io.weight <= PE_7.io.fwd_weight @[tile.scala 46:25]
    PE_11.io.ps <= PE_7.io.fwd_ps.bits @[tile.scala 47:21]
    PE_12.io.preload <= io.preload @[tile.scala 28:24]
    PE_12.io.input <= io.input[3] @[tile.scala 33:24]
    PE_12.io.weight <= PE_8.io.fwd_weight @[tile.scala 46:25]
    PE_12.io.ps <= PE_8.io.fwd_ps.bits @[tile.scala 47:21]
    PE_13.io.preload <= io.preload @[tile.scala 28:24]
    PE_13.io.input <= PE_12.io.fwd_input @[tile.scala 36:24]
    PE_13.io.weight <= PE_9.io.fwd_weight @[tile.scala 46:25]
    PE_13.io.ps <= PE_9.io.fwd_ps.bits @[tile.scala 47:21]
    PE_14.io.preload <= io.preload @[tile.scala 28:24]
    PE_14.io.input <= PE_13.io.fwd_input @[tile.scala 36:24]
    PE_14.io.weight <= PE_10.io.fwd_weight @[tile.scala 46:25]
    PE_14.io.ps <= PE_10.io.fwd_ps.bits @[tile.scala 47:21]
    PE_15.io.preload <= io.preload @[tile.scala 28:24]
    PE_15.io.input <= PE_14.io.fwd_input @[tile.scala 36:24]
    PE_15.io.weight <= PE_11.io.fwd_weight @[tile.scala 46:25]
    PE_15.io.ps <= PE_11.io.fwd_ps.bits @[tile.scala 47:21]
    io.output[0] <= PE_12.io.fwd_ps @[tile.scala 53:47]
    io.output[1] <= PE_13.io.fwd_ps @[tile.scala 53:47]
    io.output[2] <= PE_14.io.fwd_ps @[tile.scala 53:47]
    io.output[3] <= PE_15.io.fwd_ps @[tile.scala 53:47]

  module buffer :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}[4], output : { valid : UInt<1>, bits : UInt<8>}[4]}

    io.output[0] <= io.input[0] @[buffer.scala 17:16]
    wire init : { valid : UInt<1>, bits : UInt<8>} @[buffer.scala 21:22]
    init.bits is invalid @[buffer.scala 22:12]
    init.valid is invalid @[buffer.scala 22:12]
    reg REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, init) @[buffer.scala 20:44]
    REG <= io.input[1] @[buffer.scala 26:20]
    io.output[1] <= REG @[buffer.scala 31:20]
    wire init_1 : { valid : UInt<1>, bits : UInt<8>} @[buffer.scala 21:22]
    init_1.bits is invalid @[buffer.scala 22:12]
    init_1.valid is invalid @[buffer.scala 22:12]
    reg REG_1 : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, init_1) @[buffer.scala 20:44]
    wire init_2 : { valid : UInt<1>, bits : UInt<8>} @[buffer.scala 21:22]
    init_2.bits is invalid @[buffer.scala 22:12]
    init_2.valid is invalid @[buffer.scala 22:12]
    reg REG_2 : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, init_2) @[buffer.scala 20:44]
    REG_1 <= io.input[2] @[buffer.scala 26:20]
    REG_2.bits <= REG_1.bits @[buffer.scala 28:26]
    REG_2.valid <= REG_1.valid @[buffer.scala 29:26]
    io.output[2] <= REG_2 @[buffer.scala 31:20]
    wire init_3 : { valid : UInt<1>, bits : UInt<8>} @[buffer.scala 21:22]
    init_3.bits is invalid @[buffer.scala 22:12]
    init_3.valid is invalid @[buffer.scala 22:12]
    reg REG_3 : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, init_3) @[buffer.scala 20:44]
    wire init_4 : { valid : UInt<1>, bits : UInt<8>} @[buffer.scala 21:22]
    init_4.bits is invalid @[buffer.scala 22:12]
    init_4.valid is invalid @[buffer.scala 22:12]
    reg REG_4 : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, init_4) @[buffer.scala 20:44]
    wire init_5 : { valid : UInt<1>, bits : UInt<8>} @[buffer.scala 21:22]
    init_5.bits is invalid @[buffer.scala 22:12]
    init_5.valid is invalid @[buffer.scala 22:12]
    reg REG_5 : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, init_5) @[buffer.scala 20:44]
    REG_3 <= io.input[3] @[buffer.scala 26:20]
    REG_4.bits <= REG_3.bits @[buffer.scala 28:26]
    REG_4.valid <= REG_3.valid @[buffer.scala 29:26]
    REG_5.bits <= REG_4.bits @[buffer.scala 28:26]
    REG_5.valid <= REG_4.valid @[buffer.scala 29:26]
    io.output[3] <= REG_5 @[buffer.scala 31:20]

  module buffer_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip input : { valid : UInt<1>, bits : UInt<8>}[4], output : { valid : UInt<1>, bits : UInt<8>}[4]}

    io.output[0] <= io.input[0] @[buffer.scala 17:16]
    wire init : { valid : UInt<1>, bits : UInt<8>} @[buffer.scala 21:22]
    init.bits is invalid @[buffer.scala 22:12]
    init.valid is invalid @[buffer.scala 22:12]
    reg REG : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, init) @[buffer.scala 20:44]
    REG <= io.input[1] @[buffer.scala 26:20]
    io.output[1] <= REG @[buffer.scala 31:20]
    wire init_1 : { valid : UInt<1>, bits : UInt<8>} @[buffer.scala 21:22]
    init_1.bits is invalid @[buffer.scala 22:12]
    init_1.valid is invalid @[buffer.scala 22:12]
    reg REG_1 : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, init_1) @[buffer.scala 20:44]
    wire init_2 : { valid : UInt<1>, bits : UInt<8>} @[buffer.scala 21:22]
    init_2.bits is invalid @[buffer.scala 22:12]
    init_2.valid is invalid @[buffer.scala 22:12]
    reg REG_2 : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, init_2) @[buffer.scala 20:44]
    REG_1 <= io.input[2] @[buffer.scala 26:20]
    REG_2.bits <= REG_1.bits @[buffer.scala 28:26]
    REG_2.valid <= REG_1.valid @[buffer.scala 29:26]
    io.output[2] <= REG_2 @[buffer.scala 31:20]
    wire init_3 : { valid : UInt<1>, bits : UInt<8>} @[buffer.scala 21:22]
    init_3.bits is invalid @[buffer.scala 22:12]
    init_3.valid is invalid @[buffer.scala 22:12]
    reg REG_3 : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, init_3) @[buffer.scala 20:44]
    wire init_4 : { valid : UInt<1>, bits : UInt<8>} @[buffer.scala 21:22]
    init_4.bits is invalid @[buffer.scala 22:12]
    init_4.valid is invalid @[buffer.scala 22:12]
    reg REG_4 : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, init_4) @[buffer.scala 20:44]
    wire init_5 : { valid : UInt<1>, bits : UInt<8>} @[buffer.scala 21:22]
    init_5.bits is invalid @[buffer.scala 22:12]
    init_5.valid is invalid @[buffer.scala 22:12]
    reg REG_5 : { valid : UInt<1>, bits : UInt<8>}, clock with :
      reset => (reset, init_5) @[buffer.scala 20:44]
    REG_3 <= io.input[3] @[buffer.scala 26:20]
    REG_4.bits <= REG_3.bits @[buffer.scala 28:26]
    REG_4.valid <= REG_3.valid @[buffer.scala 29:26]
    REG_5.bits <= REG_4.bits @[buffer.scala 28:26]
    REG_5.valid <= REG_4.valid @[buffer.scala 29:26]
    io.output[3] <= REG_5 @[buffer.scala 31:20]

  module SA :
    input clock : Clock
    input reset : Reset
    output io : { flip mmio : { ENABLE_OUT : UInt<1>, STATUS_OUT : UInt<1>, MATA_SIZE : UInt<32>, MATB_SIZE : UInt<32>, MATC_SIZE : UInt<32>, MATA_MEM_ADDR : UInt<32>, MATB_MEM_ADDR : UInt<32>, MATC_MEM_ADDR : UInt<32>, MAT_MEM_STRIDE : UInt<32>, MAT_BUF : UInt<32>, ENABLE_LOAD : UInt<32>, DONE_LOAD : UInt<32>, SRC_INFO : UInt<32>, DST_INFO : UInt<32>, SIZE_CFG_INFO : UInt<32>, flip WEN : UInt<1>, flip ENABLE_IN : UInt<1>, flip STATUS_IN : UInt<1>}, raddr : UInt<32>, flip rdata : UInt<32>, wen : UInt<1>, waddr : UInt<32>, wdata : UInt<32>, wstrb : UInt<4>}

    node _mat_a_rows_T = bits(io.mmio.MATA_SIZE, 11, 0) @[SA.scala 42:37]
    node _mat_a_rows_T_1 = add(_mat_a_rows_T, UInt<1>("h1")) @[SA.scala 42:45]
    node mat_a_rows = tail(_mat_a_rows_T_1, 1) @[SA.scala 42:45]
    node _mat_a_cols_T = bits(io.mmio.MATA_SIZE, 27, 16) @[SA.scala 43:37]
    node _mat_a_cols_T_1 = add(_mat_a_cols_T, UInt<1>("h1")) @[SA.scala 43:46]
    node mat_a_cols = tail(_mat_a_cols_T_1, 1) @[SA.scala 43:46]
    node _mat_b_rows_T = bits(io.mmio.MATB_SIZE, 11, 0) @[SA.scala 44:37]
    node _mat_b_rows_T_1 = add(_mat_b_rows_T, UInt<1>("h1")) @[SA.scala 44:45]
    node mat_b_rows = tail(_mat_b_rows_T_1, 1) @[SA.scala 44:45]
    node _mat_b_cols_T = bits(io.mmio.MATB_SIZE, 27, 16) @[SA.scala 45:37]
    node _mat_b_cols_T_1 = add(_mat_b_cols_T, UInt<1>("h1")) @[SA.scala 45:46]
    node mat_b_cols = tail(_mat_b_cols_T_1, 1) @[SA.scala 45:46]
    node _mat_c_rows_T = bits(io.mmio.MATC_SIZE, 11, 0) @[SA.scala 46:37]
    node _mat_c_rows_T_1 = add(_mat_c_rows_T, UInt<1>("h1")) @[SA.scala 46:45]
    node mat_c_rows = tail(_mat_c_rows_T_1, 1) @[SA.scala 46:45]
    node _mat_c_cols_T = bits(io.mmio.MATC_SIZE, 27, 16) @[SA.scala 47:37]
    node _mat_c_cols_T_1 = add(_mat_c_cols_T, UInt<1>("h1")) @[SA.scala 47:46]
    node mat_c_cols = tail(_mat_c_cols_T_1, 1) @[SA.scala 47:46]
    wire a_base_addr : UInt
    a_base_addr <= io.mmio.MATA_MEM_ADDR
    wire b_base_addr : UInt
    b_base_addr <= io.mmio.MATB_MEM_ADDR
    wire c_base_addr : UInt
    c_base_addr <= io.mmio.MATC_MEM_ADDR
    wire word_writeData : UInt<32>
    word_writeData <= UInt<32>("h0")
    inst tile of tile @[SA.scala 58:29]
    tile.clock <= clock
    tile.reset <= reset
    inst input_buffer of buffer @[SA.scala 59:29]
    input_buffer.clock <= clock
    input_buffer.reset <= reset
    inst output_buffer of buffer_1 @[SA.scala 60:29]
    output_buffer.clock <= clock
    output_buffer.reset <= reset
    reg stateReg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[SA.scala 66:25]
    reg weight_cnt : UInt<3>, clock with :
      reset => (reset, UInt<3>("h4")) @[SA.scala 69:27]
    reg input_cnt : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[SA.scala 70:27]
    reg output_cnt : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[SA.scala 71:27]
    reg read_accumulated : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[SA.scala 72:33]
    reg reading_accumulated : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[SA.scala 73:36]
    wire word_readData : UInt<32> @[SA.scala 76:27]
    wire _accumulated_mat_C_WIRE : UInt<32>[4] @[SA.scala 77:42]
    _accumulated_mat_C_WIRE[0] <= UInt<32>("h0") @[SA.scala 77:42]
    _accumulated_mat_C_WIRE[1] <= UInt<32>("h0") @[SA.scala 77:42]
    _accumulated_mat_C_WIRE[2] <= UInt<32>("h0") @[SA.scala 77:42]
    _accumulated_mat_C_WIRE[3] <= UInt<32>("h0") @[SA.scala 77:42]
    reg accumulated_mat_C : UInt<32>[4], clock with :
      reset => (reset, _accumulated_mat_C_WIRE) @[SA.scala 77:34]
    word_readData <= io.rdata @[SA.scala 78:17]
    node _tile_io_preload_T = eq(stateReg, UInt<3>("h3")) @[SA.scala 81:31]
    tile.io.preload <= _tile_io_preload_T @[SA.scala 81:19]
    node _tile_io_weight_0_bits_T = bits(word_readData, 7, 0) @[SA.scala 83:49]
    tile.io.weight[0].bits <= _tile_io_weight_0_bits_T @[SA.scala 83:33]
    node _tile_io_weight_0_valid_T = eq(stateReg, UInt<3>("h3")) @[SA.scala 84:45]
    tile.io.weight[0].valid <= _tile_io_weight_0_valid_T @[SA.scala 84:33]
    node _tile_io_weight_1_bits_T = bits(word_readData, 15, 8) @[SA.scala 83:49]
    tile.io.weight[1].bits <= _tile_io_weight_1_bits_T @[SA.scala 83:33]
    node _tile_io_weight_1_valid_T = eq(stateReg, UInt<3>("h3")) @[SA.scala 84:45]
    tile.io.weight[1].valid <= _tile_io_weight_1_valid_T @[SA.scala 84:33]
    node _tile_io_weight_2_bits_T = bits(word_readData, 23, 16) @[SA.scala 83:49]
    tile.io.weight[2].bits <= _tile_io_weight_2_bits_T @[SA.scala 83:33]
    node _tile_io_weight_2_valid_T = eq(stateReg, UInt<3>("h3")) @[SA.scala 84:45]
    tile.io.weight[2].valid <= _tile_io_weight_2_valid_T @[SA.scala 84:33]
    node _tile_io_weight_3_bits_T = bits(word_readData, 31, 24) @[SA.scala 83:49]
    tile.io.weight[3].bits <= _tile_io_weight_3_bits_T @[SA.scala 83:33]
    node _tile_io_weight_3_valid_T = eq(stateReg, UInt<3>("h3")) @[SA.scala 84:45]
    tile.io.weight[3].valid <= _tile_io_weight_3_valid_T @[SA.scala 84:33]
    node _input_buffer_io_input_0_bits_T = bits(word_readData, 7, 0) @[SA.scala 89:56]
    input_buffer.io.input[0].bits <= _input_buffer_io_input_0_bits_T @[SA.scala 89:40]
    node _input_buffer_io_input_0_valid_T = eq(stateReg, UInt<3>("h5")) @[SA.scala 90:53]
    node _input_buffer_io_input_0_valid_T_1 = leq(input_cnt, UInt<3>("h4")) @[SA.scala 90:83]
    node _input_buffer_io_input_0_valid_T_2 = and(_input_buffer_io_input_0_valid_T, _input_buffer_io_input_0_valid_T_1) @[SA.scala 90:69]
    input_buffer.io.input[0].valid <= _input_buffer_io_input_0_valid_T_2 @[SA.scala 90:40]
    node _input_buffer_io_input_1_bits_T = bits(word_readData, 15, 8) @[SA.scala 89:56]
    input_buffer.io.input[1].bits <= _input_buffer_io_input_1_bits_T @[SA.scala 89:40]
    node _input_buffer_io_input_1_valid_T = eq(stateReg, UInt<3>("h5")) @[SA.scala 90:53]
    node _input_buffer_io_input_1_valid_T_1 = leq(input_cnt, UInt<3>("h4")) @[SA.scala 90:83]
    node _input_buffer_io_input_1_valid_T_2 = and(_input_buffer_io_input_1_valid_T, _input_buffer_io_input_1_valid_T_1) @[SA.scala 90:69]
    input_buffer.io.input[1].valid <= _input_buffer_io_input_1_valid_T_2 @[SA.scala 90:40]
    node _input_buffer_io_input_2_bits_T = bits(word_readData, 23, 16) @[SA.scala 89:56]
    input_buffer.io.input[2].bits <= _input_buffer_io_input_2_bits_T @[SA.scala 89:40]
    node _input_buffer_io_input_2_valid_T = eq(stateReg, UInt<3>("h5")) @[SA.scala 90:53]
    node _input_buffer_io_input_2_valid_T_1 = leq(input_cnt, UInt<3>("h4")) @[SA.scala 90:83]
    node _input_buffer_io_input_2_valid_T_2 = and(_input_buffer_io_input_2_valid_T, _input_buffer_io_input_2_valid_T_1) @[SA.scala 90:69]
    input_buffer.io.input[2].valid <= _input_buffer_io_input_2_valid_T_2 @[SA.scala 90:40]
    node _input_buffer_io_input_3_bits_T = bits(word_readData, 31, 24) @[SA.scala 89:56]
    input_buffer.io.input[3].bits <= _input_buffer_io_input_3_bits_T @[SA.scala 89:40]
    node _input_buffer_io_input_3_valid_T = eq(stateReg, UInt<3>("h5")) @[SA.scala 90:53]
    node _input_buffer_io_input_3_valid_T_1 = leq(input_cnt, UInt<3>("h4")) @[SA.scala 90:83]
    node _input_buffer_io_input_3_valid_T_2 = and(_input_buffer_io_input_3_valid_T, _input_buffer_io_input_3_valid_T_1) @[SA.scala 90:69]
    input_buffer.io.input[3].valid <= _input_buffer_io_input_3_valid_T_2 @[SA.scala 90:40]
    tile.io.input <= input_buffer.io.output @[SA.scala 94:17]
    output_buffer.io.input[3] <= tile.io.output[0] @[SA.scala 98:46]
    output_buffer.io.input[2] <= tile.io.output[1] @[SA.scala 98:46]
    output_buffer.io.input[1] <= tile.io.output[2] @[SA.scala 98:46]
    output_buffer.io.input[0] <= tile.io.output[3] @[SA.scala 98:46]
    node _io_raddr_T = eq(stateReg, UInt<3>("h2")) @[SA.scala 103:16]
    node _io_raddr_T_1 = eq(stateReg, UInt<3>("h3")) @[SA.scala 103:41]
    node _io_raddr_T_2 = or(_io_raddr_T, _io_raddr_T_1) @[SA.scala 103:29]
    node _io_raddr_T_3 = sub(weight_cnt, UInt<1>("h1")) @[SA.scala 104:34]
    node _io_raddr_T_4 = tail(_io_raddr_T_3, 1) @[SA.scala 104:34]
    node _io_raddr_T_5 = shl(_io_raddr_T_4, 2) @[SA.scala 104:41]
    node _io_raddr_T_6 = bits(io.mmio.MAT_MEM_STRIDE, 15, 8) @[SA.scala 104:71]
    node _io_raddr_T_7 = mul(_io_raddr_T_5, _io_raddr_T_6) @[SA.scala 104:47]
    node _io_raddr_T_8 = add(b_base_addr, _io_raddr_T_7) @[SA.scala 104:19]
    node _io_raddr_T_9 = tail(_io_raddr_T_8, 1) @[SA.scala 104:19]
    node _io_raddr_T_10 = geq(input_cnt, UInt<3>("h4")) @[SA.scala 105:21]
    node _io_raddr_T_11 = eq(stateReg, UInt<3>("h6")) @[SA.scala 105:40]
    node _io_raddr_T_12 = or(_io_raddr_T_10, _io_raddr_T_11) @[SA.scala 105:28]
    node _io_raddr_T_13 = shl(read_accumulated, 2) @[SA.scala 106:43]
    node _io_raddr_T_14 = bits(io.mmio.MAT_MEM_STRIDE, 23, 16) @[SA.scala 106:73]
    node _io_raddr_T_15 = mul(_io_raddr_T_13, _io_raddr_T_14) @[SA.scala 106:49]
    node _io_raddr_T_16 = add(c_base_addr, _io_raddr_T_15) @[SA.scala 106:23]
    node _io_raddr_T_17 = tail(_io_raddr_T_16, 1) @[SA.scala 106:23]
    node _io_raddr_T_18 = shl(input_cnt, 2) @[SA.scala 107:36]
    node _io_raddr_T_19 = bits(io.mmio.MAT_MEM_STRIDE, 7, 0) @[SA.scala 107:66]
    node _io_raddr_T_20 = mul(_io_raddr_T_18, _io_raddr_T_19) @[SA.scala 107:42]
    node _io_raddr_T_21 = add(a_base_addr, _io_raddr_T_20) @[SA.scala 107:23]
    node _io_raddr_T_22 = tail(_io_raddr_T_21, 1) @[SA.scala 107:23]
    node _io_raddr_T_23 = mux(_io_raddr_T_12, _io_raddr_T_17, _io_raddr_T_22) @[SA.scala 105:10]
    node _io_raddr_T_24 = mux(_io_raddr_T_2, _io_raddr_T_9, _io_raddr_T_23) @[SA.scala 102:18]
    io.raddr <= _io_raddr_T_24 @[SA.scala 102:12]
    node _io_waddr_T = shl(output_cnt, 2) @[SA.scala 109:41]
    node _io_waddr_T_1 = bits(io.mmio.MAT_MEM_STRIDE, 23, 16) @[SA.scala 109:71]
    node _io_waddr_T_2 = mul(_io_waddr_T, _io_waddr_T_1) @[SA.scala 109:47]
    node _io_waddr_T_3 = add(c_base_addr, _io_waddr_T_2) @[SA.scala 109:27]
    node _io_waddr_T_4 = tail(_io_waddr_T_3, 1) @[SA.scala 109:27]
    io.waddr <= _io_waddr_T_4 @[SA.scala 109:12]
    node _word_writeData_T = shl(output_buffer.io.output[0].bits, 24) @[SA.scala 113:41]
    node _word_writeData_T_1 = shl(output_buffer.io.output[1].bits, 16) @[SA.scala 113:41]
    node _word_writeData_T_2 = shl(output_buffer.io.output[2].bits, 8) @[SA.scala 113:41]
    node _word_writeData_T_3 = shl(output_buffer.io.output[3].bits, 0) @[SA.scala 113:41]
    node _word_writeData_T_4 = add(_word_writeData_T, _word_writeData_T_1) @[SA.scala 114:14]
    node _word_writeData_T_5 = tail(_word_writeData_T_4, 1) @[SA.scala 114:14]
    node _word_writeData_T_6 = add(_word_writeData_T_5, _word_writeData_T_2) @[SA.scala 114:14]
    node _word_writeData_T_7 = tail(_word_writeData_T_6, 1) @[SA.scala 114:14]
    node _word_writeData_T_8 = add(_word_writeData_T_7, _word_writeData_T_3) @[SA.scala 114:14]
    node _word_writeData_T_9 = tail(_word_writeData_T_8, 1) @[SA.scala 114:14]
    node _word_writeData_T_10 = bits(output_cnt, 1, 0)
    node _word_writeData_T_11 = add(_word_writeData_T_9, accumulated_mat_C[_word_writeData_T_10]) @[SA.scala 114:20]
    node _word_writeData_T_12 = tail(_word_writeData_T_11, 1) @[SA.scala 114:20]
    word_writeData <= _word_writeData_T_12 @[SA.scala 112:18]
    io.wdata <= word_writeData @[SA.scala 116:12]
    io.wstrb <= UInt<4>("hf") @[SA.scala 117:12]
    io.wen <= output_buffer.io.output[0].valid @[SA.scala 118:12]
    node _io_mmio_ENABLE_IN_T = eq(stateReg, UInt<3>("h7")) @[SA.scala 121:35]
    node _io_mmio_ENABLE_IN_T_1 = eq(_io_mmio_ENABLE_IN_T, UInt<1>("h0")) @[SA.scala 121:24]
    io.mmio.ENABLE_IN <= _io_mmio_ENABLE_IN_T_1 @[SA.scala 121:21]
    node _io_mmio_STATUS_IN_T = eq(stateReg, UInt<3>("h7")) @[SA.scala 122:33]
    io.mmio.STATUS_IN <= _io_mmio_STATUS_IN_T @[SA.scala 122:21]
    node _io_mmio_WEN_T = eq(stateReg, UInt<3>("h7")) @[SA.scala 123:33]
    io.mmio.WEN <= _io_mmio_WEN_T @[SA.scala 123:21]
    node _T = eq(UInt<3>("h0"), stateReg) @[SA.scala 126:20]
    when _T : @[SA.scala 126:20]
      stateReg <= UInt<3>("h1") @[SA.scala 128:16]
    else :
      node _T_1 = eq(UInt<3>("h1"), stateReg) @[SA.scala 126:20]
      when _T_1 : @[SA.scala 126:20]
        node _stateReg_T = mux(io.mmio.ENABLE_OUT, UInt<3>("h2"), UInt<3>("h1")) @[SA.scala 131:22]
        stateReg <= _stateReg_T @[SA.scala 131:16]
      else :
        node _T_2 = eq(UInt<3>("h2"), stateReg) @[SA.scala 126:20]
        when _T_2 : @[SA.scala 126:20]
          node _stateReg_T_1 = mux(io.mmio.ENABLE_OUT, UInt<3>("h3"), UInt<3>("h1")) @[SA.scala 134:22]
          stateReg <= _stateReg_T_1 @[SA.scala 134:16]
        else :
          node _T_3 = eq(UInt<3>("h3"), stateReg) @[SA.scala 126:20]
          when _T_3 : @[SA.scala 126:20]
            when io.mmio.ENABLE_OUT : @[SA.scala 137:32]
              node _stateReg_T_2 = eq(weight_cnt, UInt<1>("h0")) @[SA.scala 138:36]
              node _stateReg_T_3 = mux(_stateReg_T_2, UInt<3>("h4"), UInt<3>("h3")) @[SA.scala 138:24]
              stateReg <= _stateReg_T_3 @[SA.scala 138:18]
            else :
              stateReg <= UInt<3>("h1") @[SA.scala 140:18]
          else :
            node _T_4 = eq(UInt<3>("h4"), stateReg) @[SA.scala 126:20]
            when _T_4 : @[SA.scala 126:20]
              node _stateReg_T_4 = mux(io.mmio.ENABLE_OUT, UInt<3>("h5"), UInt<3>("h1")) @[SA.scala 144:24]
              stateReg <= _stateReg_T_4 @[SA.scala 144:18]
              node _weight_cnt_T = mux(io.mmio.ENABLE_OUT, weight_cnt, UInt<3>("h4")) @[SA.scala 145:24]
              weight_cnt <= _weight_cnt_T @[SA.scala 145:18]
            else :
              node _T_5 = eq(UInt<3>("h5"), stateReg) @[SA.scala 126:20]
              when _T_5 : @[SA.scala 126:20]
                when io.mmio.ENABLE_OUT : @[SA.scala 148:32]
                  node _stateReg_T_5 = eq(input_cnt, UInt<3>("h7")) @[SA.scala 149:35]
                  node _stateReg_T_6 = mux(_stateReg_T_5, UInt<3>("h6"), UInt<3>("h5")) @[SA.scala 149:24]
                  stateReg <= _stateReg_T_6 @[SA.scala 149:18]
                else :
                  stateReg <= UInt<3>("h1") @[SA.scala 151:20]
                  weight_cnt <= UInt<3>("h4") @[SA.scala 152:20]
              else :
                node _T_6 = eq(UInt<3>("h6"), stateReg) @[SA.scala 126:20]
                when _T_6 : @[SA.scala 126:20]
                  node _stateReg_T_7 = eq(output_cnt, UInt<2>("h3")) @[SA.scala 156:34]
                  node _stateReg_T_8 = mux(_stateReg_T_7, UInt<3>("h7"), UInt<3>("h6")) @[SA.scala 156:22]
                  stateReg <= _stateReg_T_8 @[SA.scala 156:16]
                else :
                  node _T_7 = eq(UInt<3>("h7"), stateReg) @[SA.scala 126:20]
                  when _T_7 : @[SA.scala 126:20]
                    stateReg <= UInt<3>("h1") @[SA.scala 159:16]
    node _T_8 = eq(stateReg, UInt<3>("h2")) @[SA.scala 164:17]
    node _T_9 = eq(stateReg, UInt<3>("h3")) @[SA.scala 164:42]
    node _T_10 = or(_T_8, _T_9) @[SA.scala 164:30]
    when _T_10 : @[SA.scala 164:56]
      node _weight_cnt_T_1 = sub(weight_cnt, UInt<1>("h1")) @[SA.scala 165:54]
      node _weight_cnt_T_2 = tail(_weight_cnt_T_1, 1) @[SA.scala 165:54]
      node _weight_cnt_T_3 = mux(io.mmio.ENABLE_OUT, _weight_cnt_T_2, UInt<3>("h4")) @[SA.scala 165:22]
      weight_cnt <= _weight_cnt_T_3 @[SA.scala 165:16]
    else :
      node _T_11 = eq(stateReg, UInt<3>("h4")) @[SA.scala 166:23]
      node _T_12 = eq(stateReg, UInt<3>("h5")) @[SA.scala 166:48]
      node _T_13 = or(_T_11, _T_12) @[SA.scala 166:36]
      when _T_13 : @[SA.scala 166:64]
        node _input_cnt_T = add(input_cnt, UInt<1>("h1")) @[SA.scala 167:52]
        node _input_cnt_T_1 = tail(_input_cnt_T, 1) @[SA.scala 167:52]
        node _input_cnt_T_2 = mux(io.mmio.ENABLE_OUT, _input_cnt_T_1, UInt<1>("h0")) @[SA.scala 167:21]
        input_cnt <= _input_cnt_T_2 @[SA.scala 167:15]
        node _T_14 = add(input_cnt, UInt<1>("h1")) @[SA.scala 168:20]
        node _T_15 = tail(_T_14, 1) @[SA.scala 168:20]
        node _T_16 = eq(_T_15, UInt<3>("h4")) @[SA.scala 168:26]
        when _T_16 : @[SA.scala 168:34]
          reading_accumulated <= UInt<1>("h1") @[SA.scala 169:27]
      else :
        node _T_17 = eq(stateReg, UInt<3>("h6")) @[SA.scala 171:23]
        when _T_17 : @[SA.scala 171:35]
          node _output_cnt_T = mux(output_buffer.io.output[0].valid, UInt<1>("h1"), UInt<1>("h0")) @[SA.scala 172:35]
          node _output_cnt_T_1 = add(output_cnt, _output_cnt_T) @[SA.scala 172:30]
          node _output_cnt_T_2 = tail(_output_cnt_T_1, 1) @[SA.scala 172:30]
          output_cnt <= _output_cnt_T_2 @[SA.scala 172:16]
        else :
          node _T_18 = eq(stateReg, UInt<3>("h7")) @[SA.scala 173:23]
          when _T_18 : @[SA.scala 173:36]
            weight_cnt <= UInt<3>("h4") @[SA.scala 175:16]
            input_cnt <= UInt<1>("h0") @[SA.scala 176:16]
            output_cnt <= UInt<1>("h0") @[SA.scala 177:16]
            read_accumulated <= UInt<1>("h0") @[SA.scala 178:22]
          else :
            skip
    when reading_accumulated : @[SA.scala 183:28]
      node _read_accumulated_T = add(read_accumulated, UInt<1>("h1")) @[SA.scala 184:42]
      node _read_accumulated_T_1 = tail(_read_accumulated_T, 1) @[SA.scala 184:42]
      read_accumulated <= _read_accumulated_T_1 @[SA.scala 184:22]
      node _T_19 = geq(read_accumulated, UInt<1>("h1")) @[SA.scala 185:27]
      when _T_19 : @[SA.scala 185:34]
        node _T_20 = sub(read_accumulated, UInt<1>("h1")) @[SA.scala 186:42]
        node _T_21 = tail(_T_20, 1) @[SA.scala 186:42]
        node _T_22 = bits(_T_21, 1, 0)
        accumulated_mat_C[_T_22] <= word_readData @[SA.scala 186:49]
      node _T_23 = add(read_accumulated, UInt<1>("h1")) @[SA.scala 188:27]
      node _T_24 = tail(_T_23, 1) @[SA.scala 188:27]
      node _T_25 = eq(_T_24, UInt<3>("h5")) @[SA.scala 188:33]
      when _T_25 : @[SA.scala 188:41]
        reading_accumulated <= UInt<1>("h0") @[SA.scala 189:27]

  module MMIO_Regfile :
    input clock : Clock
    input reset : Reset
    output io : { mmio : { ENABLE_OUT : UInt<1>, STATUS_OUT : UInt<1>, MATA_SIZE : UInt<32>, MATB_SIZE : UInt<32>, MATC_SIZE : UInt<32>, MATA_MEM_ADDR : UInt<32>, MATB_MEM_ADDR : UInt<32>, MATC_MEM_ADDR : UInt<32>, MAT_MEM_STRIDE : UInt<32>, MAT_BUF : UInt<32>, ENABLE_LOAD : UInt<32>, DONE_LOAD : UInt<32>, SRC_INFO : UInt<32>, DST_INFO : UInt<32>, SIZE_CFG_INFO : UInt<32>, flip WEN : UInt<1>, flip ENABLE_IN : UInt<1>, flip STATUS_IN : UInt<1>}, flip raddr : UInt<32>, rdata : UInt<32>, flip wen : UInt<1>, flip waddr : UInt<32>, flip wdata : UInt<32>, flip complete_write : UInt<1>}

    wire _RegFile_WIRE : UInt<32>[16] @[MMIO_Regfile.scala 78:32]
    _RegFile_WIRE[0] <= UInt<32>("h0") @[MMIO_Regfile.scala 78:32]
    _RegFile_WIRE[1] <= UInt<32>("h0") @[MMIO_Regfile.scala 78:32]
    _RegFile_WIRE[2] <= UInt<32>("h30003") @[MMIO_Regfile.scala 78:32]
    _RegFile_WIRE[3] <= UInt<32>("h30003") @[MMIO_Regfile.scala 78:32]
    _RegFile_WIRE[4] <= UInt<32>("h30003") @[MMIO_Regfile.scala 78:32]
    _RegFile_WIRE[5] <= UInt<32>("h0") @[MMIO_Regfile.scala 78:32]
    _RegFile_WIRE[6] <= UInt<32>("h10") @[MMIO_Regfile.scala 78:32]
    _RegFile_WIRE[7] <= UInt<32>("h20") @[MMIO_Regfile.scala 78:32]
    _RegFile_WIRE[8] <= UInt<32>("h10101") @[MMIO_Regfile.scala 78:32]
    _RegFile_WIRE[9] <= UInt<32>("h30") @[MMIO_Regfile.scala 78:32]
    _RegFile_WIRE[10] <= UInt<32>("h0") @[MMIO_Regfile.scala 78:32]
    _RegFile_WIRE[11] <= UInt<32>("h0") @[MMIO_Regfile.scala 78:32]
    _RegFile_WIRE[12] <= UInt<32>("h0") @[MMIO_Regfile.scala 78:32]
    _RegFile_WIRE[13] <= UInt<32>("h0") @[MMIO_Regfile.scala 78:32]
    _RegFile_WIRE[14] <= UInt<32>("h0") @[MMIO_Regfile.scala 78:32]
    _RegFile_WIRE[15] <= UInt<32>("h0") @[MMIO_Regfile.scala 78:32]
    reg RegFile : UInt<32>[16], clock with :
      reset => (reset, _RegFile_WIRE) @[MMIO_Regfile.scala 78:24]
    node _io_mmio_ENABLE_OUT_T = bits(RegFile[0], 0, 0) @[MMIO_Regfile.scala 82:47]
    node _io_mmio_ENABLE_OUT_T_1 = bits(_io_mmio_ENABLE_OUT_T, 0, 0) @[MMIO_Regfile.scala 82:51]
    reg io_mmio_ENABLE_OUT_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_mmio_ENABLE_OUT_REG) @[MMIO_Regfile.scala 82:36]
    io_mmio_ENABLE_OUT_REG <= _io_mmio_ENABLE_OUT_T_1 @[MMIO_Regfile.scala 82:36]
    io.mmio.ENABLE_OUT <= io_mmio_ENABLE_OUT_REG @[MMIO_Regfile.scala 82:26]
    node _io_mmio_STATUS_OUT_T = bits(RegFile[1], 0, 0) @[MMIO_Regfile.scala 83:47]
    node _io_mmio_STATUS_OUT_T_1 = bits(_io_mmio_STATUS_OUT_T, 0, 0) @[MMIO_Regfile.scala 83:51]
    reg io_mmio_STATUS_OUT_REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), io_mmio_STATUS_OUT_REG) @[MMIO_Regfile.scala 83:36]
    io_mmio_STATUS_OUT_REG <= _io_mmio_STATUS_OUT_T_1 @[MMIO_Regfile.scala 83:36]
    io.mmio.STATUS_OUT <= io_mmio_STATUS_OUT_REG @[MMIO_Regfile.scala 83:26]
    reg io_mmio_MATA_SIZE_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_mmio_MATA_SIZE_REG) @[MMIO_Regfile.scala 84:36]
    io_mmio_MATA_SIZE_REG <= RegFile[2] @[MMIO_Regfile.scala 84:36]
    io.mmio.MATA_SIZE <= io_mmio_MATA_SIZE_REG @[MMIO_Regfile.scala 84:26]
    reg io_mmio_MATB_SIZE_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_mmio_MATB_SIZE_REG) @[MMIO_Regfile.scala 85:36]
    io_mmio_MATB_SIZE_REG <= RegFile[3] @[MMIO_Regfile.scala 85:36]
    io.mmio.MATB_SIZE <= io_mmio_MATB_SIZE_REG @[MMIO_Regfile.scala 85:26]
    reg io_mmio_MATC_SIZE_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_mmio_MATC_SIZE_REG) @[MMIO_Regfile.scala 86:36]
    io_mmio_MATC_SIZE_REG <= RegFile[4] @[MMIO_Regfile.scala 86:36]
    io.mmio.MATC_SIZE <= io_mmio_MATC_SIZE_REG @[MMIO_Regfile.scala 86:26]
    reg io_mmio_MATA_MEM_ADDR_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_mmio_MATA_MEM_ADDR_REG) @[MMIO_Regfile.scala 87:36]
    io_mmio_MATA_MEM_ADDR_REG <= RegFile[5] @[MMIO_Regfile.scala 87:36]
    io.mmio.MATA_MEM_ADDR <= io_mmio_MATA_MEM_ADDR_REG @[MMIO_Regfile.scala 87:26]
    reg io_mmio_MATB_MEM_ADDR_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_mmio_MATB_MEM_ADDR_REG) @[MMIO_Regfile.scala 88:36]
    io_mmio_MATB_MEM_ADDR_REG <= RegFile[6] @[MMIO_Regfile.scala 88:36]
    io.mmio.MATB_MEM_ADDR <= io_mmio_MATB_MEM_ADDR_REG @[MMIO_Regfile.scala 88:26]
    reg io_mmio_MATC_MEM_ADDR_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_mmio_MATC_MEM_ADDR_REG) @[MMIO_Regfile.scala 89:36]
    io_mmio_MATC_MEM_ADDR_REG <= RegFile[7] @[MMIO_Regfile.scala 89:36]
    io.mmio.MATC_MEM_ADDR <= io_mmio_MATC_MEM_ADDR_REG @[MMIO_Regfile.scala 89:26]
    reg io_mmio_MAT_MEM_STRIDE_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_mmio_MAT_MEM_STRIDE_REG) @[MMIO_Regfile.scala 90:36]
    io_mmio_MAT_MEM_STRIDE_REG <= RegFile[8] @[MMIO_Regfile.scala 90:36]
    io.mmio.MAT_MEM_STRIDE <= io_mmio_MAT_MEM_STRIDE_REG @[MMIO_Regfile.scala 90:26]
    reg io_mmio_MAT_BUF_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_mmio_MAT_BUF_REG) @[MMIO_Regfile.scala 91:36]
    io_mmio_MAT_BUF_REG <= RegFile[9] @[MMIO_Regfile.scala 91:36]
    io.mmio.MAT_BUF <= io_mmio_MAT_BUF_REG @[MMIO_Regfile.scala 91:26]
    reg io_mmio_ENABLE_LOAD_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_mmio_ENABLE_LOAD_REG) @[MMIO_Regfile.scala 92:36]
    io_mmio_ENABLE_LOAD_REG <= RegFile[10] @[MMIO_Regfile.scala 92:36]
    io.mmio.ENABLE_LOAD <= io_mmio_ENABLE_LOAD_REG @[MMIO_Regfile.scala 92:26]
    reg io_mmio_SRC_INFO_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_mmio_SRC_INFO_REG) @[MMIO_Regfile.scala 93:36]
    io_mmio_SRC_INFO_REG <= RegFile[11] @[MMIO_Regfile.scala 93:36]
    io.mmio.SRC_INFO <= io_mmio_SRC_INFO_REG @[MMIO_Regfile.scala 93:26]
    reg io_mmio_DST_INFO_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_mmio_DST_INFO_REG) @[MMIO_Regfile.scala 94:36]
    io_mmio_DST_INFO_REG <= RegFile[12] @[MMIO_Regfile.scala 94:36]
    io.mmio.DST_INFO <= io_mmio_DST_INFO_REG @[MMIO_Regfile.scala 94:26]
    reg io_mmio_SIZE_CFG_INFO_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_mmio_SIZE_CFG_INFO_REG) @[MMIO_Regfile.scala 95:36]
    io_mmio_SIZE_CFG_INFO_REG <= RegFile[13] @[MMIO_Regfile.scala 95:36]
    io.mmio.SIZE_CFG_INFO <= io_mmio_SIZE_CFG_INFO_REG @[MMIO_Regfile.scala 95:26]
    reg io_mmio_DONE_LOAD_REG : UInt, clock with :
      reset => (UInt<1>("h0"), io_mmio_DONE_LOAD_REG) @[MMIO_Regfile.scala 96:36]
    io_mmio_DONE_LOAD_REG <= RegFile[15] @[MMIO_Regfile.scala 96:36]
    io.mmio.DONE_LOAD <= io_mmio_DONE_LOAD_REG @[MMIO_Regfile.scala 96:26]
    when io.mmio.WEN : @[MMIO_Regfile.scala 99:21]
      RegFile[1] <= io.mmio.STATUS_IN @[MMIO_Regfile.scala 100:16]
      RegFile[0] <= io.mmio.ENABLE_IN @[MMIO_Regfile.scala 101:16]
    io.rdata <= UInt<1>("h0") @[MMIO_Regfile.scala 106:12]
    node _T = lt(io.waddr, UInt<9>("h100")) @[MMIO_Regfile.scala 107:17]
    when _T : @[MMIO_Regfile.scala 107:28]
      node _io_rdata_T = bits(io.raddr, 3, 0)
      io.rdata <= RegFile[_io_rdata_T] @[MMIO_Regfile.scala 108:14]
    else :
      node _T_1 = sub(io.raddr, UInt<9>("h100")) @[MMIO_Regfile.scala 111:21]
      node _T_2 = tail(_T_1, 1) @[MMIO_Regfile.scala 111:21]
      node _T_3 = eq(UInt<1>("h0"), _T_2) @[MMIO_Regfile.scala 111:32]
      when _T_3 : @[MMIO_Regfile.scala 111:32]
        io.rdata <= RegFile[10] @[MMIO_Regfile.scala 113:18]
      else :
        node _T_4 = eq(UInt<3>("h4"), _T_2) @[MMIO_Regfile.scala 111:32]
        when _T_4 : @[MMIO_Regfile.scala 111:32]
          io.rdata <= RegFile[11] @[MMIO_Regfile.scala 116:18]
        else :
          node _T_5 = eq(UInt<4>("h8"), _T_2) @[MMIO_Regfile.scala 111:32]
          when _T_5 : @[MMIO_Regfile.scala 111:32]
            io.rdata <= RegFile[12] @[MMIO_Regfile.scala 119:18]
          else :
            node _T_6 = eq(UInt<4>("hc"), _T_2) @[MMIO_Regfile.scala 111:32]
            when _T_6 : @[MMIO_Regfile.scala 111:32]
              io.rdata <= RegFile[13] @[MMIO_Regfile.scala 122:18]
            else :
              node _T_7 = eq(UInt<5>("h10"), _T_2) @[MMIO_Regfile.scala 111:32]
              when _T_7 : @[MMIO_Regfile.scala 111:32]
                io.rdata <= RegFile[14] @[MMIO_Regfile.scala 125:18]
              else :
                node _T_8 = eq(UInt<5>("h14"), _T_2) @[MMIO_Regfile.scala 111:32]
                when _T_8 : @[MMIO_Regfile.scala 111:32]
                  io.rdata <= RegFile[15] @[MMIO_Regfile.scala 128:18]
    when io.wen : @[MMIO_Regfile.scala 132:16]
      node _T_9 = lt(io.waddr, UInt<9>("h100")) @[MMIO_Regfile.scala 133:19]
      when _T_9 : @[MMIO_Regfile.scala 133:30]
        node _T_10 = bits(io.waddr, 3, 0)
        RegFile[_T_10] <= io.wdata @[MMIO_Regfile.scala 134:25]
      else :
        node _T_11 = not(io.complete_write) @[MMIO_Regfile.scala 136:15]
        node _T_12 = geq(io.waddr, UInt<9>("h100")) @[MMIO_Regfile.scala 136:46]
        node _T_13 = and(_T_11, _T_12) @[MMIO_Regfile.scala 136:34]
        when _T_13 : @[MMIO_Regfile.scala 136:58]
          node _T_14 = sub(io.waddr, UInt<9>("h100")) @[MMIO_Regfile.scala 137:23]
          node _T_15 = tail(_T_14, 1) @[MMIO_Regfile.scala 137:23]
          node _T_16 = eq(UInt<1>("h0"), _T_15) @[MMIO_Regfile.scala 137:34]
          when _T_16 : @[MMIO_Regfile.scala 137:34]
            RegFile[10] <= io.wdata @[MMIO_Regfile.scala 139:23]
          else :
            node _T_17 = eq(UInt<3>("h4"), _T_15) @[MMIO_Regfile.scala 137:34]
            when _T_17 : @[MMIO_Regfile.scala 137:34]
              RegFile[11] <= io.wdata @[MMIO_Regfile.scala 142:23]
            else :
              node _T_18 = eq(UInt<4>("h8"), _T_15) @[MMIO_Regfile.scala 137:34]
              when _T_18 : @[MMIO_Regfile.scala 137:34]
                RegFile[12] <= io.wdata @[MMIO_Regfile.scala 145:23]
              else :
                node _T_19 = eq(UInt<4>("hc"), _T_15) @[MMIO_Regfile.scala 137:34]
                when _T_19 : @[MMIO_Regfile.scala 137:34]
                  RegFile[13] <= io.wdata @[MMIO_Regfile.scala 148:23]
                else :
                  node _T_20 = eq(UInt<5>("h10"), _T_15) @[MMIO_Regfile.scala 137:34]
                  when _T_20 : @[MMIO_Regfile.scala 137:34]
                    RegFile[14] <= io.wdata @[MMIO_Regfile.scala 151:23]
                  else :
                    node _T_21 = eq(UInt<5>("h14"), _T_15) @[MMIO_Regfile.scala 137:34]
                    when _T_21 : @[MMIO_Regfile.scala 137:34]
                      RegFile[15] <= io.wdata @[MMIO_Regfile.scala 154:23]
        else :
          when io.complete_write : @[MMIO_Regfile.scala 158:33]
            RegFile[10] <= UInt<1>("h0") @[MMIO_Regfile.scala 159:19]
            RegFile[15] <= UInt<1>("h1") @[MMIO_Regfile.scala 160:19]

  module LocalMem :
    input clock : Clock
    input reset : Reset
    output io : { flip raddr : UInt<32>, rdata : UInt<32>, flip wen : UInt<1>, flip waddr : UInt<32>, flip wdata : UInt<32>, flip wstrb : UInt<4>}

    smem localMem : UInt<32> [32768] @[LocalMem.scala 34:29]
    node _raddr_aligned_T = shr(io.raddr, 2) @[LocalMem.scala 40:44]
    wire raddr_aligned : UInt
    raddr_aligned <= _raddr_aligned_T
    node _waddr_aligned_T = shr(io.waddr, 2) @[LocalMem.scala 41:44]
    wire waddr_aligned : UInt
    waddr_aligned <= _waddr_aligned_T
    wire wdata_mask : UInt<8>[4] @[LocalMem.scala 42:27]
    wdata_mask[0] is invalid @[LocalMem.scala 44:14]
    wdata_mask[1] is invalid @[LocalMem.scala 44:14]
    wdata_mask[2] is invalid @[LocalMem.scala 44:14]
    wdata_mask[3] is invalid @[LocalMem.scala 44:14]
    wire _io_rdata_WIRE : UInt @[LocalMem.scala 47:28]
    _io_rdata_WIRE is invalid @[LocalMem.scala 47:28]
    when UInt<1>("h1") : @[LocalMem.scala 47:28]
      _io_rdata_WIRE <= raddr_aligned @[LocalMem.scala 47:28]
      node _io_rdata_T = or(_io_rdata_WIRE, UInt<15>("h0")) @[LocalMem.scala 47:28]
      node _io_rdata_T_1 = bits(_io_rdata_T, 14, 0) @[LocalMem.scala 47:28]
      read mport io_rdata_MPORT = localMem[_io_rdata_T_1], clock @[LocalMem.scala 47:28]
    io.rdata <= io_rdata_MPORT @[LocalMem.scala 47:12]
    when io.wen : @[LocalMem.scala 50:16]
      node _wdata_mask_0_T = bits(io.wstrb, 0, 0) @[LocalMem.scala 54:17]
      node _wdata_mask_0_T_1 = eq(_wdata_mask_0_T, UInt<1>("h1")) @[LocalMem.scala 54:25]
      node _wdata_mask_0_T_2 = bits(io.wdata, 7, 0) @[LocalMem.scala 55:17]
      node _wdata_mask_0_T_3 = mux(_wdata_mask_0_T_1, _wdata_mask_0_T_2, UInt<1>("h0")) @[LocalMem.scala 53:31]
      wdata_mask[0] <= _wdata_mask_0_T_3 @[LocalMem.scala 53:25]
      node _wdata_mask_1_T = bits(io.wstrb, 1, 1) @[LocalMem.scala 54:17]
      node _wdata_mask_1_T_1 = eq(_wdata_mask_1_T, UInt<1>("h1")) @[LocalMem.scala 54:25]
      node _wdata_mask_1_T_2 = bits(io.wdata, 15, 8) @[LocalMem.scala 55:17]
      node _wdata_mask_1_T_3 = mux(_wdata_mask_1_T_1, _wdata_mask_1_T_2, UInt<1>("h0")) @[LocalMem.scala 53:31]
      wdata_mask[1] <= _wdata_mask_1_T_3 @[LocalMem.scala 53:25]
      node _wdata_mask_2_T = bits(io.wstrb, 2, 2) @[LocalMem.scala 54:17]
      node _wdata_mask_2_T_1 = eq(_wdata_mask_2_T, UInt<1>("h1")) @[LocalMem.scala 54:25]
      node _wdata_mask_2_T_2 = bits(io.wdata, 23, 16) @[LocalMem.scala 55:17]
      node _wdata_mask_2_T_3 = mux(_wdata_mask_2_T_1, _wdata_mask_2_T_2, UInt<1>("h0")) @[LocalMem.scala 53:31]
      wdata_mask[2] <= _wdata_mask_2_T_3 @[LocalMem.scala 53:25]
      node _wdata_mask_3_T = bits(io.wstrb, 3, 3) @[LocalMem.scala 54:17]
      node _wdata_mask_3_T_1 = eq(_wdata_mask_3_T, UInt<1>("h1")) @[LocalMem.scala 54:25]
      node _wdata_mask_3_T_2 = bits(io.wdata, 31, 24) @[LocalMem.scala 55:17]
      node _wdata_mask_3_T_3 = mux(_wdata_mask_3_T_1, _wdata_mask_3_T_2, UInt<1>("h0")) @[LocalMem.scala 53:31]
      wdata_mask[3] <= _wdata_mask_3_T_3 @[LocalMem.scala 53:25]
      wire _WIRE : UInt<32> @[LocalMem.scala 60:54]
      node lo = cat(wdata_mask[1], wdata_mask[0]) @[LocalMem.scala 60:54]
      node hi = cat(wdata_mask[3], wdata_mask[2]) @[LocalMem.scala 60:54]
      node _T = cat(hi, lo) @[LocalMem.scala 60:54]
      _WIRE <= _T @[LocalMem.scala 60:54]
      node _T_1 = or(waddr_aligned, UInt<15>("h0"))
      node _T_2 = bits(_T_1, 14, 0)
      write mport MPORT = localMem[_T_2], clock
      MPORT <= _WIRE

  module Memory_Mapped :
    input clock : Clock
    input reset : Reset
    output io : { slave : { flip aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}, flip ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, tb_slave : { flip aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}, flip ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, flip tb_en : UInt<1>, master : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, mmio : { ENABLE_OUT : UInt<1>, STATUS_OUT : UInt<1>, MATA_SIZE : UInt<32>, MATB_SIZE : UInt<32>, MATC_SIZE : UInt<32>, MATA_MEM_ADDR : UInt<32>, MATB_MEM_ADDR : UInt<32>, MATC_MEM_ADDR : UInt<32>, MAT_MEM_STRIDE : UInt<32>, MAT_BUF : UInt<32>, ENABLE_LOAD : UInt<32>, DONE_LOAD : UInt<32>, SRC_INFO : UInt<32>, DST_INFO : UInt<32>, SIZE_CFG_INFO : UInt<32>, flip WEN : UInt<1>, flip ENABLE_IN : UInt<1>, flip STATUS_IN : UInt<1>}, flip raddr : UInt<32>, rdata : UInt<32>, flip wen : UInt<1>, flip waddr : UInt<32>, flip wdata : UInt<32>, flip wstrb : UInt<4>}

    inst rf of MMIO_Regfile @[Memory_Mapped.scala 42:18]
    rf.clock <= clock
    rf.reset <= reset
    inst lm of LocalMem @[Memory_Mapped.scala 43:18]
    lm.clock <= clock
    lm.reset <= reset
    io.slave.ar.ready <= UInt<1>("h0") @[Memory_Mapped.scala 50:23]
    io.slave.r.valid <= UInt<1>("h0") @[Memory_Mapped.scala 52:24]
    io.slave.r.bits.id <= UInt<1>("h0") @[Memory_Mapped.scala 53:24]
    io.slave.r.bits.data <= UInt<1>("h0") @[Memory_Mapped.scala 54:24]
    io.slave.r.bits.resp <= UInt<1>("h0") @[Memory_Mapped.scala 55:24]
    io.slave.r.bits.last <= UInt<1>("h1") @[Memory_Mapped.scala 56:24]
    io.slave.aw.ready <= UInt<1>("h0") @[Memory_Mapped.scala 60:21]
    io.slave.w.ready <= UInt<1>("h0") @[Memory_Mapped.scala 62:20]
    io.slave.b.valid <= UInt<1>("h0") @[Memory_Mapped.scala 64:24]
    io.slave.b.bits.id <= UInt<1>("h0") @[Memory_Mapped.scala 65:24]
    io.slave.b.bits.resp <= UInt<1>("h0") @[Memory_Mapped.scala 66:24]
    rf.io.mmio.STATUS_IN <= io.mmio.STATUS_IN @[Memory_Mapped.scala 69:14]
    rf.io.mmio.ENABLE_IN <= io.mmio.ENABLE_IN @[Memory_Mapped.scala 69:14]
    rf.io.mmio.WEN <= io.mmio.WEN @[Memory_Mapped.scala 69:14]
    io.mmio.SIZE_CFG_INFO <= rf.io.mmio.SIZE_CFG_INFO @[Memory_Mapped.scala 69:14]
    io.mmio.DST_INFO <= rf.io.mmio.DST_INFO @[Memory_Mapped.scala 69:14]
    io.mmio.SRC_INFO <= rf.io.mmio.SRC_INFO @[Memory_Mapped.scala 69:14]
    io.mmio.DONE_LOAD <= rf.io.mmio.DONE_LOAD @[Memory_Mapped.scala 69:14]
    io.mmio.ENABLE_LOAD <= rf.io.mmio.ENABLE_LOAD @[Memory_Mapped.scala 69:14]
    io.mmio.MAT_BUF <= rf.io.mmio.MAT_BUF @[Memory_Mapped.scala 69:14]
    io.mmio.MAT_MEM_STRIDE <= rf.io.mmio.MAT_MEM_STRIDE @[Memory_Mapped.scala 69:14]
    io.mmio.MATC_MEM_ADDR <= rf.io.mmio.MATC_MEM_ADDR @[Memory_Mapped.scala 69:14]
    io.mmio.MATB_MEM_ADDR <= rf.io.mmio.MATB_MEM_ADDR @[Memory_Mapped.scala 69:14]
    io.mmio.MATA_MEM_ADDR <= rf.io.mmio.MATA_MEM_ADDR @[Memory_Mapped.scala 69:14]
    io.mmio.MATC_SIZE <= rf.io.mmio.MATC_SIZE @[Memory_Mapped.scala 69:14]
    io.mmio.MATB_SIZE <= rf.io.mmio.MATB_SIZE @[Memory_Mapped.scala 69:14]
    io.mmio.MATA_SIZE <= rf.io.mmio.MATA_SIZE @[Memory_Mapped.scala 69:14]
    io.mmio.STATUS_OUT <= rf.io.mmio.STATUS_OUT @[Memory_Mapped.scala 69:14]
    io.mmio.ENABLE_OUT <= rf.io.mmio.ENABLE_OUT @[Memory_Mapped.scala 69:14]
    rf.io.raddr <= UInt<1>("h0") @[Memory_Mapped.scala 70:15]
    rf.io.waddr <= UInt<1>("h0") @[Memory_Mapped.scala 71:15]
    rf.io.wdata <= UInt<1>("h0") @[Memory_Mapped.scala 72:15]
    rf.io.wen <= UInt<1>("h0") @[Memory_Mapped.scala 73:15]
    rf.io.complete_write <= UInt<1>("h0") @[Memory_Mapped.scala 74:24]
    lm.io.raddr <= UInt<1>("h0") @[Memory_Mapped.scala 77:15]
    lm.io.waddr <= UInt<1>("h0") @[Memory_Mapped.scala 78:15]
    lm.io.wdata <= UInt<1>("h0") @[Memory_Mapped.scala 79:15]
    lm.io.wstrb <= UInt<1>("h0") @[Memory_Mapped.scala 80:15]
    lm.io.wen <= UInt<1>("h0") @[Memory_Mapped.scala 81:15]
    io.rdata <= UInt<1>("h0") @[Memory_Mapped.scala 84:12]
    reg RAReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Memory_Mapped.scala 87:27]
    reg RAReadyReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Memory_Mapped.scala 88:27]
    reg RDReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Memory_Mapped.scala 89:27]
    reg RRReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Memory_Mapped.scala 90:27]
    reg RDValidReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Memory_Mapped.scala 91:27]
    node _canDoRead_T = eq(RAReadyReg, UInt<1>("h0")) @[Memory_Mapped.scala 95:52]
    node _canDoRead_T_1 = and(io.slave.ar.valid, _canDoRead_T) @[Memory_Mapped.scala 95:49]
    wire canDoRead : UInt<1>
    canDoRead <= _canDoRead_T_1
    node _DoRead_T = and(io.slave.ar.valid, io.slave.ar.ready) @[Memory_Mapped.scala 97:42]
    node _DoRead_T_1 = eq(RDValidReg, UInt<1>("h0")) @[Memory_Mapped.scala 97:66]
    node _DoRead_T_2 = and(_DoRead_T, _DoRead_T_1) @[Memory_Mapped.scala 97:63]
    reg DoRead : UInt<1>, clock with :
      reset => (UInt<1>("h0"), DoRead) @[Memory_Mapped.scala 97:23]
    DoRead <= _DoRead_T_2 @[Memory_Mapped.scala 97:23]
    reg WAReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Memory_Mapped.scala 101:27]
    reg WAReadyReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Memory_Mapped.scala 102:27]
    reg WDReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Memory_Mapped.scala 103:27]
    reg WSReg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[Memory_Mapped.scala 104:27]
    reg WDReadyReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Memory_Mapped.scala 105:27]
    reg WRValidReg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Memory_Mapped.scala 106:27]
    node _canDoWrite_T = eq(WAReadyReg, UInt<1>("h0")) @[Memory_Mapped.scala 111:27]
    node _canDoWrite_T_1 = and(io.slave.aw.valid, _canDoWrite_T) @[Memory_Mapped.scala 111:24]
    node _canDoWrite_T_2 = eq(WDReadyReg, UInt<1>("h0")) @[Memory_Mapped.scala 112:28]
    node _canDoWrite_T_3 = and(io.slave.w.valid, _canDoWrite_T_2) @[Memory_Mapped.scala 112:25]
    node _canDoWrite_T_4 = and(_canDoWrite_T_1, _canDoWrite_T_3) @[Memory_Mapped.scala 111:40]
    wire canDoWrite : UInt<1>
    canDoWrite <= _canDoWrite_T_4
    node _DoWrite_T = and(io.slave.aw.valid, io.slave.aw.ready) @[Memory_Mapped.scala 117:24]
    node _DoWrite_T_1 = and(io.slave.w.valid, io.slave.w.ready) @[Memory_Mapped.scala 118:25]
    node _DoWrite_T_2 = and(_DoWrite_T, _DoWrite_T_1) @[Memory_Mapped.scala 117:46]
    wire DoWrite : UInt<1>
    DoWrite <= _DoWrite_T_2
    node _T = eq(io.mmio.ENABLE_OUT, UInt<1>("h0")) @[Memory_Mapped.scala 129:8]
    when _T : @[Memory_Mapped.scala 129:29]
      RAReadyReg <= canDoRead @[Memory_Mapped.scala 131:29]
      io.slave.ar.ready <= RAReadyReg @[Memory_Mapped.scala 132:29]
      node _RAReg_T = mux(canDoRead, io.slave.ar.bits.addr, RAReg) @[Memory_Mapped.scala 133:35]
      RAReg <= _RAReg_T @[Memory_Mapped.scala 133:29]
      node _T_1 = sub(RAReg, UInt<21>("h100000")) @[Memory_Mapped.scala 136:17]
      node _T_2 = tail(_T_1, 1) @[Memory_Mapped.scala 136:17]
      node _T_3 = lt(_T_2, UInt<9>("h100")) @[Memory_Mapped.scala 136:52]
      when _T_3 : @[Memory_Mapped.scala 136:63]
        node _rf_io_raddr_T = leq(UInt<21>("h100000"), RAReg) @[Memory_Mapped.scala 138:42]
        node _rf_io_raddr_T_1 = lt(RAReg, UInt<22>("h200000")) @[Memory_Mapped.scala 138:60]
        node _rf_io_raddr_T_2 = and(_rf_io_raddr_T, _rf_io_raddr_T_1) @[Memory_Mapped.scala 138:51]
        node _rf_io_raddr_T_3 = sub(RAReg, UInt<21>("h100000")) @[Memory_Mapped.scala 139:16]
        node _rf_io_raddr_T_4 = tail(_rf_io_raddr_T_3, 1) @[Memory_Mapped.scala 139:16]
        node _rf_io_raddr_T_5 = shr(_rf_io_raddr_T_4, 2) @[Memory_Mapped.scala 139:51]
        node _rf_io_raddr_T_6 = mux(_rf_io_raddr_T_2, _rf_io_raddr_T_5, UInt<1>("h0")) @[Memory_Mapped.scala 137:25]
        rf.io.raddr <= _rf_io_raddr_T_6 @[Memory_Mapped.scala 137:19]
      else :
        node _rf_io_raddr_T_7 = sub(RAReg, UInt<21>("h100000")) @[Memory_Mapped.scala 144:28]
        node _rf_io_raddr_T_8 = tail(_rf_io_raddr_T_7, 1) @[Memory_Mapped.scala 144:28]
        rf.io.raddr <= _rf_io_raddr_T_8 @[Memory_Mapped.scala 144:19]
      node _lm_io_raddr_T = leq(UInt<22>("h200000"), RAReg) @[Memory_Mapped.scala 147:57]
      node _lm_io_raddr_T_1 = sub(RAReg, UInt<22>("h200000")) @[Memory_Mapped.scala 147:75]
      node _lm_io_raddr_T_2 = tail(_lm_io_raddr_T_1, 1) @[Memory_Mapped.scala 147:75]
      node _lm_io_raddr_T_3 = mux(_lm_io_raddr_T, _lm_io_raddr_T_2, UInt<1>("h0")) @[Memory_Mapped.scala 147:23]
      lm.io.raddr <= _lm_io_raddr_T_3 @[Memory_Mapped.scala 147:17]
      RDValidReg <= DoRead @[Memory_Mapped.scala 150:16]
      io.slave.r.valid <= RDValidReg @[Memory_Mapped.scala 153:26]
      io.slave.r.bits.data <= RDReg @[Memory_Mapped.scala 154:26]
      io.slave.r.bits.resp <= UInt<1>("h0") @[Memory_Mapped.scala 155:26]
      node _T_4 = lt(RAReg, UInt<22>("h200000")) @[Memory_Mapped.scala 157:16]
      when _T_4 : @[Memory_Mapped.scala 157:51]
        node _RDReg_T = cat(UInt<32>("h0"), rf.io.rdata) @[Cat.scala 33:92]
        node _RDReg_T_1 = mux(DoRead, _RDReg_T, UInt<1>("h0")) @[Memory_Mapped.scala 158:19]
        RDReg <= _RDReg_T_1 @[Memory_Mapped.scala 158:13]
      else :
        node _RDReg_T_2 = mux(DoRead, lm.io.rdata, UInt<1>("h0")) @[Memory_Mapped.scala 160:19]
        RDReg <= _RDReg_T_2 @[Memory_Mapped.scala 160:13]
      WAReadyReg <= canDoWrite @[Memory_Mapped.scala 164:16]
      WDReadyReg <= canDoWrite @[Memory_Mapped.scala 165:16]
      io.slave.aw.ready <= WAReadyReg @[Memory_Mapped.scala 167:23]
      io.slave.w.ready <= WDReadyReg @[Memory_Mapped.scala 168:23]
      node _WAReg_T = mux(canDoWrite, io.slave.aw.bits.addr, UInt<1>("h0")) @[Memory_Mapped.scala 170:17]
      WAReg <= _WAReg_T @[Memory_Mapped.scala 170:11]
      node _WDReg_T = mux(canDoWrite, io.slave.w.bits.data, UInt<1>("h0")) @[Memory_Mapped.scala 171:17]
      WDReg <= _WDReg_T @[Memory_Mapped.scala 171:11]
      node _WSReg_T = mux(canDoWrite, io.slave.w.bits.strb, UInt<1>("h0")) @[Memory_Mapped.scala 172:17]
      WSReg <= _WSReg_T @[Memory_Mapped.scala 172:11]
      when DoWrite : @[Memory_Mapped.scala 174:19]
        node _T_5 = lt(io.slave.aw.bits.addr, UInt<22>("h200000")) @[Memory_Mapped.scala 175:34]
        node _T_6 = sub(io.slave.aw.bits.addr, UInt<21>("h100000")) @[Memory_Mapped.scala 175:94]
        node _T_7 = tail(_T_6, 1) @[Memory_Mapped.scala 175:94]
        node _T_8 = lt(_T_7, UInt<9>("h100")) @[Memory_Mapped.scala 175:129]
        node _T_9 = and(_T_5, _T_8) @[Memory_Mapped.scala 175:68]
        when _T_9 : @[Memory_Mapped.scala 175:140]
          node _rf_io_waddr_T = sub(WAReg, UInt<21>("h100000")) @[Memory_Mapped.scala 176:31]
          node _rf_io_waddr_T_1 = tail(_rf_io_waddr_T, 1) @[Memory_Mapped.scala 176:31]
          node _rf_io_waddr_T_2 = shr(_rf_io_waddr_T_1, 2) @[Memory_Mapped.scala 176:66]
          rf.io.waddr <= _rf_io_waddr_T_2 @[Memory_Mapped.scala 176:21]
        else :
          node _rf_io_waddr_T_3 = sub(WAReg, UInt<21>("h100000")) @[Memory_Mapped.scala 179:30]
          node _rf_io_waddr_T_4 = tail(_rf_io_waddr_T_3, 1) @[Memory_Mapped.scala 179:30]
          rf.io.waddr <= _rf_io_waddr_T_4 @[Memory_Mapped.scala 179:21]
        node _lm_io_waddr_T = sub(WAReg, UInt<22>("h200000")) @[Memory_Mapped.scala 181:28]
        node _lm_io_waddr_T_1 = tail(_lm_io_waddr_T, 1) @[Memory_Mapped.scala 181:28]
        lm.io.waddr <= _lm_io_waddr_T_1 @[Memory_Mapped.scala 181:19]
        node _rf_io_wdata_T = bits(WDReg, 31, 0) @[Memory_Mapped.scala 183:27]
        rf.io.wdata <= _rf_io_wdata_T @[Memory_Mapped.scala 183:19]
        node _lm_io_wdata_T = bits(WDReg, 31, 0) @[Memory_Mapped.scala 184:27]
        lm.io.wdata <= _lm_io_wdata_T @[Memory_Mapped.scala 184:19]
        lm.io.wstrb <= WSReg @[Memory_Mapped.scala 186:19]
        node _rf_io_wen_T = lt(io.slave.aw.bits.addr, UInt<22>("h200000")) @[Memory_Mapped.scala 188:46]
        node _rf_io_wen_T_1 = mux(_rf_io_wen_T, UInt<1>("h1"), UInt<1>("h0")) @[Memory_Mapped.scala 188:23]
        rf.io.wen <= _rf_io_wen_T_1 @[Memory_Mapped.scala 188:17]
        node _lm_io_wen_T = lt(io.slave.aw.bits.addr, UInt<22>("h200000")) @[Memory_Mapped.scala 189:46]
        node _lm_io_wen_T_1 = mux(_lm_io_wen_T, UInt<1>("h0"), UInt<1>("h1")) @[Memory_Mapped.scala 189:23]
        lm.io.wen <= _lm_io_wen_T_1 @[Memory_Mapped.scala 189:17]
      node _WRValidReg_T = eq(WRValidReg, UInt<1>("h0")) @[Memory_Mapped.scala 192:44]
      node _WRValidReg_T_1 = and(DoWrite, _WRValidReg_T) @[Memory_Mapped.scala 192:41]
      WRValidReg <= _WRValidReg_T_1 @[Memory_Mapped.scala 192:30]
      io.slave.b.valid <= WRValidReg @[Memory_Mapped.scala 193:30]
    else :
      RAReg <= UInt<1>("h0") @[Memory_Mapped.scala 197:16]
      RAReadyReg <= UInt<1>("h0") @[Memory_Mapped.scala 198:16]
      RDReg <= UInt<1>("h0") @[Memory_Mapped.scala 199:16]
      RDValidReg <= UInt<1>("h0") @[Memory_Mapped.scala 200:16]
      WAReg <= UInt<1>("h0") @[Memory_Mapped.scala 201:16]
      WAReadyReg <= UInt<1>("h0") @[Memory_Mapped.scala 202:16]
      WDReg <= UInt<1>("h0") @[Memory_Mapped.scala 203:16]
      WDReadyReg <= UInt<1>("h0") @[Memory_Mapped.scala 204:16]
      WRValidReg <= UInt<1>("h0") @[Memory_Mapped.scala 205:16]
      lm.io.raddr <= io.raddr @[Memory_Mapped.scala 208:17]
      io.rdata <= lm.io.rdata @[Memory_Mapped.scala 209:17]
      lm.io.waddr <= io.waddr @[Memory_Mapped.scala 212:17]
      lm.io.wdata <= io.wdata @[Memory_Mapped.scala 213:17]
      lm.io.wstrb <= io.wstrb @[Memory_Mapped.scala 214:17]
      lm.io.wen <= io.wen @[Memory_Mapped.scala 215:17]
      rf.io.mmio.WEN <= io.mmio.WEN @[Memory_Mapped.scala 218:26]
      rf.io.mmio.ENABLE_IN <= io.mmio.ENABLE_IN @[Memory_Mapped.scala 219:26]
      rf.io.mmio.STATUS_IN <= io.mmio.STATUS_IN @[Memory_Mapped.scala 220:26]
    io.tb_slave.ar.ready <= UInt<1>("h0") @[Memory_Mapped.scala 224:24]
    io.tb_slave.r.valid <= io.tb_en @[Memory_Mapped.scala 225:23]
    io.tb_slave.r.bits.resp <= UInt<1>("h0") @[Memory_Mapped.scala 226:27]
    io.tb_slave.r.bits.id <= UInt<1>("h0") @[Memory_Mapped.scala 227:25]
    io.tb_slave.r.bits.last <= UInt<1>("h1") @[Memory_Mapped.scala 228:27]
    io.tb_slave.r.bits.data <= UInt<1>("h0") @[Memory_Mapped.scala 229:27]
    io.tb_slave.aw.ready <= UInt<1>("h0") @[Memory_Mapped.scala 230:24]
    io.tb_slave.w.ready <= UInt<1>("h0") @[Memory_Mapped.scala 231:23]
    io.tb_slave.b.valid <= UInt<1>("h0") @[Memory_Mapped.scala 232:23]
    io.tb_slave.b.bits.resp <= UInt<1>("h0") @[Memory_Mapped.scala 233:27]
    io.tb_slave.b.bits.id <= UInt<1>("h0") @[Memory_Mapped.scala 234:25]
    when io.tb_en : @[Memory_Mapped.scala 236:17]
      io.tb_slave.ar.ready <= UInt<1>("h1") @[Memory_Mapped.scala 237:26]
      lm.io.raddr <= io.tb_slave.ar.bits.addr @[Memory_Mapped.scala 238:17]
      io.tb_slave.r.bits.data <= lm.io.rdata @[Memory_Mapped.scala 239:29]
    reg mState : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[Memory_Mapped.scala 245:24]
    reg mWriteAddrSent : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Memory_Mapped.scala 246:31]
    reg mWriteDataSent : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[Memory_Mapped.scala 247:31]
    wire _mmio_regs_WIRE : UInt<32>[6] @[Memory_Mapped.scala 249:42]
    _mmio_regs_WIRE[0] <= UInt<32>("h0") @[Memory_Mapped.scala 249:42]
    _mmio_regs_WIRE[1] <= UInt<32>("h0") @[Memory_Mapped.scala 249:42]
    _mmio_regs_WIRE[2] <= UInt<32>("h0") @[Memory_Mapped.scala 249:42]
    _mmio_regs_WIRE[3] <= UInt<32>("h0") @[Memory_Mapped.scala 249:42]
    _mmio_regs_WIRE[4] <= UInt<32>("h0") @[Memory_Mapped.scala 249:42]
    _mmio_regs_WIRE[5] <= UInt<32>("h0") @[Memory_Mapped.scala 249:42]
    reg mmio_regs : UInt<32>[6], clock with :
      reset => (reset, _mmio_regs_WIRE) @[Memory_Mapped.scala 249:34]
    reg data_buffer : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Memory_Mapped.scala 256:28]
    wire rData_mask : UInt<4>
    rData_mask <= UInt<4>("h0")
    wire mask_width : UInt<4>
    mask_width <= UInt<4>("h0")
    reg source_offset : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Memory_Mapped.scala 259:30]
    wire _rData_WIRE : UInt<8>[4] @[Memory_Mapped.scala 260:35]
    _rData_WIRE[0] <= UInt<8>("h0") @[Memory_Mapped.scala 260:35]
    _rData_WIRE[1] <= UInt<8>("h0") @[Memory_Mapped.scala 260:35]
    _rData_WIRE[2] <= UInt<8>("h0") @[Memory_Mapped.scala 260:35]
    _rData_WIRE[3] <= UInt<8>("h0") @[Memory_Mapped.scala 260:35]
    wire rData : UInt<8>[4]
    rData <= _rData_WIRE
    node _dest_offset_T = bits(io.master.aw.bits.addr, 1, 0) @[Memory_Mapped.scala 261:55]
    wire dest_offset : UInt
    dest_offset <= _dest_offset_T
    reg request_counter : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[Memory_Mapped.scala 264:32]
    node _io_master_aw_valid_T = eq(mState, UInt<3>("h3")) @[Memory_Mapped.scala 266:38]
    node _io_master_aw_valid_T_1 = eq(mWriteAddrSent, UInt<1>("h0")) @[Memory_Mapped.scala 266:56]
    node _io_master_aw_valid_T_2 = and(_io_master_aw_valid_T, _io_master_aw_valid_T_1) @[Memory_Mapped.scala 266:53]
    io.master.aw.valid <= _io_master_aw_valid_T_2 @[Memory_Mapped.scala 266:28]
    io.master.aw.bits.addr <= UInt<1>("h0") @[Memory_Mapped.scala 267:28]
    io.master.aw.bits.burst <= UInt<1>("h0") @[Memory_Mapped.scala 268:28]
    io.master.aw.bits.len <= UInt<1>("h0") @[Memory_Mapped.scala 269:28]
    io.master.aw.bits.size <= UInt<2>("h2") @[Memory_Mapped.scala 270:28]
    io.master.aw.bits.cache <= UInt<1>("h0") @[Memory_Mapped.scala 271:28]
    io.master.aw.bits.id <= UInt<1>("h0") @[Memory_Mapped.scala 272:28]
    io.master.aw.bits.prot <= UInt<1>("h0") @[Memory_Mapped.scala 273:28]
    io.master.aw.bits.lock <= UInt<1>("h0") @[Memory_Mapped.scala 274:28]
    io.master.aw.bits.qos <= UInt<1>("h0") @[Memory_Mapped.scala 275:28]
    io.master.aw.bits.region <= UInt<1>("h0") @[Memory_Mapped.scala 276:28]
    node _io_master_ar_valid_T = eq(mState, UInt<3>("h1")) @[Memory_Mapped.scala 278:38]
    io.master.ar.valid <= _io_master_ar_valid_T @[Memory_Mapped.scala 278:28]
    io.master.ar.bits.addr <= UInt<1>("h0") @[Memory_Mapped.scala 279:28]
    io.master.ar.bits.burst <= UInt<1>("h0") @[Memory_Mapped.scala 280:28]
    io.master.ar.bits.len <= UInt<1>("h0") @[Memory_Mapped.scala 281:28]
    io.master.ar.bits.size <= UInt<2>("h2") @[Memory_Mapped.scala 282:28]
    io.master.ar.bits.cache <= UInt<1>("h0") @[Memory_Mapped.scala 283:28]
    io.master.ar.bits.id <= UInt<1>("h0") @[Memory_Mapped.scala 284:28]
    io.master.ar.bits.prot <= UInt<1>("h0") @[Memory_Mapped.scala 285:28]
    io.master.ar.bits.lock <= UInt<1>("h0") @[Memory_Mapped.scala 286:28]
    io.master.ar.bits.qos <= UInt<1>("h0") @[Memory_Mapped.scala 287:28]
    io.master.ar.bits.region <= UInt<1>("h0") @[Memory_Mapped.scala 288:28]
    node _io_master_w_valid_T = eq(mState, UInt<3>("h3")) @[Memory_Mapped.scala 290:35]
    node _io_master_w_valid_T_1 = eq(mWriteDataSent, UInt<1>("h0")) @[Memory_Mapped.scala 290:53]
    node _io_master_w_valid_T_2 = and(_io_master_w_valid_T, _io_master_w_valid_T_1) @[Memory_Mapped.scala 290:50]
    io.master.w.valid <= _io_master_w_valid_T_2 @[Memory_Mapped.scala 290:25]
    io.master.w.bits.data <= data_buffer @[Memory_Mapped.scala 291:25]
    io.master.w.bits.strb <= UInt<4>("hf") @[Memory_Mapped.scala 292:25]
    io.master.w.bits.last <= UInt<1>("h1") @[Memory_Mapped.scala 293:25]
    node _io_master_r_ready_T = eq(mState, UInt<3>("h2")) @[Memory_Mapped.scala 295:31]
    io.master.r.ready <= _io_master_r_ready_T @[Memory_Mapped.scala 295:21]
    node _io_master_b_ready_T = eq(mState, UInt<3>("h4")) @[Memory_Mapped.scala 297:31]
    io.master.b.ready <= _io_master_b_ready_T @[Memory_Mapped.scala 297:21]
    node _T_10 = eq(UInt<3>("h0"), mState) @[Memory_Mapped.scala 298:18]
    when _T_10 : @[Memory_Mapped.scala 298:18]
      node _T_11 = eq(io.mmio.ENABLE_LOAD, UInt<1>("h1")) @[Memory_Mapped.scala 300:24]
      when _T_11 : @[Memory_Mapped.scala 300:33]
        mState <= UInt<3>("h1") @[Memory_Mapped.scala 301:16]
    else :
      node _T_12 = eq(UInt<3>("h1"), mState) @[Memory_Mapped.scala 298:18]
      when _T_12 : @[Memory_Mapped.scala 298:18]
        when io.master.ar.ready : @[Memory_Mapped.scala 305:32]
          mState <= UInt<3>("h2") @[Memory_Mapped.scala 306:16]
      else :
        node _T_13 = eq(UInt<3>("h2"), mState) @[Memory_Mapped.scala 298:18]
        when _T_13 : @[Memory_Mapped.scala 298:18]
          when io.master.r.valid : @[Memory_Mapped.scala 310:31]
            mState <= UInt<3>("h3") @[Memory_Mapped.scala 311:16]
        else :
          node _T_14 = eq(UInt<3>("h3"), mState) @[Memory_Mapped.scala 298:18]
          when _T_14 : @[Memory_Mapped.scala 298:18]
            node _T_15 = and(mWriteAddrSent, mWriteDataSent) @[Memory_Mapped.scala 315:27]
            when _T_15 : @[Memory_Mapped.scala 315:46]
              mState <= UInt<3>("h4") @[Memory_Mapped.scala 316:16]
          else :
            node _T_16 = eq(UInt<3>("h4"), mState) @[Memory_Mapped.scala 298:18]
            when _T_16 : @[Memory_Mapped.scala 298:18]
              when io.master.b.valid : @[Memory_Mapped.scala 320:31]
                mState <= UInt<3>("h0") @[Memory_Mapped.scala 321:16]
    node _T_17 = eq(mState, UInt<3>("h3")) @[Memory_Mapped.scala 326:15]
    when _T_17 : @[Memory_Mapped.scala 326:31]
      node _T_18 = and(io.master.aw.ready, io.master.aw.valid) @[Decoupled.scala 52:35]
      when _T_18 : @[Memory_Mapped.scala 327:29]
        node _request_counter_T = add(request_counter, UInt<1>("h1")) @[Memory_Mapped.scala 328:42]
        node _request_counter_T_1 = tail(_request_counter_T, 1) @[Memory_Mapped.scala 328:42]
        request_counter <= _request_counter_T_1 @[Memory_Mapped.scala 328:23]
    node _T_19 = eq(mState, UInt<3>("h1")) @[Memory_Mapped.scala 332:15]
    when _T_19 : @[Memory_Mapped.scala 332:30]
      node _io_master_ar_bits_addr_T = bits(io.mmio.SIZE_CFG_INFO, 31, 24) @[Memory_Mapped.scala 333:82]
      node _io_master_ar_bits_addr_T_1 = mul(request_counter, _io_master_ar_bits_addr_T) @[Memory_Mapped.scala 333:67]
      node _io_master_ar_bits_addr_T_2 = add(io.mmio.SRC_INFO, _io_master_ar_bits_addr_T_1) @[Memory_Mapped.scala 333:48]
      node _io_master_ar_bits_addr_T_3 = tail(_io_master_ar_bits_addr_T_2, 1) @[Memory_Mapped.scala 333:48]
      io.master.ar.bits.addr <= _io_master_ar_bits_addr_T_3 @[Memory_Mapped.scala 333:28]
      node _source_offset_T = bits(io.master.ar.bits.addr, 1, 0) @[Memory_Mapped.scala 334:44]
      source_offset <= _source_offset_T @[Memory_Mapped.scala 334:19]
    node _T_20 = eq(mState, UInt<3>("h3")) @[Memory_Mapped.scala 337:15]
    when _T_20 : @[Memory_Mapped.scala 337:31]
      node _io_master_aw_bits_addr_T = bits(io.mmio.SIZE_CFG_INFO, 23, 16) @[Memory_Mapped.scala 338:80]
      node _io_master_aw_bits_addr_T_1 = mul(request_counter, _io_master_aw_bits_addr_T) @[Memory_Mapped.scala 338:65]
      node _io_master_aw_bits_addr_T_2 = add(io.mmio.DST_INFO, _io_master_aw_bits_addr_T_1) @[Memory_Mapped.scala 338:46]
      node _io_master_aw_bits_addr_T_3 = tail(_io_master_aw_bits_addr_T_2, 1) @[Memory_Mapped.scala 338:46]
      io.master.aw.bits.addr <= _io_master_aw_bits_addr_T_3 @[Memory_Mapped.scala 338:28]
      node _mask_width_T = bits(io.mmio.SIZE_CFG_INFO, 15, 8) @[Memory_Mapped.scala 339:42]
      node _mask_width_T_1 = eq(UInt<1>("h1"), _mask_width_T) @[Mux.scala 81:61]
      node _mask_width_T_2 = mux(_mask_width_T_1, UInt<1>("h1"), UInt<4>("hf")) @[Mux.scala 81:58]
      node _mask_width_T_3 = eq(UInt<2>("h2"), _mask_width_T) @[Mux.scala 81:61]
      node _mask_width_T_4 = mux(_mask_width_T_3, UInt<2>("h3"), _mask_width_T_2) @[Mux.scala 81:58]
      node _mask_width_T_5 = eq(UInt<2>("h3"), _mask_width_T) @[Mux.scala 81:61]
      node _mask_width_T_6 = mux(_mask_width_T_5, UInt<3>("h7"), _mask_width_T_4) @[Mux.scala 81:58]
      node _mask_width_T_7 = eq(UInt<3>("h4"), _mask_width_T) @[Mux.scala 81:61]
      node _mask_width_T_8 = mux(_mask_width_T_7, UInt<4>("hf"), _mask_width_T_6) @[Mux.scala 81:58]
      mask_width <= _mask_width_T_8 @[Memory_Mapped.scala 339:16]
      node _io_master_w_bits_strb_T = dshl(mask_width, dest_offset) @[Memory_Mapped.scala 345:41]
      io.master.w.bits.strb <= _io_master_w_bits_strb_T @[Memory_Mapped.scala 345:27]
      node _io_master_w_bits_data_T = dshl(dest_offset, UInt<2>("h3")) @[Memory_Mapped.scala 346:58]
      node _io_master_w_bits_data_T_1 = dshl(data_buffer, _io_master_w_bits_data_T) @[Memory_Mapped.scala 346:42]
      io.master.w.bits.data <= _io_master_w_bits_data_T_1 @[Memory_Mapped.scala 346:27]
    node _T_21 = eq(mState, UInt<3>("h2")) @[Memory_Mapped.scala 350:15]
    node _T_22 = and(_T_21, io.master.r.valid) @[Memory_Mapped.scala 350:29]
    when _T_22 : @[Memory_Mapped.scala 350:51]
      node _mask_width_T_9 = bits(io.mmio.SIZE_CFG_INFO, 15, 8) @[Memory_Mapped.scala 351:42]
      node _mask_width_T_10 = eq(UInt<1>("h1"), _mask_width_T_9) @[Mux.scala 81:61]
      node _mask_width_T_11 = mux(_mask_width_T_10, UInt<1>("h1"), UInt<4>("hf")) @[Mux.scala 81:58]
      node _mask_width_T_12 = eq(UInt<2>("h2"), _mask_width_T_9) @[Mux.scala 81:61]
      node _mask_width_T_13 = mux(_mask_width_T_12, UInt<2>("h3"), _mask_width_T_11) @[Mux.scala 81:58]
      node _mask_width_T_14 = eq(UInt<2>("h3"), _mask_width_T_9) @[Mux.scala 81:61]
      node _mask_width_T_15 = mux(_mask_width_T_14, UInt<3>("h7"), _mask_width_T_13) @[Mux.scala 81:58]
      node _mask_width_T_16 = eq(UInt<3>("h4"), _mask_width_T_9) @[Mux.scala 81:61]
      node _mask_width_T_17 = mux(_mask_width_T_16, UInt<4>("hf"), _mask_width_T_15) @[Mux.scala 81:58]
      mask_width <= _mask_width_T_17 @[Memory_Mapped.scala 351:16]
      node _rData_mask_T = dshl(mask_width, source_offset) @[Memory_Mapped.scala 357:30]
      rData_mask <= _rData_mask_T @[Memory_Mapped.scala 357:16]
      node _T_23 = bits(rData_mask, 0, 0) @[Memory_Mapped.scala 359:22]
      node _T_24 = eq(_T_23, UInt<1>("h1")) @[Memory_Mapped.scala 359:26]
      when _T_24 : @[Memory_Mapped.scala 359:35]
        node _rData_0_T = bits(io.master.r.bits.data, 7, 0) @[Memory_Mapped.scala 360:42]
        rData[0] <= _rData_0_T @[Memory_Mapped.scala 360:18]
      else :
        rData[0] <= UInt<8>("h0") @[Memory_Mapped.scala 363:18]
      node _T_25 = bits(rData_mask, 1, 1) @[Memory_Mapped.scala 359:22]
      node _T_26 = eq(_T_25, UInt<1>("h1")) @[Memory_Mapped.scala 359:26]
      when _T_26 : @[Memory_Mapped.scala 359:35]
        node _rData_1_T = bits(io.master.r.bits.data, 15, 8) @[Memory_Mapped.scala 360:42]
        rData[1] <= _rData_1_T @[Memory_Mapped.scala 360:18]
      else :
        rData[1] <= UInt<8>("h0") @[Memory_Mapped.scala 363:18]
      node _T_27 = bits(rData_mask, 2, 2) @[Memory_Mapped.scala 359:22]
      node _T_28 = eq(_T_27, UInt<1>("h1")) @[Memory_Mapped.scala 359:26]
      when _T_28 : @[Memory_Mapped.scala 359:35]
        node _rData_2_T = bits(io.master.r.bits.data, 23, 16) @[Memory_Mapped.scala 360:42]
        rData[2] <= _rData_2_T @[Memory_Mapped.scala 360:18]
      else :
        rData[2] <= UInt<8>("h0") @[Memory_Mapped.scala 363:18]
      node _T_29 = bits(rData_mask, 3, 3) @[Memory_Mapped.scala 359:22]
      node _T_30 = eq(_T_29, UInt<1>("h1")) @[Memory_Mapped.scala 359:26]
      when _T_30 : @[Memory_Mapped.scala 359:35]
        node _rData_3_T = bits(io.master.r.bits.data, 31, 24) @[Memory_Mapped.scala 360:42]
        rData[3] <= _rData_3_T @[Memory_Mapped.scala 360:18]
      else :
        rData[3] <= UInt<8>("h0") @[Memory_Mapped.scala 363:18]
      node data_buffer_lo = cat(rData[1], rData[0]) @[Memory_Mapped.scala 366:26]
      node data_buffer_hi = cat(rData[3], rData[2]) @[Memory_Mapped.scala 366:26]
      node _data_buffer_T = cat(data_buffer_hi, data_buffer_lo) @[Memory_Mapped.scala 366:26]
      node _data_buffer_T_1 = dshl(source_offset, UInt<2>("h3")) @[Memory_Mapped.scala 366:51]
      node _data_buffer_T_2 = dshr(_data_buffer_T, _data_buffer_T_1) @[Memory_Mapped.scala 366:33]
      data_buffer <= _data_buffer_T_2 @[Memory_Mapped.scala 366:17]
    node _T_31 = eq(mState, UInt<3>("h4")) @[Memory_Mapped.scala 369:15]
    node _T_32 = bits(io.mmio.SIZE_CFG_INFO, 7, 0) @[Memory_Mapped.scala 369:66]
    node _T_33 = eq(request_counter, _T_32) @[Memory_Mapped.scala 369:49]
    node _T_34 = and(_T_31, _T_33) @[Memory_Mapped.scala 369:30]
    when _T_34 : @[Memory_Mapped.scala 369:73]
      request_counter <= UInt<1>("h0") @[Memory_Mapped.scala 370:21]
      io.mmio.ENABLE_LOAD <= UInt<1>("h0") @[Memory_Mapped.scala 371:17]
      io.mmio.DONE_LOAD <= UInt<1>("h1") @[Memory_Mapped.scala 372:17]
      rf.io.complete_write <= UInt<1>("h1") @[Memory_Mapped.scala 373:26]
      rf.io.wen <= UInt<1>("h1") @[Memory_Mapped.scala 374:15]
      rf.io.waddr <= UInt<9>("h114") @[Memory_Mapped.scala 375:17]
      rf.io.wdata <= UInt<1>("h1") @[Memory_Mapped.scala 376:17]
    node _T_35 = eq(mState, UInt<3>("h3")) @[Memory_Mapped.scala 378:15]
    when _T_35 : @[Memory_Mapped.scala 378:31]
      when io.master.w.ready : @[Memory_Mapped.scala 379:29]
        mWriteDataSent <= UInt<1>("h1") @[Memory_Mapped.scala 380:22]
      when io.master.aw.ready : @[Memory_Mapped.scala 382:30]
        mWriteAddrSent <= UInt<1>("h1") @[Memory_Mapped.scala 383:22]
    else :
      mWriteAddrSent <= UInt<1>("h0") @[Memory_Mapped.scala 386:20]
      mWriteDataSent <= UInt<1>("h0") @[Memory_Mapped.scala 387:20]

  module topSA :
    input clock : Clock
    input reset : Reset
    output io : { slave : { flip aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}, flip ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, tb_slave : { flip aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}, flip ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, flip tb_en : UInt<1>, master : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}}

    inst sa of SA @[topSA.scala 25:18]
    sa.clock <= clock
    sa.reset <= reset
    inst mm of Memory_Mapped @[topSA.scala 26:18]
    mm.clock <= clock
    mm.reset <= reset
    io.slave.r.bits <= mm.io.slave.r.bits @[topSA.scala 29:12]
    io.slave.r.valid <= mm.io.slave.r.valid @[topSA.scala 29:12]
    mm.io.slave.r.ready <= io.slave.r.ready @[topSA.scala 29:12]
    mm.io.slave.ar <= io.slave.ar @[topSA.scala 29:12]
    io.slave.b.bits <= mm.io.slave.b.bits @[topSA.scala 29:12]
    io.slave.b.valid <= mm.io.slave.b.valid @[topSA.scala 29:12]
    mm.io.slave.b.ready <= io.slave.b.ready @[topSA.scala 29:12]
    mm.io.slave.w <= io.slave.w @[topSA.scala 29:12]
    mm.io.slave.aw <= io.slave.aw @[topSA.scala 29:12]
    mm.io.master.r <= io.master.r @[topSA.scala 30:13]
    io.master.ar.bits <= mm.io.master.ar.bits @[topSA.scala 30:13]
    io.master.ar.valid <= mm.io.master.ar.valid @[topSA.scala 30:13]
    mm.io.master.ar.ready <= io.master.ar.ready @[topSA.scala 30:13]
    mm.io.master.b <= io.master.b @[topSA.scala 30:13]
    io.master.w.bits <= mm.io.master.w.bits @[topSA.scala 30:13]
    io.master.w.valid <= mm.io.master.w.valid @[topSA.scala 30:13]
    mm.io.master.w.ready <= io.master.w.ready @[topSA.scala 30:13]
    io.master.aw.bits <= mm.io.master.aw.bits @[topSA.scala 30:13]
    io.master.aw.valid <= mm.io.master.aw.valid @[topSA.scala 30:13]
    mm.io.master.aw.ready <= io.master.aw.ready @[topSA.scala 30:13]
    sa.io.mmio <= mm.io.mmio @[topSA.scala 31:14]
    mm.io.raddr <= sa.io.raddr @[topSA.scala 34:15]
    sa.io.rdata <= mm.io.rdata @[topSA.scala 35:15]
    mm.io.waddr <= sa.io.waddr @[topSA.scala 36:15]
    mm.io.wdata <= sa.io.wdata @[topSA.scala 37:15]
    mm.io.wstrb <= sa.io.wstrb @[topSA.scala 38:15]
    mm.io.wen <= sa.io.wen @[topSA.scala 39:13]
    io.tb_slave.r.bits <= mm.io.tb_slave.r.bits @[topSA.scala 42:15]
    io.tb_slave.r.valid <= mm.io.tb_slave.r.valid @[topSA.scala 42:15]
    mm.io.tb_slave.r.ready <= io.tb_slave.r.ready @[topSA.scala 42:15]
    mm.io.tb_slave.ar <= io.tb_slave.ar @[topSA.scala 42:15]
    io.tb_slave.b.bits <= mm.io.tb_slave.b.bits @[topSA.scala 42:15]
    io.tb_slave.b.valid <= mm.io.tb_slave.b.valid @[topSA.scala 42:15]
    mm.io.tb_slave.b.ready <= io.tb_slave.b.ready @[topSA.scala 42:15]
    mm.io.tb_slave.w <= io.tb_slave.w @[topSA.scala 42:15]
    mm.io.tb_slave.aw <= io.tb_slave.aw @[topSA.scala 42:15]
    mm.io.tb_en <= io.tb_en @[topSA.scala 43:15]

  module DMA :
    input clock : Clock
    input reset : Reset
    output io : { slave : { flip aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}, flip ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, master : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, Hcf : UInt<1>}

    reg mState : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[DMA.scala 19:24]
    reg sReadState : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[DMA.scala 25:28]
    reg sWriteState : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[DMA.scala 26:28]
    reg sReadAddrReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DMA.scala 28:33]
    reg sReadIDReg : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[DMA.scala 29:33]
    reg sWriteIDReg : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[DMA.scala 30:33]
    reg sWriteDataRecv : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[DMA.scala 31:33]
    reg sWriteAddrRecv : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[DMA.scala 32:33]
    reg sWriteDataReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DMA.scala 33:33]
    reg sWriteAddrReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DMA.scala 34:33]
    node _sWriteAddrOffset_T = sub(sWriteAddrReg, UInt<22>("h300000")) @[DMA.scala 35:52]
    node _sWriteAddrOffset_T_1 = tail(_sWriteAddrOffset_T, 1) @[DMA.scala 35:52]
    wire sWriteAddrOffset : UInt
    sWriteAddrOffset <= _sWriteAddrOffset_T_1
    node _sReadAddrOffset_T = sub(sReadAddrReg, UInt<22>("h300000")) @[DMA.scala 36:51]
    node _sReadAddrOffset_T_1 = tail(_sReadAddrOffset_T, 1) @[DMA.scala 36:51]
    wire sReadAddrOffset : UInt
    sReadAddrOffset <= _sReadAddrOffset_T_1
    reg mWriteAddrSent : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[DMA.scala 38:31]
    reg mWriteDataSent : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[DMA.scala 39:31]
    wire _mmio_regs_WIRE : UInt<32>[6] @[DMA.scala 42:42]
    _mmio_regs_WIRE[0] <= UInt<32>("h0") @[DMA.scala 42:42]
    _mmio_regs_WIRE[1] <= UInt<32>("h0") @[DMA.scala 42:42]
    _mmio_regs_WIRE[2] <= UInt<32>("h0") @[DMA.scala 42:42]
    _mmio_regs_WIRE[3] <= UInt<32>("h0") @[DMA.scala 42:42]
    _mmio_regs_WIRE[4] <= UInt<32>("h0") @[DMA.scala 42:42]
    _mmio_regs_WIRE[5] <= UInt<32>("h0") @[DMA.scala 42:42]
    reg mmio_regs : UInt<32>[6], clock with :
      reset => (reset, _mmio_regs_WIRE) @[DMA.scala 42:34]
    reg data_buffer : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DMA.scala 51:28]
    wire rData_mask : UInt<4>
    rData_mask <= UInt<4>("h0")
    wire mask_width : UInt<4>
    mask_width <= UInt<4>("h0")
    reg source_offset : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[DMA.scala 54:30]
    wire _rData_WIRE : UInt<8>[4] @[DMA.scala 55:35]
    _rData_WIRE[0] <= UInt<8>("h0") @[DMA.scala 55:35]
    _rData_WIRE[1] <= UInt<8>("h0") @[DMA.scala 55:35]
    _rData_WIRE[2] <= UInt<8>("h0") @[DMA.scala 55:35]
    _rData_WIRE[3] <= UInt<8>("h0") @[DMA.scala 55:35]
    wire rData : UInt<8>[4]
    rData <= _rData_WIRE
    node _dest_offset_T = bits(io.master.aw.bits.addr, 1, 0) @[DMA.scala 57:55]
    wire dest_offset : UInt
    dest_offset <= _dest_offset_T
    reg request_counter : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[DMA.scala 60:32]
    node _sReadData_T = eq(UInt<1>("h0"), sReadAddrOffset) @[Mux.scala 81:61]
    node _sReadData_T_1 = mux(_sReadData_T, mmio_regs[0], UInt<1>("h0")) @[Mux.scala 81:58]
    node _sReadData_T_2 = eq(UInt<3>("h4"), sReadAddrOffset) @[Mux.scala 81:61]
    node _sReadData_T_3 = mux(_sReadData_T_2, mmio_regs[1], _sReadData_T_1) @[Mux.scala 81:58]
    node _sReadData_T_4 = eq(UInt<4>("h8"), sReadAddrOffset) @[Mux.scala 81:61]
    node _sReadData_T_5 = mux(_sReadData_T_4, mmio_regs[2], _sReadData_T_3) @[Mux.scala 81:58]
    node _sReadData_T_6 = eq(UInt<4>("hc"), sReadAddrOffset) @[Mux.scala 81:61]
    node _sReadData_T_7 = mux(_sReadData_T_6, mmio_regs[3], _sReadData_T_5) @[Mux.scala 81:58]
    node _sReadData_T_8 = eq(UInt<5>("h10"), sReadAddrOffset) @[Mux.scala 81:61]
    node _sReadData_T_9 = mux(_sReadData_T_8, mmio_regs[4], _sReadData_T_7) @[Mux.scala 81:58]
    node _sReadData_T_10 = eq(UInt<5>("h14"), sReadAddrOffset) @[Mux.scala 81:61]
    node _sReadData_T_11 = mux(_sReadData_T_10, mmio_regs[5], _sReadData_T_9) @[Mux.scala 81:58]
    wire sReadData : UInt
    sReadData <= _sReadData_T_11
    io.Hcf <= mmio_regs[5] @[DMA.scala 77:10]
    node _io_master_aw_valid_T = eq(mState, UInt<3>("h3")) @[DMA.scala 80:38]
    node _io_master_aw_valid_T_1 = eq(mWriteAddrSent, UInt<1>("h0")) @[DMA.scala 80:56]
    node _io_master_aw_valid_T_2 = and(_io_master_aw_valid_T, _io_master_aw_valid_T_1) @[DMA.scala 80:53]
    io.master.aw.valid <= _io_master_aw_valid_T_2 @[DMA.scala 80:28]
    io.master.aw.bits.addr <= UInt<1>("h0") @[DMA.scala 81:28]
    io.master.aw.bits.burst <= UInt<1>("h0") @[DMA.scala 82:28]
    io.master.aw.bits.len <= UInt<1>("h0") @[DMA.scala 83:28]
    io.master.aw.bits.size <= UInt<2>("h2") @[DMA.scala 84:28]
    io.master.aw.bits.cache <= UInt<1>("h0") @[DMA.scala 85:28]
    io.master.aw.bits.id <= UInt<1>("h0") @[DMA.scala 86:28]
    io.master.aw.bits.prot <= UInt<1>("h0") @[DMA.scala 87:28]
    io.master.aw.bits.lock <= UInt<1>("h0") @[DMA.scala 88:28]
    io.master.aw.bits.qos <= UInt<1>("h0") @[DMA.scala 89:28]
    io.master.aw.bits.region <= UInt<1>("h0") @[DMA.scala 90:28]
    node _io_master_ar_valid_T = eq(mState, UInt<3>("h1")) @[DMA.scala 92:38]
    io.master.ar.valid <= _io_master_ar_valid_T @[DMA.scala 92:28]
    io.master.ar.bits.addr <= UInt<1>("h0") @[DMA.scala 93:28]
    io.master.ar.bits.burst <= UInt<1>("h0") @[DMA.scala 94:28]
    io.master.ar.bits.len <= UInt<1>("h0") @[DMA.scala 95:28]
    io.master.ar.bits.size <= UInt<2>("h2") @[DMA.scala 96:28]
    io.master.ar.bits.cache <= UInt<1>("h0") @[DMA.scala 97:28]
    io.master.ar.bits.id <= UInt<1>("h0") @[DMA.scala 98:28]
    io.master.ar.bits.prot <= UInt<1>("h0") @[DMA.scala 99:28]
    io.master.ar.bits.lock <= UInt<1>("h0") @[DMA.scala 100:28]
    io.master.ar.bits.qos <= UInt<1>("h0") @[DMA.scala 101:28]
    io.master.ar.bits.region <= UInt<1>("h0") @[DMA.scala 102:28]
    node _io_master_w_valid_T = eq(mState, UInt<3>("h3")) @[DMA.scala 104:35]
    node _io_master_w_valid_T_1 = eq(mWriteDataSent, UInt<1>("h0")) @[DMA.scala 104:53]
    node _io_master_w_valid_T_2 = and(_io_master_w_valid_T, _io_master_w_valid_T_1) @[DMA.scala 104:50]
    io.master.w.valid <= _io_master_w_valid_T_2 @[DMA.scala 104:25]
    io.master.w.bits.data <= data_buffer @[DMA.scala 105:25]
    io.master.w.bits.strb <= UInt<4>("hf") @[DMA.scala 106:25]
    io.master.w.bits.last <= UInt<1>("h1") @[DMA.scala 107:25]
    node _io_master_r_ready_T = eq(mState, UInt<3>("h2")) @[DMA.scala 109:31]
    io.master.r.ready <= _io_master_r_ready_T @[DMA.scala 109:21]
    node _io_master_b_ready_T = eq(mState, UInt<3>("h4")) @[DMA.scala 111:31]
    io.master.b.ready <= _io_master_b_ready_T @[DMA.scala 111:21]
    node _io_slave_aw_ready_T = eq(sWriteState, UInt<2>("h0")) @[DMA.scala 114:37]
    node _io_slave_aw_ready_T_1 = eq(sWriteState, UInt<2>("h1")) @[DMA.scala 114:67]
    node _io_slave_aw_ready_T_2 = or(_io_slave_aw_ready_T, _io_slave_aw_ready_T_1) @[DMA.scala 114:52]
    node _io_slave_aw_ready_T_3 = eq(sWriteAddrRecv, UInt<1>("h0")) @[DMA.scala 114:86]
    node _io_slave_aw_ready_T_4 = and(_io_slave_aw_ready_T_2, _io_slave_aw_ready_T_3) @[DMA.scala 114:83]
    io.slave.aw.ready <= _io_slave_aw_ready_T_4 @[DMA.scala 114:21]
    node _io_slave_w_ready_T = eq(sWriteState, UInt<2>("h0")) @[DMA.scala 115:36]
    node _io_slave_w_ready_T_1 = eq(sWriteState, UInt<2>("h1")) @[DMA.scala 115:66]
    node _io_slave_w_ready_T_2 = or(_io_slave_w_ready_T, _io_slave_w_ready_T_1) @[DMA.scala 115:51]
    node _io_slave_w_ready_T_3 = eq(sWriteDataRecv, UInt<1>("h0")) @[DMA.scala 115:85]
    node _io_slave_w_ready_T_4 = and(_io_slave_w_ready_T_2, _io_slave_w_ready_T_3) @[DMA.scala 115:82]
    io.slave.w.ready <= _io_slave_w_ready_T_4 @[DMA.scala 115:20]
    node _io_slave_ar_ready_T = eq(sReadState, UInt<1>("h0")) @[DMA.scala 117:35]
    io.slave.ar.ready <= _io_slave_ar_ready_T @[DMA.scala 117:21]
    node _io_slave_r_valid_T = eq(sReadState, UInt<1>("h1")) @[DMA.scala 119:38]
    io.slave.r.valid <= _io_slave_r_valid_T @[DMA.scala 119:24]
    io.slave.r.bits.data <= sReadData @[DMA.scala 120:24]
    io.slave.r.bits.id <= sReadIDReg @[DMA.scala 121:24]
    io.slave.r.bits.last <= UInt<1>("h1") @[DMA.scala 122:24]
    io.slave.r.bits.resp <= UInt<1>("h0") @[DMA.scala 123:24]
    node _io_slave_b_valid_T = eq(sWriteState, UInt<2>("h2")) @[DMA.scala 125:39]
    io.slave.b.valid <= _io_slave_b_valid_T @[DMA.scala 125:24]
    io.slave.b.bits.id <= sWriteIDReg @[DMA.scala 126:24]
    io.slave.b.bits.resp <= UInt<1>("h0") @[DMA.scala 127:24]
    node _T = eq(UInt<3>("h0"), mState) @[DMA.scala 131:18]
    when _T : @[DMA.scala 131:18]
      node _T_1 = eq(mmio_regs[0], UInt<1>("h1")) @[DMA.scala 133:24]
      when _T_1 : @[DMA.scala 133:33]
        mState <= UInt<3>("h1") @[DMA.scala 134:16]
    else :
      node _T_2 = eq(UInt<3>("h1"), mState) @[DMA.scala 131:18]
      when _T_2 : @[DMA.scala 131:18]
        when io.master.ar.ready : @[DMA.scala 138:32]
          mState <= UInt<3>("h2") @[DMA.scala 139:16]
      else :
        node _T_3 = eq(UInt<3>("h2"), mState) @[DMA.scala 131:18]
        when _T_3 : @[DMA.scala 131:18]
          when io.master.r.valid : @[DMA.scala 143:31]
            mState <= UInt<3>("h3") @[DMA.scala 144:16]
        else :
          node _T_4 = eq(UInt<3>("h3"), mState) @[DMA.scala 131:18]
          when _T_4 : @[DMA.scala 131:18]
            node _T_5 = and(mWriteAddrSent, mWriteDataSent) @[DMA.scala 148:27]
            when _T_5 : @[DMA.scala 148:46]
              mState <= UInt<3>("h4") @[DMA.scala 149:16]
          else :
            node _T_6 = eq(UInt<3>("h4"), mState) @[DMA.scala 131:18]
            when _T_6 : @[DMA.scala 131:18]
              when io.master.b.valid : @[DMA.scala 153:31]
                mState <= UInt<3>("h0") @[DMA.scala 154:16]
    node _T_7 = eq(UInt<1>("h0"), sReadState) @[DMA.scala 161:22]
    when _T_7 : @[DMA.scala 161:22]
      when io.slave.ar.valid : @[DMA.scala 163:31]
        sReadState <= UInt<1>("h1") @[DMA.scala 164:20]
    else :
      node _T_8 = eq(UInt<1>("h1"), sReadState) @[DMA.scala 161:22]
      when _T_8 : @[DMA.scala 161:22]
        when io.slave.r.ready : @[DMA.scala 168:30]
          sReadState <= UInt<1>("h0") @[DMA.scala 169:20]
    node _T_9 = eq(UInt<2>("h0"), sWriteState) @[DMA.scala 174:23]
    when _T_9 : @[DMA.scala 174:23]
      node _T_10 = or(io.slave.aw.valid, io.slave.w.valid) @[DMA.scala 176:30]
      when _T_10 : @[DMA.scala 176:51]
        sWriteState <= UInt<2>("h1") @[DMA.scala 177:21]
    else :
      node _T_11 = eq(UInt<2>("h1"), sWriteState) @[DMA.scala 174:23]
      when _T_11 : @[DMA.scala 174:23]
        node _T_12 = and(sWriteDataRecv, sWriteAddrRecv) @[DMA.scala 181:26]
        when _T_12 : @[DMA.scala 181:45]
          sWriteState <= UInt<2>("h2") @[DMA.scala 182:21]
      else :
        node _T_13 = eq(UInt<2>("h2"), sWriteState) @[DMA.scala 174:23]
        when _T_13 : @[DMA.scala 174:23]
          when io.slave.b.ready : @[DMA.scala 186:30]
            sWriteState <= UInt<2>("h0") @[DMA.scala 187:21]
    node _T_14 = eq(mState, UInt<3>("h3")) @[DMA.scala 193:15]
    when _T_14 : @[DMA.scala 193:31]
      node _T_15 = and(io.master.aw.ready, io.master.aw.valid) @[Decoupled.scala 52:35]
      when _T_15 : @[DMA.scala 194:29]
        node _request_counter_T = add(request_counter, UInt<1>("h1")) @[DMA.scala 195:42]
        node _request_counter_T_1 = tail(_request_counter_T, 1) @[DMA.scala 195:42]
        request_counter <= _request_counter_T_1 @[DMA.scala 195:23]
    node _T_16 = eq(mState, UInt<3>("h1")) @[DMA.scala 199:15]
    when _T_16 : @[DMA.scala 199:30]
      node _io_master_ar_bits_addr_T = bits(mmio_regs[3], 31, 24) @[DMA.scala 200:82]
      node _io_master_ar_bits_addr_T_1 = mul(request_counter, _io_master_ar_bits_addr_T) @[DMA.scala 200:67]
      node _io_master_ar_bits_addr_T_2 = add(mmio_regs[1], _io_master_ar_bits_addr_T_1) @[DMA.scala 200:48]
      node _io_master_ar_bits_addr_T_3 = tail(_io_master_ar_bits_addr_T_2, 1) @[DMA.scala 200:48]
      io.master.ar.bits.addr <= _io_master_ar_bits_addr_T_3 @[DMA.scala 200:28]
      node _source_offset_T = bits(io.master.ar.bits.addr, 1, 0) @[DMA.scala 201:44]
      source_offset <= _source_offset_T @[DMA.scala 201:19]
    node _T_17 = eq(mState, UInt<3>("h3")) @[DMA.scala 204:15]
    when _T_17 : @[DMA.scala 204:31]
      node _io_master_aw_bits_addr_T = bits(mmio_regs[3], 23, 16) @[DMA.scala 205:80]
      node _io_master_aw_bits_addr_T_1 = mul(request_counter, _io_master_aw_bits_addr_T) @[DMA.scala 205:65]
      node _io_master_aw_bits_addr_T_2 = add(mmio_regs[2], _io_master_aw_bits_addr_T_1) @[DMA.scala 205:46]
      node _io_master_aw_bits_addr_T_3 = tail(_io_master_aw_bits_addr_T_2, 1) @[DMA.scala 205:46]
      io.master.aw.bits.addr <= _io_master_aw_bits_addr_T_3 @[DMA.scala 205:28]
      node _mask_width_T = bits(mmio_regs[3], 15, 8) @[DMA.scala 206:42]
      node _mask_width_T_1 = eq(UInt<1>("h1"), _mask_width_T) @[Mux.scala 81:61]
      node _mask_width_T_2 = mux(_mask_width_T_1, UInt<1>("h1"), UInt<4>("hf")) @[Mux.scala 81:58]
      node _mask_width_T_3 = eq(UInt<2>("h2"), _mask_width_T) @[Mux.scala 81:61]
      node _mask_width_T_4 = mux(_mask_width_T_3, UInt<2>("h3"), _mask_width_T_2) @[Mux.scala 81:58]
      node _mask_width_T_5 = eq(UInt<2>("h3"), _mask_width_T) @[Mux.scala 81:61]
      node _mask_width_T_6 = mux(_mask_width_T_5, UInt<3>("h7"), _mask_width_T_4) @[Mux.scala 81:58]
      node _mask_width_T_7 = eq(UInt<3>("h4"), _mask_width_T) @[Mux.scala 81:61]
      node _mask_width_T_8 = mux(_mask_width_T_7, UInt<4>("hf"), _mask_width_T_6) @[Mux.scala 81:58]
      mask_width <= _mask_width_T_8 @[DMA.scala 206:16]
      node _io_master_w_bits_strb_T = dshl(mask_width, dest_offset) @[DMA.scala 212:41]
      io.master.w.bits.strb <= _io_master_w_bits_strb_T @[DMA.scala 212:27]
      node _io_master_w_bits_data_T = dshl(dest_offset, UInt<2>("h3")) @[DMA.scala 213:58]
      node _io_master_w_bits_data_T_1 = dshl(data_buffer, _io_master_w_bits_data_T) @[DMA.scala 213:42]
      io.master.w.bits.data <= _io_master_w_bits_data_T_1 @[DMA.scala 213:27]
    node _T_18 = eq(mState, UInt<3>("h2")) @[DMA.scala 217:15]
    node _T_19 = and(_T_18, io.master.r.valid) @[DMA.scala 217:29]
    when _T_19 : @[DMA.scala 217:51]
      node _mask_width_T_9 = bits(mmio_regs[3], 15, 8) @[DMA.scala 218:42]
      node _mask_width_T_10 = eq(UInt<1>("h1"), _mask_width_T_9) @[Mux.scala 81:61]
      node _mask_width_T_11 = mux(_mask_width_T_10, UInt<1>("h1"), UInt<4>("hf")) @[Mux.scala 81:58]
      node _mask_width_T_12 = eq(UInt<2>("h2"), _mask_width_T_9) @[Mux.scala 81:61]
      node _mask_width_T_13 = mux(_mask_width_T_12, UInt<2>("h3"), _mask_width_T_11) @[Mux.scala 81:58]
      node _mask_width_T_14 = eq(UInt<2>("h3"), _mask_width_T_9) @[Mux.scala 81:61]
      node _mask_width_T_15 = mux(_mask_width_T_14, UInt<3>("h7"), _mask_width_T_13) @[Mux.scala 81:58]
      node _mask_width_T_16 = eq(UInt<3>("h4"), _mask_width_T_9) @[Mux.scala 81:61]
      node _mask_width_T_17 = mux(_mask_width_T_16, UInt<4>("hf"), _mask_width_T_15) @[Mux.scala 81:58]
      mask_width <= _mask_width_T_17 @[DMA.scala 218:16]
      node _rData_mask_T = dshl(mask_width, source_offset) @[DMA.scala 224:30]
      rData_mask <= _rData_mask_T @[DMA.scala 224:16]
      node _T_20 = bits(rData_mask, 0, 0) @[DMA.scala 226:22]
      node _T_21 = eq(_T_20, UInt<1>("h1")) @[DMA.scala 226:26]
      when _T_21 : @[DMA.scala 226:35]
        node _rData_0_T = bits(io.master.r.bits.data, 7, 0) @[DMA.scala 227:42]
        rData[0] <= _rData_0_T @[DMA.scala 227:18]
      else :
        rData[0] <= UInt<8>("h0") @[DMA.scala 230:18]
      node _T_22 = bits(rData_mask, 1, 1) @[DMA.scala 226:22]
      node _T_23 = eq(_T_22, UInt<1>("h1")) @[DMA.scala 226:26]
      when _T_23 : @[DMA.scala 226:35]
        node _rData_1_T = bits(io.master.r.bits.data, 15, 8) @[DMA.scala 227:42]
        rData[1] <= _rData_1_T @[DMA.scala 227:18]
      else :
        rData[1] <= UInt<8>("h0") @[DMA.scala 230:18]
      node _T_24 = bits(rData_mask, 2, 2) @[DMA.scala 226:22]
      node _T_25 = eq(_T_24, UInt<1>("h1")) @[DMA.scala 226:26]
      when _T_25 : @[DMA.scala 226:35]
        node _rData_2_T = bits(io.master.r.bits.data, 23, 16) @[DMA.scala 227:42]
        rData[2] <= _rData_2_T @[DMA.scala 227:18]
      else :
        rData[2] <= UInt<8>("h0") @[DMA.scala 230:18]
      node _T_26 = bits(rData_mask, 3, 3) @[DMA.scala 226:22]
      node _T_27 = eq(_T_26, UInt<1>("h1")) @[DMA.scala 226:26]
      when _T_27 : @[DMA.scala 226:35]
        node _rData_3_T = bits(io.master.r.bits.data, 31, 24) @[DMA.scala 227:42]
        rData[3] <= _rData_3_T @[DMA.scala 227:18]
      else :
        rData[3] <= UInt<8>("h0") @[DMA.scala 230:18]
      node data_buffer_lo = cat(rData[1], rData[0]) @[DMA.scala 233:26]
      node data_buffer_hi = cat(rData[3], rData[2]) @[DMA.scala 233:26]
      node _data_buffer_T = cat(data_buffer_hi, data_buffer_lo) @[DMA.scala 233:26]
      node _data_buffer_T_1 = dshl(source_offset, UInt<2>("h3")) @[DMA.scala 233:51]
      node _data_buffer_T_2 = dshr(_data_buffer_T, _data_buffer_T_1) @[DMA.scala 233:33]
      data_buffer <= _data_buffer_T_2 @[DMA.scala 233:17]
    node _T_28 = eq(mState, UInt<3>("h4")) @[DMA.scala 236:15]
    node _T_29 = bits(mmio_regs[3], 7, 0) @[DMA.scala 236:66]
    node _T_30 = eq(request_counter, _T_29) @[DMA.scala 236:49]
    node _T_31 = and(_T_28, _T_30) @[DMA.scala 236:30]
    when _T_31 : @[DMA.scala 236:73]
      request_counter <= UInt<1>("h0") @[DMA.scala 237:21]
      mmio_regs[0] <= UInt<1>("h0") @[DMA.scala 238:17]
      mmio_regs[5] <= UInt<1>("h1") @[DMA.scala 239:17]
    node _T_32 = eq(mState, UInt<3>("h3")) @[DMA.scala 241:15]
    when _T_32 : @[DMA.scala 241:31]
      when io.master.w.ready : @[DMA.scala 242:29]
        mWriteDataSent <= UInt<1>("h1") @[DMA.scala 243:22]
      when io.master.aw.ready : @[DMA.scala 245:30]
        mWriteAddrSent <= UInt<1>("h1") @[DMA.scala 246:22]
    else :
      mWriteAddrSent <= UInt<1>("h0") @[DMA.scala 249:20]
      mWriteDataSent <= UInt<1>("h0") @[DMA.scala 250:20]
    node _T_33 = eq(sWriteState, UInt<2>("h0")) @[DMA.scala 256:20]
    node _T_34 = eq(sWriteState, UInt<2>("h1")) @[DMA.scala 256:50]
    node _T_35 = or(_T_33, _T_34) @[DMA.scala 256:35]
    when _T_35 : @[DMA.scala 256:66]
      when io.slave.aw.valid : @[DMA.scala 257:29]
        sWriteAddrRecv <= UInt<1>("h1") @[DMA.scala 258:22]
        node _sWriteAddrReg_T = mux(sWriteAddrRecv, sWriteAddrReg, io.slave.aw.bits.addr) @[DMA.scala 259:29]
        sWriteAddrReg <= _sWriteAddrReg_T @[DMA.scala 259:23]
        node _sWriteIDReg_T = mux(sWriteAddrRecv, sWriteIDReg, io.slave.aw.bits.id) @[DMA.scala 264:29]
        sWriteIDReg <= _sWriteIDReg_T @[DMA.scala 264:23]
      when io.slave.w.valid : @[DMA.scala 270:28]
        sWriteDataRecv <= UInt<1>("h1") @[DMA.scala 271:21]
        node _sWriteDataReg_T = mux(sWriteDataRecv, sWriteDataReg, io.slave.w.bits.data) @[DMA.scala 272:27]
        sWriteDataReg <= _sWriteDataReg_T @[DMA.scala 272:21]
    else :
      node _T_36 = eq(sWriteState, UInt<2>("h2")) @[DMA.scala 274:26]
      when _T_36 : @[DMA.scala 274:42]
        sWriteAddrRecv <= UInt<1>("h0") @[DMA.scala 275:20]
        sWriteDataRecv <= UInt<1>("h0") @[DMA.scala 276:19]
    node _T_37 = eq(sWriteState, UInt<2>("h2")) @[DMA.scala 279:20]
    node _T_38 = and(_T_37, io.slave.b.ready) @[DMA.scala 279:35]
    when _T_38 : @[DMA.scala 279:56]
      node _T_39 = eq(UInt<1>("h0"), sWriteAddrOffset) @[DMA.scala 280:30]
      when _T_39 : @[DMA.scala 280:30]
        mmio_regs[0] <= sWriteDataReg @[DMA.scala 282:22]
      else :
        node _T_40 = eq(UInt<3>("h4"), sWriteAddrOffset) @[DMA.scala 280:30]
        when _T_40 : @[DMA.scala 280:30]
          mmio_regs[1] <= sWriteDataReg @[DMA.scala 285:22]
        else :
          node _T_41 = eq(UInt<4>("h8"), sWriteAddrOffset) @[DMA.scala 280:30]
          when _T_41 : @[DMA.scala 280:30]
            mmio_regs[2] <= sWriteDataReg @[DMA.scala 288:22]
          else :
            node _T_42 = eq(UInt<4>("hc"), sWriteAddrOffset) @[DMA.scala 280:30]
            when _T_42 : @[DMA.scala 280:30]
              mmio_regs[3] <= sWriteDataReg @[DMA.scala 291:22]
            else :
              node _T_43 = eq(UInt<5>("h10"), sWriteAddrOffset) @[DMA.scala 280:30]
              when _T_43 : @[DMA.scala 280:30]
                mmio_regs[4] <= sWriteDataReg @[DMA.scala 294:22]
              else :
                node _T_44 = eq(UInt<5>("h14"), sWriteAddrOffset) @[DMA.scala 280:30]
                when _T_44 : @[DMA.scala 280:30]
                  mmio_regs[5] <= sWriteDataReg @[DMA.scala 297:22]
    node _T_45 = eq(sReadState, UInt<1>("h0")) @[DMA.scala 301:19]
    node _T_46 = and(_T_45, io.slave.ar.valid) @[DMA.scala 301:33]
    when _T_46 : @[DMA.scala 301:55]
      sReadAddrReg <= io.slave.ar.bits.addr @[DMA.scala 302:18]
      sReadIDReg <= io.slave.ar.bits.id @[DMA.scala 303:18]

  module AXIReadBus :
    input clock : Clock
    input reset : Reset
    output io : { master : { flip readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, slave : { readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[3]}

    node _read_port_T = geq(io.master.readAddr.bits.addr, UInt<16>("h8000")) @[AXIReadBus.scala 24:35]
    node _read_port_T_1 = lt(io.master.readAddr.bits.addr, UInt<17>("h10000")) @[AXIReadBus.scala 24:85]
    node _read_port_T_2 = and(_read_port_T, _read_port_T_1) @[AXIReadBus.scala 24:53]
    node _read_port_T_3 = geq(io.master.readAddr.bits.addr, UInt<21>("h100000")) @[AXIReadBus.scala 24:35]
    node _read_port_T_4 = lt(io.master.readAddr.bits.addr, UInt<22>("h300000")) @[AXIReadBus.scala 24:85]
    node _read_port_T_5 = and(_read_port_T_3, _read_port_T_4) @[AXIReadBus.scala 24:53]
    node _read_port_T_6 = geq(io.master.readAddr.bits.addr, UInt<22>("h300000")) @[AXIReadBus.scala 24:35]
    node _read_port_T_7 = lt(io.master.readAddr.bits.addr, UInt<23>("h400000")) @[AXIReadBus.scala 24:85]
    node _read_port_T_8 = and(_read_port_T_6, _read_port_T_7) @[AXIReadBus.scala 24:53]
    node _read_port_T_9 = mux(_read_port_T_8, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _read_port_T_10 = mux(_read_port_T_5, UInt<1>("h1"), _read_port_T_9) @[Mux.scala 101:16]
    node read_port = mux(_read_port_T_2, UInt<1>("h0"), _read_port_T_10) @[Mux.scala 101:16]
    reg read_port_reg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIReadBus.scala 26:30]
    reg read_addr_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXIReadBus.scala 27:30]
    reg read_addr_reg_id : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[AXIReadBus.scala 28:33]
    reg read_addr_reg_size : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIReadBus.scala 29:35]
    reg read_addr_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIReadBus.scala 30:36]
    reg outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIReadBus.scala 31:28]
    io.slave[0].readAddr.valid <= UInt<1>("h0") @[AXIReadBus.scala 36:32]
    io.slave[0].readAddr.bits.addr <= UInt<1>("h0") @[AXIReadBus.scala 37:36]
    io.slave[0].readAddr.bits.id <= UInt<1>("h0") @[AXIReadBus.scala 38:34]
    io.slave[0].readAddr.bits.region is invalid @[AXIReadBus.scala 39:38]
    io.slave[0].readAddr.bits.len is invalid @[AXIReadBus.scala 40:35]
    io.slave[0].readAddr.bits.size <= UInt<1>("h0") @[AXIReadBus.scala 41:36]
    io.slave[0].readAddr.bits.burst is invalid @[AXIReadBus.scala 42:37]
    io.slave[0].readAddr.bits.lock is invalid @[AXIReadBus.scala 43:36]
    io.slave[0].readAddr.bits.cache is invalid @[AXIReadBus.scala 44:37]
    io.slave[0].readAddr.bits.prot is invalid @[AXIReadBus.scala 45:36]
    io.slave[0].readAddr.bits.qos is invalid @[AXIReadBus.scala 46:35]
    io.slave[0].readData.ready <= UInt<1>("h0") @[AXIReadBus.scala 47:32]
    io.slave[1].readAddr.valid <= UInt<1>("h0") @[AXIReadBus.scala 36:32]
    io.slave[1].readAddr.bits.addr <= UInt<1>("h0") @[AXIReadBus.scala 37:36]
    io.slave[1].readAddr.bits.id <= UInt<1>("h0") @[AXIReadBus.scala 38:34]
    io.slave[1].readAddr.bits.region is invalid @[AXIReadBus.scala 39:38]
    io.slave[1].readAddr.bits.len is invalid @[AXIReadBus.scala 40:35]
    io.slave[1].readAddr.bits.size <= UInt<1>("h0") @[AXIReadBus.scala 41:36]
    io.slave[1].readAddr.bits.burst is invalid @[AXIReadBus.scala 42:37]
    io.slave[1].readAddr.bits.lock is invalid @[AXIReadBus.scala 43:36]
    io.slave[1].readAddr.bits.cache is invalid @[AXIReadBus.scala 44:37]
    io.slave[1].readAddr.bits.prot is invalid @[AXIReadBus.scala 45:36]
    io.slave[1].readAddr.bits.qos is invalid @[AXIReadBus.scala 46:35]
    io.slave[1].readData.ready <= UInt<1>("h0") @[AXIReadBus.scala 47:32]
    io.slave[2].readAddr.valid <= UInt<1>("h0") @[AXIReadBus.scala 36:32]
    io.slave[2].readAddr.bits.addr <= UInt<1>("h0") @[AXIReadBus.scala 37:36]
    io.slave[2].readAddr.bits.id <= UInt<1>("h0") @[AXIReadBus.scala 38:34]
    io.slave[2].readAddr.bits.region is invalid @[AXIReadBus.scala 39:38]
    io.slave[2].readAddr.bits.len is invalid @[AXIReadBus.scala 40:35]
    io.slave[2].readAddr.bits.size <= UInt<1>("h0") @[AXIReadBus.scala 41:36]
    io.slave[2].readAddr.bits.burst is invalid @[AXIReadBus.scala 42:37]
    io.slave[2].readAddr.bits.lock is invalid @[AXIReadBus.scala 43:36]
    io.slave[2].readAddr.bits.cache is invalid @[AXIReadBus.scala 44:37]
    io.slave[2].readAddr.bits.prot is invalid @[AXIReadBus.scala 45:36]
    io.slave[2].readAddr.bits.qos is invalid @[AXIReadBus.scala 46:35]
    io.slave[2].readData.ready <= UInt<1>("h0") @[AXIReadBus.scala 47:32]
    io.master.readData.valid <= UInt<1>("h0") @[AXIReadBus.scala 50:28]
    io.master.readData.bits.data <= UInt<1>("h0") @[AXIReadBus.scala 51:32]
    io.master.readData.bits.resp <= UInt<1>("h0") @[AXIReadBus.scala 52:32]
    io.master.readData.bits.id is invalid @[AXIReadBus.scala 53:30]
    io.master.readData.bits.last <= UInt<1>("h0") @[AXIReadBus.scala 54:32]
    node _io_master_readAddr_ready_T = not(outstanding) @[AXIReadBus.scala 55:31]
    io.master.readAddr.ready <= _io_master_readAddr_ready_T @[AXIReadBus.scala 55:28]
    node _T = and(io.master.readAddr.ready, io.master.readAddr.valid) @[Decoupled.scala 52:35]
    when _T : @[AXIReadBus.scala 57:33]
      outstanding <= UInt<1>("h1") @[AXIReadBus.scala 58:17]
      read_port_reg <= read_port @[AXIReadBus.scala 59:19]
      read_addr_reg <= io.master.readAddr.bits.addr @[AXIReadBus.scala 60:19]
      read_addr_reg_id <= io.master.readAddr.bits.id @[AXIReadBus.scala 61:22]
      read_addr_reg_size <= io.master.readAddr.bits.size @[AXIReadBus.scala 62:24]
      read_addr_reg_valid <= UInt<1>("h1") @[AXIReadBus.scala 63:25]
    when read_addr_reg_valid : @[AXIReadBus.scala 66:29]
      node _T_1 = bits(read_port_reg, 1, 0)
      when io.slave[_T_1].readAddr.ready : @[AXIReadBus.scala 67:50]
        read_addr_reg_valid <= UInt<1>("h0") @[AXIReadBus.scala 68:27]
    when outstanding : @[AXIReadBus.scala 72:21]
      node _io_master_readData_valid_T = bits(read_port_reg, 1, 0)
      io.master.readData.valid <= io.slave[_io_master_readData_valid_T].readData.valid @[AXIReadBus.scala 73:30]
      node _io_master_readData_bits_data_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.data <= io.slave[_io_master_readData_bits_data_T].readData.bits.data @[AXIReadBus.scala 74:34]
      node _io_master_readData_bits_resp_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.resp <= io.slave[_io_master_readData_bits_resp_T].readData.bits.resp @[AXIReadBus.scala 75:34]
      node _io_master_readData_bits_last_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.last <= io.slave[_io_master_readData_bits_last_T].readData.bits.last @[AXIReadBus.scala 76:34]
      node _io_master_readData_bits_id_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.id <= io.slave[_io_master_readData_bits_id_T].readData.bits.id @[AXIReadBus.scala 77:32]
      node _T_2 = bits(read_port_reg, 1, 0)
      io.slave[_T_2].readAddr.bits.addr <= read_addr_reg @[AXIReadBus.scala 78:48]
      node _T_3 = bits(read_port_reg, 1, 0)
      io.slave[_T_3].readAddr.valid <= read_addr_reg_valid @[AXIReadBus.scala 79:44]
      node _T_4 = bits(read_port_reg, 1, 0)
      io.slave[_T_4].readData.ready <= io.master.readData.ready @[AXIReadBus.scala 80:44]
      node _T_5 = bits(read_port_reg, 1, 0)
      io.slave[_T_5].readAddr.bits.size <= read_addr_reg_size @[AXIReadBus.scala 81:48]
      node _T_6 = bits(read_port_reg, 1, 0)
      io.slave[_T_6].readAddr.bits.id <= read_addr_reg_id @[AXIReadBus.scala 82:46]
      node _T_7 = and(io.master.readData.ready, io.master.readData.valid) @[Decoupled.scala 52:35]
      when _T_7 : @[AXIReadBus.scala 83:35]
        outstanding <= UInt<1>("h0") @[AXIReadBus.scala 84:19]

  module AXIReadBus_1 :
    input clock : Clock
    input reset : Reset
    output io : { master : { flip readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, slave : { readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[3]}

    node _read_port_T = geq(io.master.readAddr.bits.addr, UInt<16>("h8000")) @[AXIReadBus.scala 24:35]
    node _read_port_T_1 = lt(io.master.readAddr.bits.addr, UInt<17>("h10000")) @[AXIReadBus.scala 24:85]
    node _read_port_T_2 = and(_read_port_T, _read_port_T_1) @[AXIReadBus.scala 24:53]
    node _read_port_T_3 = geq(io.master.readAddr.bits.addr, UInt<21>("h100000")) @[AXIReadBus.scala 24:35]
    node _read_port_T_4 = lt(io.master.readAddr.bits.addr, UInt<22>("h300000")) @[AXIReadBus.scala 24:85]
    node _read_port_T_5 = and(_read_port_T_3, _read_port_T_4) @[AXIReadBus.scala 24:53]
    node _read_port_T_6 = geq(io.master.readAddr.bits.addr, UInt<22>("h300000")) @[AXIReadBus.scala 24:35]
    node _read_port_T_7 = lt(io.master.readAddr.bits.addr, UInt<23>("h400000")) @[AXIReadBus.scala 24:85]
    node _read_port_T_8 = and(_read_port_T_6, _read_port_T_7) @[AXIReadBus.scala 24:53]
    node _read_port_T_9 = mux(_read_port_T_8, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _read_port_T_10 = mux(_read_port_T_5, UInt<1>("h1"), _read_port_T_9) @[Mux.scala 101:16]
    node read_port = mux(_read_port_T_2, UInt<1>("h0"), _read_port_T_10) @[Mux.scala 101:16]
    reg read_port_reg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIReadBus.scala 26:30]
    reg read_addr_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXIReadBus.scala 27:30]
    reg read_addr_reg_id : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[AXIReadBus.scala 28:33]
    reg read_addr_reg_size : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIReadBus.scala 29:35]
    reg read_addr_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIReadBus.scala 30:36]
    reg outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIReadBus.scala 31:28]
    io.slave[0].readAddr.valid <= UInt<1>("h0") @[AXIReadBus.scala 36:32]
    io.slave[0].readAddr.bits.addr <= UInt<1>("h0") @[AXIReadBus.scala 37:36]
    io.slave[0].readAddr.bits.id <= UInt<1>("h0") @[AXIReadBus.scala 38:34]
    io.slave[0].readAddr.bits.region is invalid @[AXIReadBus.scala 39:38]
    io.slave[0].readAddr.bits.len is invalid @[AXIReadBus.scala 40:35]
    io.slave[0].readAddr.bits.size <= UInt<1>("h0") @[AXIReadBus.scala 41:36]
    io.slave[0].readAddr.bits.burst is invalid @[AXIReadBus.scala 42:37]
    io.slave[0].readAddr.bits.lock is invalid @[AXIReadBus.scala 43:36]
    io.slave[0].readAddr.bits.cache is invalid @[AXIReadBus.scala 44:37]
    io.slave[0].readAddr.bits.prot is invalid @[AXIReadBus.scala 45:36]
    io.slave[0].readAddr.bits.qos is invalid @[AXIReadBus.scala 46:35]
    io.slave[0].readData.ready <= UInt<1>("h0") @[AXIReadBus.scala 47:32]
    io.slave[1].readAddr.valid <= UInt<1>("h0") @[AXIReadBus.scala 36:32]
    io.slave[1].readAddr.bits.addr <= UInt<1>("h0") @[AXIReadBus.scala 37:36]
    io.slave[1].readAddr.bits.id <= UInt<1>("h0") @[AXIReadBus.scala 38:34]
    io.slave[1].readAddr.bits.region is invalid @[AXIReadBus.scala 39:38]
    io.slave[1].readAddr.bits.len is invalid @[AXIReadBus.scala 40:35]
    io.slave[1].readAddr.bits.size <= UInt<1>("h0") @[AXIReadBus.scala 41:36]
    io.slave[1].readAddr.bits.burst is invalid @[AXIReadBus.scala 42:37]
    io.slave[1].readAddr.bits.lock is invalid @[AXIReadBus.scala 43:36]
    io.slave[1].readAddr.bits.cache is invalid @[AXIReadBus.scala 44:37]
    io.slave[1].readAddr.bits.prot is invalid @[AXIReadBus.scala 45:36]
    io.slave[1].readAddr.bits.qos is invalid @[AXIReadBus.scala 46:35]
    io.slave[1].readData.ready <= UInt<1>("h0") @[AXIReadBus.scala 47:32]
    io.slave[2].readAddr.valid <= UInt<1>("h0") @[AXIReadBus.scala 36:32]
    io.slave[2].readAddr.bits.addr <= UInt<1>("h0") @[AXIReadBus.scala 37:36]
    io.slave[2].readAddr.bits.id <= UInt<1>("h0") @[AXIReadBus.scala 38:34]
    io.slave[2].readAddr.bits.region is invalid @[AXIReadBus.scala 39:38]
    io.slave[2].readAddr.bits.len is invalid @[AXIReadBus.scala 40:35]
    io.slave[2].readAddr.bits.size <= UInt<1>("h0") @[AXIReadBus.scala 41:36]
    io.slave[2].readAddr.bits.burst is invalid @[AXIReadBus.scala 42:37]
    io.slave[2].readAddr.bits.lock is invalid @[AXIReadBus.scala 43:36]
    io.slave[2].readAddr.bits.cache is invalid @[AXIReadBus.scala 44:37]
    io.slave[2].readAddr.bits.prot is invalid @[AXIReadBus.scala 45:36]
    io.slave[2].readAddr.bits.qos is invalid @[AXIReadBus.scala 46:35]
    io.slave[2].readData.ready <= UInt<1>("h0") @[AXIReadBus.scala 47:32]
    io.master.readData.valid <= UInt<1>("h0") @[AXIReadBus.scala 50:28]
    io.master.readData.bits.data <= UInt<1>("h0") @[AXIReadBus.scala 51:32]
    io.master.readData.bits.resp <= UInt<1>("h0") @[AXIReadBus.scala 52:32]
    io.master.readData.bits.id is invalid @[AXIReadBus.scala 53:30]
    io.master.readData.bits.last <= UInt<1>("h0") @[AXIReadBus.scala 54:32]
    node _io_master_readAddr_ready_T = not(outstanding) @[AXIReadBus.scala 55:31]
    io.master.readAddr.ready <= _io_master_readAddr_ready_T @[AXIReadBus.scala 55:28]
    node _T = and(io.master.readAddr.ready, io.master.readAddr.valid) @[Decoupled.scala 52:35]
    when _T : @[AXIReadBus.scala 57:33]
      outstanding <= UInt<1>("h1") @[AXIReadBus.scala 58:17]
      read_port_reg <= read_port @[AXIReadBus.scala 59:19]
      read_addr_reg <= io.master.readAddr.bits.addr @[AXIReadBus.scala 60:19]
      read_addr_reg_id <= io.master.readAddr.bits.id @[AXIReadBus.scala 61:22]
      read_addr_reg_size <= io.master.readAddr.bits.size @[AXIReadBus.scala 62:24]
      read_addr_reg_valid <= UInt<1>("h1") @[AXIReadBus.scala 63:25]
    when read_addr_reg_valid : @[AXIReadBus.scala 66:29]
      node _T_1 = bits(read_port_reg, 1, 0)
      when io.slave[_T_1].readAddr.ready : @[AXIReadBus.scala 67:50]
        read_addr_reg_valid <= UInt<1>("h0") @[AXIReadBus.scala 68:27]
    when outstanding : @[AXIReadBus.scala 72:21]
      node _io_master_readData_valid_T = bits(read_port_reg, 1, 0)
      io.master.readData.valid <= io.slave[_io_master_readData_valid_T].readData.valid @[AXIReadBus.scala 73:30]
      node _io_master_readData_bits_data_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.data <= io.slave[_io_master_readData_bits_data_T].readData.bits.data @[AXIReadBus.scala 74:34]
      node _io_master_readData_bits_resp_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.resp <= io.slave[_io_master_readData_bits_resp_T].readData.bits.resp @[AXIReadBus.scala 75:34]
      node _io_master_readData_bits_last_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.last <= io.slave[_io_master_readData_bits_last_T].readData.bits.last @[AXIReadBus.scala 76:34]
      node _io_master_readData_bits_id_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.id <= io.slave[_io_master_readData_bits_id_T].readData.bits.id @[AXIReadBus.scala 77:32]
      node _T_2 = bits(read_port_reg, 1, 0)
      io.slave[_T_2].readAddr.bits.addr <= read_addr_reg @[AXIReadBus.scala 78:48]
      node _T_3 = bits(read_port_reg, 1, 0)
      io.slave[_T_3].readAddr.valid <= read_addr_reg_valid @[AXIReadBus.scala 79:44]
      node _T_4 = bits(read_port_reg, 1, 0)
      io.slave[_T_4].readData.ready <= io.master.readData.ready @[AXIReadBus.scala 80:44]
      node _T_5 = bits(read_port_reg, 1, 0)
      io.slave[_T_5].readAddr.bits.size <= read_addr_reg_size @[AXIReadBus.scala 81:48]
      node _T_6 = bits(read_port_reg, 1, 0)
      io.slave[_T_6].readAddr.bits.id <= read_addr_reg_id @[AXIReadBus.scala 82:46]
      node _T_7 = and(io.master.readData.ready, io.master.readData.valid) @[Decoupled.scala 52:35]
      when _T_7 : @[AXIReadBus.scala 83:35]
        outstanding <= UInt<1>("h0") @[AXIReadBus.scala 84:19]

  module AXIReadBus_2 :
    input clock : Clock
    input reset : Reset
    output io : { master : { flip readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, slave : { readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[3]}

    node _read_port_T = geq(io.master.readAddr.bits.addr, UInt<16>("h8000")) @[AXIReadBus.scala 24:35]
    node _read_port_T_1 = lt(io.master.readAddr.bits.addr, UInt<17>("h10000")) @[AXIReadBus.scala 24:85]
    node _read_port_T_2 = and(_read_port_T, _read_port_T_1) @[AXIReadBus.scala 24:53]
    node _read_port_T_3 = geq(io.master.readAddr.bits.addr, UInt<21>("h100000")) @[AXIReadBus.scala 24:35]
    node _read_port_T_4 = lt(io.master.readAddr.bits.addr, UInt<22>("h300000")) @[AXIReadBus.scala 24:85]
    node _read_port_T_5 = and(_read_port_T_3, _read_port_T_4) @[AXIReadBus.scala 24:53]
    node _read_port_T_6 = geq(io.master.readAddr.bits.addr, UInt<22>("h300000")) @[AXIReadBus.scala 24:35]
    node _read_port_T_7 = lt(io.master.readAddr.bits.addr, UInt<23>("h400000")) @[AXIReadBus.scala 24:85]
    node _read_port_T_8 = and(_read_port_T_6, _read_port_T_7) @[AXIReadBus.scala 24:53]
    node _read_port_T_9 = mux(_read_port_T_8, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _read_port_T_10 = mux(_read_port_T_5, UInt<1>("h1"), _read_port_T_9) @[Mux.scala 101:16]
    node read_port = mux(_read_port_T_2, UInt<1>("h0"), _read_port_T_10) @[Mux.scala 101:16]
    reg read_port_reg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIReadBus.scala 26:30]
    reg read_addr_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXIReadBus.scala 27:30]
    reg read_addr_reg_id : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[AXIReadBus.scala 28:33]
    reg read_addr_reg_size : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIReadBus.scala 29:35]
    reg read_addr_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIReadBus.scala 30:36]
    reg outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIReadBus.scala 31:28]
    io.slave[0].readAddr.valid <= UInt<1>("h0") @[AXIReadBus.scala 36:32]
    io.slave[0].readAddr.bits.addr <= UInt<1>("h0") @[AXIReadBus.scala 37:36]
    io.slave[0].readAddr.bits.id <= UInt<1>("h0") @[AXIReadBus.scala 38:34]
    io.slave[0].readAddr.bits.region is invalid @[AXIReadBus.scala 39:38]
    io.slave[0].readAddr.bits.len is invalid @[AXIReadBus.scala 40:35]
    io.slave[0].readAddr.bits.size <= UInt<1>("h0") @[AXIReadBus.scala 41:36]
    io.slave[0].readAddr.bits.burst is invalid @[AXIReadBus.scala 42:37]
    io.slave[0].readAddr.bits.lock is invalid @[AXIReadBus.scala 43:36]
    io.slave[0].readAddr.bits.cache is invalid @[AXIReadBus.scala 44:37]
    io.slave[0].readAddr.bits.prot is invalid @[AXIReadBus.scala 45:36]
    io.slave[0].readAddr.bits.qos is invalid @[AXIReadBus.scala 46:35]
    io.slave[0].readData.ready <= UInt<1>("h0") @[AXIReadBus.scala 47:32]
    io.slave[1].readAddr.valid <= UInt<1>("h0") @[AXIReadBus.scala 36:32]
    io.slave[1].readAddr.bits.addr <= UInt<1>("h0") @[AXIReadBus.scala 37:36]
    io.slave[1].readAddr.bits.id <= UInt<1>("h0") @[AXIReadBus.scala 38:34]
    io.slave[1].readAddr.bits.region is invalid @[AXIReadBus.scala 39:38]
    io.slave[1].readAddr.bits.len is invalid @[AXIReadBus.scala 40:35]
    io.slave[1].readAddr.bits.size <= UInt<1>("h0") @[AXIReadBus.scala 41:36]
    io.slave[1].readAddr.bits.burst is invalid @[AXIReadBus.scala 42:37]
    io.slave[1].readAddr.bits.lock is invalid @[AXIReadBus.scala 43:36]
    io.slave[1].readAddr.bits.cache is invalid @[AXIReadBus.scala 44:37]
    io.slave[1].readAddr.bits.prot is invalid @[AXIReadBus.scala 45:36]
    io.slave[1].readAddr.bits.qos is invalid @[AXIReadBus.scala 46:35]
    io.slave[1].readData.ready <= UInt<1>("h0") @[AXIReadBus.scala 47:32]
    io.slave[2].readAddr.valid <= UInt<1>("h0") @[AXIReadBus.scala 36:32]
    io.slave[2].readAddr.bits.addr <= UInt<1>("h0") @[AXIReadBus.scala 37:36]
    io.slave[2].readAddr.bits.id <= UInt<1>("h0") @[AXIReadBus.scala 38:34]
    io.slave[2].readAddr.bits.region is invalid @[AXIReadBus.scala 39:38]
    io.slave[2].readAddr.bits.len is invalid @[AXIReadBus.scala 40:35]
    io.slave[2].readAddr.bits.size <= UInt<1>("h0") @[AXIReadBus.scala 41:36]
    io.slave[2].readAddr.bits.burst is invalid @[AXIReadBus.scala 42:37]
    io.slave[2].readAddr.bits.lock is invalid @[AXIReadBus.scala 43:36]
    io.slave[2].readAddr.bits.cache is invalid @[AXIReadBus.scala 44:37]
    io.slave[2].readAddr.bits.prot is invalid @[AXIReadBus.scala 45:36]
    io.slave[2].readAddr.bits.qos is invalid @[AXIReadBus.scala 46:35]
    io.slave[2].readData.ready <= UInt<1>("h0") @[AXIReadBus.scala 47:32]
    io.master.readData.valid <= UInt<1>("h0") @[AXIReadBus.scala 50:28]
    io.master.readData.bits.data <= UInt<1>("h0") @[AXIReadBus.scala 51:32]
    io.master.readData.bits.resp <= UInt<1>("h0") @[AXIReadBus.scala 52:32]
    io.master.readData.bits.id is invalid @[AXIReadBus.scala 53:30]
    io.master.readData.bits.last <= UInt<1>("h0") @[AXIReadBus.scala 54:32]
    node _io_master_readAddr_ready_T = not(outstanding) @[AXIReadBus.scala 55:31]
    io.master.readAddr.ready <= _io_master_readAddr_ready_T @[AXIReadBus.scala 55:28]
    node _T = and(io.master.readAddr.ready, io.master.readAddr.valid) @[Decoupled.scala 52:35]
    when _T : @[AXIReadBus.scala 57:33]
      outstanding <= UInt<1>("h1") @[AXIReadBus.scala 58:17]
      read_port_reg <= read_port @[AXIReadBus.scala 59:19]
      read_addr_reg <= io.master.readAddr.bits.addr @[AXIReadBus.scala 60:19]
      read_addr_reg_id <= io.master.readAddr.bits.id @[AXIReadBus.scala 61:22]
      read_addr_reg_size <= io.master.readAddr.bits.size @[AXIReadBus.scala 62:24]
      read_addr_reg_valid <= UInt<1>("h1") @[AXIReadBus.scala 63:25]
    when read_addr_reg_valid : @[AXIReadBus.scala 66:29]
      node _T_1 = bits(read_port_reg, 1, 0)
      when io.slave[_T_1].readAddr.ready : @[AXIReadBus.scala 67:50]
        read_addr_reg_valid <= UInt<1>("h0") @[AXIReadBus.scala 68:27]
    when outstanding : @[AXIReadBus.scala 72:21]
      node _io_master_readData_valid_T = bits(read_port_reg, 1, 0)
      io.master.readData.valid <= io.slave[_io_master_readData_valid_T].readData.valid @[AXIReadBus.scala 73:30]
      node _io_master_readData_bits_data_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.data <= io.slave[_io_master_readData_bits_data_T].readData.bits.data @[AXIReadBus.scala 74:34]
      node _io_master_readData_bits_resp_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.resp <= io.slave[_io_master_readData_bits_resp_T].readData.bits.resp @[AXIReadBus.scala 75:34]
      node _io_master_readData_bits_last_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.last <= io.slave[_io_master_readData_bits_last_T].readData.bits.last @[AXIReadBus.scala 76:34]
      node _io_master_readData_bits_id_T = bits(read_port_reg, 1, 0)
      io.master.readData.bits.id <= io.slave[_io_master_readData_bits_id_T].readData.bits.id @[AXIReadBus.scala 77:32]
      node _T_2 = bits(read_port_reg, 1, 0)
      io.slave[_T_2].readAddr.bits.addr <= read_addr_reg @[AXIReadBus.scala 78:48]
      node _T_3 = bits(read_port_reg, 1, 0)
      io.slave[_T_3].readAddr.valid <= read_addr_reg_valid @[AXIReadBus.scala 79:44]
      node _T_4 = bits(read_port_reg, 1, 0)
      io.slave[_T_4].readData.ready <= io.master.readData.ready @[AXIReadBus.scala 80:44]
      node _T_5 = bits(read_port_reg, 1, 0)
      io.slave[_T_5].readAddr.bits.size <= read_addr_reg_size @[AXIReadBus.scala 81:48]
      node _T_6 = bits(read_port_reg, 1, 0)
      io.slave[_T_6].readAddr.bits.id <= read_addr_reg_id @[AXIReadBus.scala 82:46]
      node _T_7 = and(io.master.readData.ready, io.master.readData.valid) @[Decoupled.scala 52:35]
      when _T_7 : @[AXIReadBus.scala 83:35]
        outstanding <= UInt<1>("h0") @[AXIReadBus.scala 84:19]

  module RRArbiter :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}[3], out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, chosen : UInt<2>}

    wire choice : UInt
    choice <= UInt<2>("h2")
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[io.chosen].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    reg lastGrant : UInt<2>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 82:76]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 82:76]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 45:68]
    node _ctrl_T_1 = or(_ctrl_T, validMask_2) @[Arbiter.scala 45:68]
    node _ctrl_T_2 = or(_ctrl_T_1, io.in[0].valid) @[Arbiter.scala 45:68]
    node _ctrl_T_3 = or(_ctrl_T_2, io.in[1].valid) @[Arbiter.scala 45:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_4 = eq(_ctrl_T_2, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_5 = eq(_ctrl_T_3, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_3) @[Arbiter.scala 86:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 86:34]
    node _T_3 = or(_T_2, ctrl_4) @[Arbiter.scala 86:50]
    node _T_4 = and(ctrl_2, grantMask_2) @[Arbiter.scala 86:34]
    node _T_5 = or(_T_4, ctrl_5) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 74:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 74:16]
    node _io_in_2_ready_T = and(_T_5, io.out.ready) @[Arbiter.scala 74:21]
    io.in[2].ready <= _io_in_2_ready_T @[Arbiter.scala 74:16]
    when io.in[1].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h1") @[Arbiter.scala 91:35]
    when io.in[0].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h0") @[Arbiter.scala 91:35]
    when validMask_2 : @[Arbiter.scala 93:24]
      choice <= UInt<2>("h2") @[Arbiter.scala 93:33]
    when validMask_1 : @[Arbiter.scala 93:24]
      choice <= UInt<1>("h1") @[Arbiter.scala 93:33]

  module AXISlaveReadMux :
    input clock : Clock
    input reset : Reset
    output io : { out : { readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, in : { flip readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[3]}

    wire _mask_WIRE : UInt<1>[3] @[AXISlaveReadMux.scala 23:33]
    _mask_WIRE[0] <= UInt<1>("h1") @[AXISlaveReadMux.scala 23:33]
    _mask_WIRE[1] <= UInt<1>("h1") @[AXISlaveReadMux.scala 23:33]
    _mask_WIRE[2] <= UInt<1>("h1") @[AXISlaveReadMux.scala 23:33]
    wire mask : UInt<1>[3]
    mask <= _mask_WIRE
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[AXISlaveReadMux.scala 27:22]
    node _outstanding_T = or(io.in[0].readAddr.valid, io.in[1].readAddr.valid) @[AXISlaveReadMux.scala 29:95]
    node _outstanding_T_1 = or(_outstanding_T, io.in[2].readAddr.valid) @[AXISlaveReadMux.scala 29:95]
    wire outstanding : UInt<1>
    outstanding <= _outstanding_T_1
    inst arbiter of RRArbiter @[AXISlaveReadMux.scala 31:23]
    arbiter.clock <= clock
    arbiter.reset <= reset
    reg chosen_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveReadMux.scala 32:27]
    reg ar_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveReadMux.scala 33:30]
    wire _address_reg_WIRE : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}
    _address_reg_WIRE.qos is invalid
    _address_reg_WIRE.prot is invalid
    _address_reg_WIRE.cache is invalid
    _address_reg_WIRE.lock is invalid
    _address_reg_WIRE.burst is invalid
    _address_reg_WIRE.size <= UInt<1>("h0")
    _address_reg_WIRE.len is invalid
    _address_reg_WIRE.region is invalid
    _address_reg_WIRE.addr <= UInt<1>("h0")
    _address_reg_WIRE.id <= UInt<1>("h0")
    reg address_reg : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}, clock with :
      reset => (reset, _address_reg_WIRE) @[AXISlaveReadMux.scala 34:28]
    wire _data_reg_WIRE : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}
    _data_reg_WIRE.last <= UInt<1>("h0")
    _data_reg_WIRE.resp <= UInt<1>("h0")
    _data_reg_WIRE.data <= UInt<1>("h0")
    _data_reg_WIRE.id <= UInt<1>("h0")
    reg data_reg : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}, clock with :
      reset => (reset, _data_reg_WIRE) @[AXISlaveReadMux.scala 39:25]
    io.out.readAddr.bits.qos is invalid @[AXISlaveReadMux.scala 46:28]
    io.out.readAddr.bits.len is invalid @[AXISlaveReadMux.scala 47:28]
    io.out.readAddr.bits.cache is invalid @[AXISlaveReadMux.scala 48:30]
    io.out.readAddr.bits.lock is invalid @[AXISlaveReadMux.scala 49:29]
    io.out.readAddr.bits.size <= UInt<1>("h0") @[AXISlaveReadMux.scala 50:29]
    io.out.readAddr.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 51:27]
    io.out.readAddr.bits.prot is invalid @[AXISlaveReadMux.scala 52:29]
    io.out.readAddr.bits.region is invalid @[AXISlaveReadMux.scala 53:31]
    io.out.readAddr.bits.burst is invalid @[AXISlaveReadMux.scala 54:30]
    io.out.readData.ready <= UInt<1>("h0") @[AXISlaveReadMux.scala 55:25]
    arbiter.io.out.ready <= UInt<1>("h1") @[AXISlaveReadMux.scala 56:24]
    io.in[0].readData.bits.data <= UInt<1>("h0") @[AXISlaveReadMux.scala 59:33]
    io.in[0].readData.valid <= UInt<1>("h0") @[AXISlaveReadMux.scala 60:29]
    io.in[0].readData.bits.resp <= UInt<1>("h0") @[AXISlaveReadMux.scala 61:33]
    io.in[0].readData.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 62:31]
    io.in[0].readData.bits.last <= UInt<1>("h1") @[AXISlaveReadMux.scala 63:33]
    io.in[1].readData.bits.data <= UInt<1>("h0") @[AXISlaveReadMux.scala 59:33]
    io.in[1].readData.valid <= UInt<1>("h0") @[AXISlaveReadMux.scala 60:29]
    io.in[1].readData.bits.resp <= UInt<1>("h0") @[AXISlaveReadMux.scala 61:33]
    io.in[1].readData.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 62:31]
    io.in[1].readData.bits.last <= UInt<1>("h1") @[AXISlaveReadMux.scala 63:33]
    io.in[2].readData.bits.data <= UInt<1>("h0") @[AXISlaveReadMux.scala 59:33]
    io.in[2].readData.valid <= UInt<1>("h0") @[AXISlaveReadMux.scala 60:29]
    io.in[2].readData.bits.resp <= UInt<1>("h0") @[AXISlaveReadMux.scala 61:33]
    io.in[2].readData.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 62:31]
    io.in[2].readData.bits.last <= UInt<1>("h1") @[AXISlaveReadMux.scala 63:33]
    node _io_in_0_readAddr_ready_T = and(arbiter.io.in[0].ready, mask[0]) @[AXISlaveReadMux.scala 67:55]
    io.in[0].readAddr.ready <= _io_in_0_readAddr_ready_T @[AXISlaveReadMux.scala 67:29]
    node _arbiter_io_in_0_valid_T = and(io.in[0].readAddr.valid, mask[0]) @[AXISlaveReadMux.scala 68:55]
    arbiter.io.in[0].valid <= _arbiter_io_in_0_valid_T @[AXISlaveReadMux.scala 68:28]
    arbiter.io.in[0].bits <= UInt<1>("h0") @[AXISlaveReadMux.scala 69:27]
    node _io_in_1_readAddr_ready_T = and(arbiter.io.in[1].ready, mask[1]) @[AXISlaveReadMux.scala 67:55]
    io.in[1].readAddr.ready <= _io_in_1_readAddr_ready_T @[AXISlaveReadMux.scala 67:29]
    node _arbiter_io_in_1_valid_T = and(io.in[1].readAddr.valid, mask[1]) @[AXISlaveReadMux.scala 68:55]
    arbiter.io.in[1].valid <= _arbiter_io_in_1_valid_T @[AXISlaveReadMux.scala 68:28]
    arbiter.io.in[1].bits <= UInt<1>("h0") @[AXISlaveReadMux.scala 69:27]
    node _io_in_2_readAddr_ready_T = and(arbiter.io.in[2].ready, mask[2]) @[AXISlaveReadMux.scala 67:55]
    io.in[2].readAddr.ready <= _io_in_2_readAddr_ready_T @[AXISlaveReadMux.scala 67:29]
    node _arbiter_io_in_2_valid_T = and(io.in[2].readAddr.valid, mask[2]) @[AXISlaveReadMux.scala 68:55]
    arbiter.io.in[2].valid <= _arbiter_io_in_2_valid_T @[AXISlaveReadMux.scala 68:28]
    arbiter.io.in[2].bits <= UInt<1>("h0") @[AXISlaveReadMux.scala 69:27]
    io.out.readAddr.valid <= ar_determined @[AXISlaveReadMux.scala 72:25]
    node _T = eq(UInt<2>("h0"), state) @[AXISlaveReadMux.scala 74:16]
    when _T : @[AXISlaveReadMux.scala 74:16]
      when outstanding : @[AXISlaveReadMux.scala 76:24]
        state <= UInt<2>("h1") @[AXISlaveReadMux.scala 77:15]
    else :
      node _T_1 = eq(UInt<2>("h1"), state) @[AXISlaveReadMux.scala 74:16]
      when _T_1 : @[AXISlaveReadMux.scala 74:16]
        node _T_2 = and(io.out.readData.ready, io.out.readData.valid) @[Decoupled.scala 52:35]
        when _T_2 : @[AXISlaveReadMux.scala 81:33]
          state <= UInt<2>("h2") @[AXISlaveReadMux.scala 82:15]
      else :
        node _T_3 = eq(UInt<2>("h2"), state) @[AXISlaveReadMux.scala 74:16]
        when _T_3 : @[AXISlaveReadMux.scala 74:16]
          node _T_4 = or(chosen_reg, UInt<2>("h0"))
          node _T_5 = bits(_T_4, 1, 0)
          node _T_6 = and(io.in[_T_5].readData.ready, io.in[_T_5].readData.valid) @[Decoupled.scala 52:35]
          when _T_6 : @[AXISlaveReadMux.scala 86:44]
            state <= UInt<2>("h0") @[AXISlaveReadMux.scala 87:15]
    node _T_7 = eq(state, UInt<2>("h0")) @[AXISlaveReadMux.scala 92:14]
    when _T_7 : @[AXISlaveReadMux.scala 92:24]
      mask[0] <= UInt<1>("h1") @[AXISlaveReadMux.scala 93:20]
      mask[1] <= UInt<1>("h1") @[AXISlaveReadMux.scala 93:20]
      mask[2] <= UInt<1>("h1") @[AXISlaveReadMux.scala 93:20]
      when arbiter.io.out.valid : @[AXISlaveReadMux.scala 94:31]
        chosen_reg <= arbiter.io.chosen @[AXISlaveReadMux.scala 95:18]
        address_reg <= io.in[arbiter.io.chosen].readAddr.bits @[AXISlaveReadMux.scala 96:19]
        ar_determined <= UInt<1>("h1") @[AXISlaveReadMux.scala 97:21]
      io.out.readData.ready <= UInt<1>("h0") @[AXISlaveReadMux.scala 99:27]
    else :
      node _T_8 = eq(state, UInt<2>("h1")) @[AXISlaveReadMux.scala 101:19]
      when _T_8 : @[AXISlaveReadMux.scala 101:33]
        mask[0] <= UInt<1>("h0") @[AXISlaveReadMux.scala 102:22]
        mask[1] <= UInt<1>("h0") @[AXISlaveReadMux.scala 102:22]
        mask[2] <= UInt<1>("h0") @[AXISlaveReadMux.scala 102:22]
        node _T_9 = and(io.out.readAddr.ready, io.out.readAddr.valid) @[Decoupled.scala 52:35]
        when _T_9 : @[AXISlaveReadMux.scala 103:33]
          ar_determined <= UInt<1>("h0") @[AXISlaveReadMux.scala 104:23]
        node _T_10 = and(io.out.readData.ready, io.out.readData.valid) @[Decoupled.scala 52:35]
        when _T_10 : @[AXISlaveReadMux.scala 106:33]
          data_reg <= io.out.readData.bits @[AXISlaveReadMux.scala 107:18]
        io.out.readData.ready <= UInt<1>("h1") @[AXISlaveReadMux.scala 109:29]
      else :
        node _T_11 = eq(state, UInt<2>("h2")) @[AXISlaveReadMux.scala 111:19]
        when _T_11 : @[AXISlaveReadMux.scala 111:31]
          mask[0] <= UInt<1>("h0") @[AXISlaveReadMux.scala 112:20]
          mask[1] <= UInt<1>("h0") @[AXISlaveReadMux.scala 112:20]
          mask[2] <= UInt<1>("h0") @[AXISlaveReadMux.scala 112:20]
          node _T_12 = or(chosen_reg, UInt<2>("h0"))
          node _T_13 = bits(_T_12, 1, 0)
          io.in[_T_13].readData.valid <= UInt<1>("h1") @[AXISlaveReadMux.scala 113:38]
    io.out.readAddr.bits <= address_reg @[AXISlaveReadMux.scala 116:24]
    node _T_14 = or(chosen_reg, UInt<2>("h0"))
    node _T_15 = bits(_T_14, 1, 0)
    io.in[_T_15].readData.bits <= data_reg @[AXISlaveReadMux.scala 117:35]

  module RRArbiter_1 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}[3], out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, chosen : UInt<2>}

    wire choice : UInt
    choice <= UInt<2>("h2")
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[io.chosen].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    reg lastGrant : UInt<2>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 82:76]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 82:76]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 45:68]
    node _ctrl_T_1 = or(_ctrl_T, validMask_2) @[Arbiter.scala 45:68]
    node _ctrl_T_2 = or(_ctrl_T_1, io.in[0].valid) @[Arbiter.scala 45:68]
    node _ctrl_T_3 = or(_ctrl_T_2, io.in[1].valid) @[Arbiter.scala 45:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_4 = eq(_ctrl_T_2, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_5 = eq(_ctrl_T_3, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_3) @[Arbiter.scala 86:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 86:34]
    node _T_3 = or(_T_2, ctrl_4) @[Arbiter.scala 86:50]
    node _T_4 = and(ctrl_2, grantMask_2) @[Arbiter.scala 86:34]
    node _T_5 = or(_T_4, ctrl_5) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 74:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 74:16]
    node _io_in_2_ready_T = and(_T_5, io.out.ready) @[Arbiter.scala 74:21]
    io.in[2].ready <= _io_in_2_ready_T @[Arbiter.scala 74:16]
    when io.in[1].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h1") @[Arbiter.scala 91:35]
    when io.in[0].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h0") @[Arbiter.scala 91:35]
    when validMask_2 : @[Arbiter.scala 93:24]
      choice <= UInt<2>("h2") @[Arbiter.scala 93:33]
    when validMask_1 : @[Arbiter.scala 93:24]
      choice <= UInt<1>("h1") @[Arbiter.scala 93:33]

  module AXISlaveReadMux_1 :
    input clock : Clock
    input reset : Reset
    output io : { out : { readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, in : { flip readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[3]}

    wire _mask_WIRE : UInt<1>[3] @[AXISlaveReadMux.scala 23:33]
    _mask_WIRE[0] <= UInt<1>("h1") @[AXISlaveReadMux.scala 23:33]
    _mask_WIRE[1] <= UInt<1>("h1") @[AXISlaveReadMux.scala 23:33]
    _mask_WIRE[2] <= UInt<1>("h1") @[AXISlaveReadMux.scala 23:33]
    wire mask : UInt<1>[3]
    mask <= _mask_WIRE
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[AXISlaveReadMux.scala 27:22]
    node _outstanding_T = or(io.in[0].readAddr.valid, io.in[1].readAddr.valid) @[AXISlaveReadMux.scala 29:95]
    node _outstanding_T_1 = or(_outstanding_T, io.in[2].readAddr.valid) @[AXISlaveReadMux.scala 29:95]
    wire outstanding : UInt<1>
    outstanding <= _outstanding_T_1
    inst arbiter of RRArbiter_1 @[AXISlaveReadMux.scala 31:23]
    arbiter.clock <= clock
    arbiter.reset <= reset
    reg chosen_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveReadMux.scala 32:27]
    reg ar_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveReadMux.scala 33:30]
    wire _address_reg_WIRE : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}
    _address_reg_WIRE.qos is invalid
    _address_reg_WIRE.prot is invalid
    _address_reg_WIRE.cache is invalid
    _address_reg_WIRE.lock is invalid
    _address_reg_WIRE.burst is invalid
    _address_reg_WIRE.size <= UInt<1>("h0")
    _address_reg_WIRE.len is invalid
    _address_reg_WIRE.region is invalid
    _address_reg_WIRE.addr <= UInt<1>("h0")
    _address_reg_WIRE.id <= UInt<1>("h0")
    reg address_reg : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}, clock with :
      reset => (reset, _address_reg_WIRE) @[AXISlaveReadMux.scala 34:28]
    wire _data_reg_WIRE : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}
    _data_reg_WIRE.last <= UInt<1>("h0")
    _data_reg_WIRE.resp <= UInt<1>("h0")
    _data_reg_WIRE.data <= UInt<1>("h0")
    _data_reg_WIRE.id <= UInt<1>("h0")
    reg data_reg : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}, clock with :
      reset => (reset, _data_reg_WIRE) @[AXISlaveReadMux.scala 39:25]
    io.out.readAddr.bits.qos is invalid @[AXISlaveReadMux.scala 46:28]
    io.out.readAddr.bits.len is invalid @[AXISlaveReadMux.scala 47:28]
    io.out.readAddr.bits.cache is invalid @[AXISlaveReadMux.scala 48:30]
    io.out.readAddr.bits.lock is invalid @[AXISlaveReadMux.scala 49:29]
    io.out.readAddr.bits.size <= UInt<1>("h0") @[AXISlaveReadMux.scala 50:29]
    io.out.readAddr.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 51:27]
    io.out.readAddr.bits.prot is invalid @[AXISlaveReadMux.scala 52:29]
    io.out.readAddr.bits.region is invalid @[AXISlaveReadMux.scala 53:31]
    io.out.readAddr.bits.burst is invalid @[AXISlaveReadMux.scala 54:30]
    io.out.readData.ready <= UInt<1>("h0") @[AXISlaveReadMux.scala 55:25]
    arbiter.io.out.ready <= UInt<1>("h1") @[AXISlaveReadMux.scala 56:24]
    io.in[0].readData.bits.data <= UInt<1>("h0") @[AXISlaveReadMux.scala 59:33]
    io.in[0].readData.valid <= UInt<1>("h0") @[AXISlaveReadMux.scala 60:29]
    io.in[0].readData.bits.resp <= UInt<1>("h0") @[AXISlaveReadMux.scala 61:33]
    io.in[0].readData.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 62:31]
    io.in[0].readData.bits.last <= UInt<1>("h1") @[AXISlaveReadMux.scala 63:33]
    io.in[1].readData.bits.data <= UInt<1>("h0") @[AXISlaveReadMux.scala 59:33]
    io.in[1].readData.valid <= UInt<1>("h0") @[AXISlaveReadMux.scala 60:29]
    io.in[1].readData.bits.resp <= UInt<1>("h0") @[AXISlaveReadMux.scala 61:33]
    io.in[1].readData.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 62:31]
    io.in[1].readData.bits.last <= UInt<1>("h1") @[AXISlaveReadMux.scala 63:33]
    io.in[2].readData.bits.data <= UInt<1>("h0") @[AXISlaveReadMux.scala 59:33]
    io.in[2].readData.valid <= UInt<1>("h0") @[AXISlaveReadMux.scala 60:29]
    io.in[2].readData.bits.resp <= UInt<1>("h0") @[AXISlaveReadMux.scala 61:33]
    io.in[2].readData.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 62:31]
    io.in[2].readData.bits.last <= UInt<1>("h1") @[AXISlaveReadMux.scala 63:33]
    node _io_in_0_readAddr_ready_T = and(arbiter.io.in[0].ready, mask[0]) @[AXISlaveReadMux.scala 67:55]
    io.in[0].readAddr.ready <= _io_in_0_readAddr_ready_T @[AXISlaveReadMux.scala 67:29]
    node _arbiter_io_in_0_valid_T = and(io.in[0].readAddr.valid, mask[0]) @[AXISlaveReadMux.scala 68:55]
    arbiter.io.in[0].valid <= _arbiter_io_in_0_valid_T @[AXISlaveReadMux.scala 68:28]
    arbiter.io.in[0].bits <= UInt<1>("h0") @[AXISlaveReadMux.scala 69:27]
    node _io_in_1_readAddr_ready_T = and(arbiter.io.in[1].ready, mask[1]) @[AXISlaveReadMux.scala 67:55]
    io.in[1].readAddr.ready <= _io_in_1_readAddr_ready_T @[AXISlaveReadMux.scala 67:29]
    node _arbiter_io_in_1_valid_T = and(io.in[1].readAddr.valid, mask[1]) @[AXISlaveReadMux.scala 68:55]
    arbiter.io.in[1].valid <= _arbiter_io_in_1_valid_T @[AXISlaveReadMux.scala 68:28]
    arbiter.io.in[1].bits <= UInt<1>("h0") @[AXISlaveReadMux.scala 69:27]
    node _io_in_2_readAddr_ready_T = and(arbiter.io.in[2].ready, mask[2]) @[AXISlaveReadMux.scala 67:55]
    io.in[2].readAddr.ready <= _io_in_2_readAddr_ready_T @[AXISlaveReadMux.scala 67:29]
    node _arbiter_io_in_2_valid_T = and(io.in[2].readAddr.valid, mask[2]) @[AXISlaveReadMux.scala 68:55]
    arbiter.io.in[2].valid <= _arbiter_io_in_2_valid_T @[AXISlaveReadMux.scala 68:28]
    arbiter.io.in[2].bits <= UInt<1>("h0") @[AXISlaveReadMux.scala 69:27]
    io.out.readAddr.valid <= ar_determined @[AXISlaveReadMux.scala 72:25]
    node _T = eq(UInt<2>("h0"), state) @[AXISlaveReadMux.scala 74:16]
    when _T : @[AXISlaveReadMux.scala 74:16]
      when outstanding : @[AXISlaveReadMux.scala 76:24]
        state <= UInt<2>("h1") @[AXISlaveReadMux.scala 77:15]
    else :
      node _T_1 = eq(UInt<2>("h1"), state) @[AXISlaveReadMux.scala 74:16]
      when _T_1 : @[AXISlaveReadMux.scala 74:16]
        node _T_2 = and(io.out.readData.ready, io.out.readData.valid) @[Decoupled.scala 52:35]
        when _T_2 : @[AXISlaveReadMux.scala 81:33]
          state <= UInt<2>("h2") @[AXISlaveReadMux.scala 82:15]
      else :
        node _T_3 = eq(UInt<2>("h2"), state) @[AXISlaveReadMux.scala 74:16]
        when _T_3 : @[AXISlaveReadMux.scala 74:16]
          node _T_4 = or(chosen_reg, UInt<2>("h0"))
          node _T_5 = bits(_T_4, 1, 0)
          node _T_6 = and(io.in[_T_5].readData.ready, io.in[_T_5].readData.valid) @[Decoupled.scala 52:35]
          when _T_6 : @[AXISlaveReadMux.scala 86:44]
            state <= UInt<2>("h0") @[AXISlaveReadMux.scala 87:15]
    node _T_7 = eq(state, UInt<2>("h0")) @[AXISlaveReadMux.scala 92:14]
    when _T_7 : @[AXISlaveReadMux.scala 92:24]
      mask[0] <= UInt<1>("h1") @[AXISlaveReadMux.scala 93:20]
      mask[1] <= UInt<1>("h1") @[AXISlaveReadMux.scala 93:20]
      mask[2] <= UInt<1>("h1") @[AXISlaveReadMux.scala 93:20]
      when arbiter.io.out.valid : @[AXISlaveReadMux.scala 94:31]
        chosen_reg <= arbiter.io.chosen @[AXISlaveReadMux.scala 95:18]
        address_reg <= io.in[arbiter.io.chosen].readAddr.bits @[AXISlaveReadMux.scala 96:19]
        ar_determined <= UInt<1>("h1") @[AXISlaveReadMux.scala 97:21]
      io.out.readData.ready <= UInt<1>("h0") @[AXISlaveReadMux.scala 99:27]
    else :
      node _T_8 = eq(state, UInt<2>("h1")) @[AXISlaveReadMux.scala 101:19]
      when _T_8 : @[AXISlaveReadMux.scala 101:33]
        mask[0] <= UInt<1>("h0") @[AXISlaveReadMux.scala 102:22]
        mask[1] <= UInt<1>("h0") @[AXISlaveReadMux.scala 102:22]
        mask[2] <= UInt<1>("h0") @[AXISlaveReadMux.scala 102:22]
        node _T_9 = and(io.out.readAddr.ready, io.out.readAddr.valid) @[Decoupled.scala 52:35]
        when _T_9 : @[AXISlaveReadMux.scala 103:33]
          ar_determined <= UInt<1>("h0") @[AXISlaveReadMux.scala 104:23]
        node _T_10 = and(io.out.readData.ready, io.out.readData.valid) @[Decoupled.scala 52:35]
        when _T_10 : @[AXISlaveReadMux.scala 106:33]
          data_reg <= io.out.readData.bits @[AXISlaveReadMux.scala 107:18]
        io.out.readData.ready <= UInt<1>("h1") @[AXISlaveReadMux.scala 109:29]
      else :
        node _T_11 = eq(state, UInt<2>("h2")) @[AXISlaveReadMux.scala 111:19]
        when _T_11 : @[AXISlaveReadMux.scala 111:31]
          mask[0] <= UInt<1>("h0") @[AXISlaveReadMux.scala 112:20]
          mask[1] <= UInt<1>("h0") @[AXISlaveReadMux.scala 112:20]
          mask[2] <= UInt<1>("h0") @[AXISlaveReadMux.scala 112:20]
          node _T_12 = or(chosen_reg, UInt<2>("h0"))
          node _T_13 = bits(_T_12, 1, 0)
          io.in[_T_13].readData.valid <= UInt<1>("h1") @[AXISlaveReadMux.scala 113:38]
    io.out.readAddr.bits <= address_reg @[AXISlaveReadMux.scala 116:24]
    node _T_14 = or(chosen_reg, UInt<2>("h0"))
    node _T_15 = bits(_T_14, 1, 0)
    io.in[_T_15].readData.bits <= data_reg @[AXISlaveReadMux.scala 117:35]

  module RRArbiter_2 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}[3], out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, chosen : UInt<2>}

    wire choice : UInt
    choice <= UInt<2>("h2")
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[io.chosen].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    reg lastGrant : UInt<2>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 82:76]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 82:76]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 45:68]
    node _ctrl_T_1 = or(_ctrl_T, validMask_2) @[Arbiter.scala 45:68]
    node _ctrl_T_2 = or(_ctrl_T_1, io.in[0].valid) @[Arbiter.scala 45:68]
    node _ctrl_T_3 = or(_ctrl_T_2, io.in[1].valid) @[Arbiter.scala 45:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_4 = eq(_ctrl_T_2, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_5 = eq(_ctrl_T_3, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_3) @[Arbiter.scala 86:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 86:34]
    node _T_3 = or(_T_2, ctrl_4) @[Arbiter.scala 86:50]
    node _T_4 = and(ctrl_2, grantMask_2) @[Arbiter.scala 86:34]
    node _T_5 = or(_T_4, ctrl_5) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 74:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 74:16]
    node _io_in_2_ready_T = and(_T_5, io.out.ready) @[Arbiter.scala 74:21]
    io.in[2].ready <= _io_in_2_ready_T @[Arbiter.scala 74:16]
    when io.in[1].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h1") @[Arbiter.scala 91:35]
    when io.in[0].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h0") @[Arbiter.scala 91:35]
    when validMask_2 : @[Arbiter.scala 93:24]
      choice <= UInt<2>("h2") @[Arbiter.scala 93:33]
    when validMask_1 : @[Arbiter.scala 93:24]
      choice <= UInt<1>("h1") @[Arbiter.scala 93:33]

  module AXISlaveReadMux_2 :
    input clock : Clock
    input reset : Reset
    output io : { out : { readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, in : { flip readAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, readData : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[3]}

    wire _mask_WIRE : UInt<1>[3] @[AXISlaveReadMux.scala 23:33]
    _mask_WIRE[0] <= UInt<1>("h1") @[AXISlaveReadMux.scala 23:33]
    _mask_WIRE[1] <= UInt<1>("h1") @[AXISlaveReadMux.scala 23:33]
    _mask_WIRE[2] <= UInt<1>("h1") @[AXISlaveReadMux.scala 23:33]
    wire mask : UInt<1>[3]
    mask <= _mask_WIRE
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[AXISlaveReadMux.scala 27:22]
    node _outstanding_T = or(io.in[0].readAddr.valid, io.in[1].readAddr.valid) @[AXISlaveReadMux.scala 29:95]
    node _outstanding_T_1 = or(_outstanding_T, io.in[2].readAddr.valid) @[AXISlaveReadMux.scala 29:95]
    wire outstanding : UInt<1>
    outstanding <= _outstanding_T_1
    inst arbiter of RRArbiter_2 @[AXISlaveReadMux.scala 31:23]
    arbiter.clock <= clock
    arbiter.reset <= reset
    reg chosen_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveReadMux.scala 32:27]
    reg ar_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveReadMux.scala 33:30]
    wire _address_reg_WIRE : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}
    _address_reg_WIRE.qos is invalid
    _address_reg_WIRE.prot is invalid
    _address_reg_WIRE.cache is invalid
    _address_reg_WIRE.lock is invalid
    _address_reg_WIRE.burst is invalid
    _address_reg_WIRE.size <= UInt<1>("h0")
    _address_reg_WIRE.len is invalid
    _address_reg_WIRE.region is invalid
    _address_reg_WIRE.addr <= UInt<1>("h0")
    _address_reg_WIRE.id <= UInt<1>("h0")
    reg address_reg : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}, clock with :
      reset => (reset, _address_reg_WIRE) @[AXISlaveReadMux.scala 34:28]
    wire _data_reg_WIRE : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}
    _data_reg_WIRE.last <= UInt<1>("h0")
    _data_reg_WIRE.resp <= UInt<1>("h0")
    _data_reg_WIRE.data <= UInt<1>("h0")
    _data_reg_WIRE.id <= UInt<1>("h0")
    reg data_reg : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}, clock with :
      reset => (reset, _data_reg_WIRE) @[AXISlaveReadMux.scala 39:25]
    io.out.readAddr.bits.qos is invalid @[AXISlaveReadMux.scala 46:28]
    io.out.readAddr.bits.len is invalid @[AXISlaveReadMux.scala 47:28]
    io.out.readAddr.bits.cache is invalid @[AXISlaveReadMux.scala 48:30]
    io.out.readAddr.bits.lock is invalid @[AXISlaveReadMux.scala 49:29]
    io.out.readAddr.bits.size <= UInt<1>("h0") @[AXISlaveReadMux.scala 50:29]
    io.out.readAddr.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 51:27]
    io.out.readAddr.bits.prot is invalid @[AXISlaveReadMux.scala 52:29]
    io.out.readAddr.bits.region is invalid @[AXISlaveReadMux.scala 53:31]
    io.out.readAddr.bits.burst is invalid @[AXISlaveReadMux.scala 54:30]
    io.out.readData.ready <= UInt<1>("h0") @[AXISlaveReadMux.scala 55:25]
    arbiter.io.out.ready <= UInt<1>("h1") @[AXISlaveReadMux.scala 56:24]
    io.in[0].readData.bits.data <= UInt<1>("h0") @[AXISlaveReadMux.scala 59:33]
    io.in[0].readData.valid <= UInt<1>("h0") @[AXISlaveReadMux.scala 60:29]
    io.in[0].readData.bits.resp <= UInt<1>("h0") @[AXISlaveReadMux.scala 61:33]
    io.in[0].readData.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 62:31]
    io.in[0].readData.bits.last <= UInt<1>("h1") @[AXISlaveReadMux.scala 63:33]
    io.in[1].readData.bits.data <= UInt<1>("h0") @[AXISlaveReadMux.scala 59:33]
    io.in[1].readData.valid <= UInt<1>("h0") @[AXISlaveReadMux.scala 60:29]
    io.in[1].readData.bits.resp <= UInt<1>("h0") @[AXISlaveReadMux.scala 61:33]
    io.in[1].readData.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 62:31]
    io.in[1].readData.bits.last <= UInt<1>("h1") @[AXISlaveReadMux.scala 63:33]
    io.in[2].readData.bits.data <= UInt<1>("h0") @[AXISlaveReadMux.scala 59:33]
    io.in[2].readData.valid <= UInt<1>("h0") @[AXISlaveReadMux.scala 60:29]
    io.in[2].readData.bits.resp <= UInt<1>("h0") @[AXISlaveReadMux.scala 61:33]
    io.in[2].readData.bits.id <= UInt<1>("h0") @[AXISlaveReadMux.scala 62:31]
    io.in[2].readData.bits.last <= UInt<1>("h1") @[AXISlaveReadMux.scala 63:33]
    node _io_in_0_readAddr_ready_T = and(arbiter.io.in[0].ready, mask[0]) @[AXISlaveReadMux.scala 67:55]
    io.in[0].readAddr.ready <= _io_in_0_readAddr_ready_T @[AXISlaveReadMux.scala 67:29]
    node _arbiter_io_in_0_valid_T = and(io.in[0].readAddr.valid, mask[0]) @[AXISlaveReadMux.scala 68:55]
    arbiter.io.in[0].valid <= _arbiter_io_in_0_valid_T @[AXISlaveReadMux.scala 68:28]
    arbiter.io.in[0].bits <= UInt<1>("h0") @[AXISlaveReadMux.scala 69:27]
    node _io_in_1_readAddr_ready_T = and(arbiter.io.in[1].ready, mask[1]) @[AXISlaveReadMux.scala 67:55]
    io.in[1].readAddr.ready <= _io_in_1_readAddr_ready_T @[AXISlaveReadMux.scala 67:29]
    node _arbiter_io_in_1_valid_T = and(io.in[1].readAddr.valid, mask[1]) @[AXISlaveReadMux.scala 68:55]
    arbiter.io.in[1].valid <= _arbiter_io_in_1_valid_T @[AXISlaveReadMux.scala 68:28]
    arbiter.io.in[1].bits <= UInt<1>("h0") @[AXISlaveReadMux.scala 69:27]
    node _io_in_2_readAddr_ready_T = and(arbiter.io.in[2].ready, mask[2]) @[AXISlaveReadMux.scala 67:55]
    io.in[2].readAddr.ready <= _io_in_2_readAddr_ready_T @[AXISlaveReadMux.scala 67:29]
    node _arbiter_io_in_2_valid_T = and(io.in[2].readAddr.valid, mask[2]) @[AXISlaveReadMux.scala 68:55]
    arbiter.io.in[2].valid <= _arbiter_io_in_2_valid_T @[AXISlaveReadMux.scala 68:28]
    arbiter.io.in[2].bits <= UInt<1>("h0") @[AXISlaveReadMux.scala 69:27]
    io.out.readAddr.valid <= ar_determined @[AXISlaveReadMux.scala 72:25]
    node _T = eq(UInt<2>("h0"), state) @[AXISlaveReadMux.scala 74:16]
    when _T : @[AXISlaveReadMux.scala 74:16]
      when outstanding : @[AXISlaveReadMux.scala 76:24]
        state <= UInt<2>("h1") @[AXISlaveReadMux.scala 77:15]
    else :
      node _T_1 = eq(UInt<2>("h1"), state) @[AXISlaveReadMux.scala 74:16]
      when _T_1 : @[AXISlaveReadMux.scala 74:16]
        node _T_2 = and(io.out.readData.ready, io.out.readData.valid) @[Decoupled.scala 52:35]
        when _T_2 : @[AXISlaveReadMux.scala 81:33]
          state <= UInt<2>("h2") @[AXISlaveReadMux.scala 82:15]
      else :
        node _T_3 = eq(UInt<2>("h2"), state) @[AXISlaveReadMux.scala 74:16]
        when _T_3 : @[AXISlaveReadMux.scala 74:16]
          node _T_4 = or(chosen_reg, UInt<2>("h0"))
          node _T_5 = bits(_T_4, 1, 0)
          node _T_6 = and(io.in[_T_5].readData.ready, io.in[_T_5].readData.valid) @[Decoupled.scala 52:35]
          when _T_6 : @[AXISlaveReadMux.scala 86:44]
            state <= UInt<2>("h0") @[AXISlaveReadMux.scala 87:15]
    node _T_7 = eq(state, UInt<2>("h0")) @[AXISlaveReadMux.scala 92:14]
    when _T_7 : @[AXISlaveReadMux.scala 92:24]
      mask[0] <= UInt<1>("h1") @[AXISlaveReadMux.scala 93:20]
      mask[1] <= UInt<1>("h1") @[AXISlaveReadMux.scala 93:20]
      mask[2] <= UInt<1>("h1") @[AXISlaveReadMux.scala 93:20]
      when arbiter.io.out.valid : @[AXISlaveReadMux.scala 94:31]
        chosen_reg <= arbiter.io.chosen @[AXISlaveReadMux.scala 95:18]
        address_reg <= io.in[arbiter.io.chosen].readAddr.bits @[AXISlaveReadMux.scala 96:19]
        ar_determined <= UInt<1>("h1") @[AXISlaveReadMux.scala 97:21]
      io.out.readData.ready <= UInt<1>("h0") @[AXISlaveReadMux.scala 99:27]
    else :
      node _T_8 = eq(state, UInt<2>("h1")) @[AXISlaveReadMux.scala 101:19]
      when _T_8 : @[AXISlaveReadMux.scala 101:33]
        mask[0] <= UInt<1>("h0") @[AXISlaveReadMux.scala 102:22]
        mask[1] <= UInt<1>("h0") @[AXISlaveReadMux.scala 102:22]
        mask[2] <= UInt<1>("h0") @[AXISlaveReadMux.scala 102:22]
        node _T_9 = and(io.out.readAddr.ready, io.out.readAddr.valid) @[Decoupled.scala 52:35]
        when _T_9 : @[AXISlaveReadMux.scala 103:33]
          ar_determined <= UInt<1>("h0") @[AXISlaveReadMux.scala 104:23]
        node _T_10 = and(io.out.readData.ready, io.out.readData.valid) @[Decoupled.scala 52:35]
        when _T_10 : @[AXISlaveReadMux.scala 106:33]
          data_reg <= io.out.readData.bits @[AXISlaveReadMux.scala 107:18]
        io.out.readData.ready <= UInt<1>("h1") @[AXISlaveReadMux.scala 109:29]
      else :
        node _T_11 = eq(state, UInt<2>("h2")) @[AXISlaveReadMux.scala 111:19]
        when _T_11 : @[AXISlaveReadMux.scala 111:31]
          mask[0] <= UInt<1>("h0") @[AXISlaveReadMux.scala 112:20]
          mask[1] <= UInt<1>("h0") @[AXISlaveReadMux.scala 112:20]
          mask[2] <= UInt<1>("h0") @[AXISlaveReadMux.scala 112:20]
          node _T_12 = or(chosen_reg, UInt<2>("h0"))
          node _T_13 = bits(_T_12, 1, 0)
          io.in[_T_13].readData.valid <= UInt<1>("h1") @[AXISlaveReadMux.scala 113:38]
    io.out.readAddr.bits <= address_reg @[AXISlaveReadMux.scala 116:24]
    node _T_14 = or(chosen_reg, UInt<2>("h0"))
    node _T_15 = bits(_T_14, 1, 0)
    io.in[_T_15].readData.bits <= data_reg @[AXISlaveReadMux.scala 117:35]

  module AXIWriteBus :
    input clock : Clock
    input reset : Reset
    output io : { master : { flip writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}}, slave : { writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}}[3]}

    node _write_port_T = geq(io.master.writeAddr.bits.addr, UInt<16>("h8000")) @[AXIWriteBus.scala 25:36]
    node _write_port_T_1 = lt(io.master.writeAddr.bits.addr, UInt<17>("h10000")) @[AXIWriteBus.scala 25:87]
    node _write_port_T_2 = and(_write_port_T, _write_port_T_1) @[AXIWriteBus.scala 25:54]
    node _write_port_T_3 = geq(io.master.writeAddr.bits.addr, UInt<21>("h100000")) @[AXIWriteBus.scala 25:36]
    node _write_port_T_4 = lt(io.master.writeAddr.bits.addr, UInt<22>("h300000")) @[AXIWriteBus.scala 25:87]
    node _write_port_T_5 = and(_write_port_T_3, _write_port_T_4) @[AXIWriteBus.scala 25:54]
    node _write_port_T_6 = geq(io.master.writeAddr.bits.addr, UInt<22>("h300000")) @[AXIWriteBus.scala 25:36]
    node _write_port_T_7 = lt(io.master.writeAddr.bits.addr, UInt<23>("h400000")) @[AXIWriteBus.scala 25:87]
    node _write_port_T_8 = and(_write_port_T_6, _write_port_T_7) @[AXIWriteBus.scala 25:54]
    node _write_port_T_9 = mux(_write_port_T_8, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _write_port_T_10 = mux(_write_port_T_5, UInt<1>("h1"), _write_port_T_9) @[Mux.scala 101:16]
    node write_port = mux(_write_port_T_2, UInt<1>("h0"), _write_port_T_10) @[Mux.scala 101:16]
    reg write_port_reg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIWriteBus.scala 28:31]
    reg write_addr_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXIWriteBus.scala 30:31]
    reg write_addr_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 31:37]
    reg write_addr_reg_id : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[AXIWriteBus.scala 32:34]
    reg write_addr_reg_size : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIWriteBus.scala 33:36]
    reg write_data_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXIWriteBus.scala 35:31]
    reg write_data_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 36:37]
    reg write_data_reg_strb : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIWriteBus.scala 37:36]
    reg write_data_reg_last : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 38:36]
    reg write_resp_reg : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[AXIWriteBus.scala 40:31]
    reg write_resp_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 41:37]
    reg write_resp_reg_id : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[AXIWriteBus.scala 42:34]
    reg w_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 45:30]
    reg aw_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 46:31]
    reg b_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 47:30]
    io.slave[0].writeData.valid <= UInt<1>("h0") @[AXIWriteBus.scala 51:33]
    io.slave[0].writeData.bits.data <= UInt<1>("h0") @[AXIWriteBus.scala 52:37]
    io.slave[0].writeData.bits.strb <= UInt<1>("h0") @[AXIWriteBus.scala 53:37]
    io.slave[0].writeData.bits.last <= UInt<1>("h0") @[AXIWriteBus.scala 54:37]
    io.slave[0].writeAddr.valid <= UInt<1>("h0") @[AXIWriteBus.scala 55:33]
    io.slave[0].writeAddr.bits.addr <= UInt<1>("h0") @[AXIWriteBus.scala 56:37]
    io.slave[0].writeAddr.bits.id <= UInt<1>("h0") @[AXIWriteBus.scala 57:35]
    io.slave[0].writeAddr.bits.region is invalid @[AXIWriteBus.scala 58:39]
    io.slave[0].writeAddr.bits.len is invalid @[AXIWriteBus.scala 59:36]
    io.slave[0].writeAddr.bits.size <= UInt<1>("h0") @[AXIWriteBus.scala 60:37]
    io.slave[0].writeAddr.bits.burst is invalid @[AXIWriteBus.scala 61:38]
    io.slave[0].writeAddr.bits.lock is invalid @[AXIWriteBus.scala 62:37]
    io.slave[0].writeAddr.bits.cache is invalid @[AXIWriteBus.scala 63:38]
    io.slave[0].writeAddr.bits.prot is invalid @[AXIWriteBus.scala 64:37]
    io.slave[0].writeAddr.bits.qos is invalid @[AXIWriteBus.scala 65:36]
    io.slave[0].writeResp.ready <= UInt<1>("h0") @[AXIWriteBus.scala 66:33]
    io.slave[1].writeData.valid <= UInt<1>("h0") @[AXIWriteBus.scala 51:33]
    io.slave[1].writeData.bits.data <= UInt<1>("h0") @[AXIWriteBus.scala 52:37]
    io.slave[1].writeData.bits.strb <= UInt<1>("h0") @[AXIWriteBus.scala 53:37]
    io.slave[1].writeData.bits.last <= UInt<1>("h0") @[AXIWriteBus.scala 54:37]
    io.slave[1].writeAddr.valid <= UInt<1>("h0") @[AXIWriteBus.scala 55:33]
    io.slave[1].writeAddr.bits.addr <= UInt<1>("h0") @[AXIWriteBus.scala 56:37]
    io.slave[1].writeAddr.bits.id <= UInt<1>("h0") @[AXIWriteBus.scala 57:35]
    io.slave[1].writeAddr.bits.region is invalid @[AXIWriteBus.scala 58:39]
    io.slave[1].writeAddr.bits.len is invalid @[AXIWriteBus.scala 59:36]
    io.slave[1].writeAddr.bits.size <= UInt<1>("h0") @[AXIWriteBus.scala 60:37]
    io.slave[1].writeAddr.bits.burst is invalid @[AXIWriteBus.scala 61:38]
    io.slave[1].writeAddr.bits.lock is invalid @[AXIWriteBus.scala 62:37]
    io.slave[1].writeAddr.bits.cache is invalid @[AXIWriteBus.scala 63:38]
    io.slave[1].writeAddr.bits.prot is invalid @[AXIWriteBus.scala 64:37]
    io.slave[1].writeAddr.bits.qos is invalid @[AXIWriteBus.scala 65:36]
    io.slave[1].writeResp.ready <= UInt<1>("h0") @[AXIWriteBus.scala 66:33]
    io.slave[2].writeData.valid <= UInt<1>("h0") @[AXIWriteBus.scala 51:33]
    io.slave[2].writeData.bits.data <= UInt<1>("h0") @[AXIWriteBus.scala 52:37]
    io.slave[2].writeData.bits.strb <= UInt<1>("h0") @[AXIWriteBus.scala 53:37]
    io.slave[2].writeData.bits.last <= UInt<1>("h0") @[AXIWriteBus.scala 54:37]
    io.slave[2].writeAddr.valid <= UInt<1>("h0") @[AXIWriteBus.scala 55:33]
    io.slave[2].writeAddr.bits.addr <= UInt<1>("h0") @[AXIWriteBus.scala 56:37]
    io.slave[2].writeAddr.bits.id <= UInt<1>("h0") @[AXIWriteBus.scala 57:35]
    io.slave[2].writeAddr.bits.region is invalid @[AXIWriteBus.scala 58:39]
    io.slave[2].writeAddr.bits.len is invalid @[AXIWriteBus.scala 59:36]
    io.slave[2].writeAddr.bits.size <= UInt<1>("h0") @[AXIWriteBus.scala 60:37]
    io.slave[2].writeAddr.bits.burst is invalid @[AXIWriteBus.scala 61:38]
    io.slave[2].writeAddr.bits.lock is invalid @[AXIWriteBus.scala 62:37]
    io.slave[2].writeAddr.bits.cache is invalid @[AXIWriteBus.scala 63:38]
    io.slave[2].writeAddr.bits.prot is invalid @[AXIWriteBus.scala 64:37]
    io.slave[2].writeAddr.bits.qos is invalid @[AXIWriteBus.scala 65:36]
    io.slave[2].writeResp.ready <= UInt<1>("h0") @[AXIWriteBus.scala 66:33]
    node _io_master_writeData_ready_T = not(w_outstanding) @[AXIWriteBus.scala 68:32]
    io.master.writeData.ready <= _io_master_writeData_ready_T @[AXIWriteBus.scala 68:29]
    node _io_master_writeAddr_ready_T = not(aw_outstanding) @[AXIWriteBus.scala 69:32]
    io.master.writeAddr.ready <= _io_master_writeAddr_ready_T @[AXIWriteBus.scala 69:29]
    io.master.writeResp.valid <= write_resp_reg_valid @[AXIWriteBus.scala 70:29]
    io.master.writeResp.bits.resp <= write_resp_reg @[AXIWriteBus.scala 71:33]
    io.master.writeResp.bits.id <= write_resp_reg_id @[AXIWriteBus.scala 72:31]
    node _T = and(io.master.writeAddr.ready, io.master.writeAddr.valid) @[Decoupled.scala 52:35]
    when _T : @[AXIWriteBus.scala 75:34]
      aw_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 76:20]
      write_port_reg <= write_port @[AXIWriteBus.scala 77:20]
      write_addr_reg <= io.master.writeAddr.bits.addr @[AXIWriteBus.scala 78:20]
      write_addr_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 79:26]
      write_addr_reg_id <= io.master.writeAddr.bits.id @[AXIWriteBus.scala 80:23]
      write_addr_reg_size <= io.master.writeAddr.bits.size @[AXIWriteBus.scala 81:25]
    node _T_1 = and(io.master.writeData.ready, io.master.writeData.valid) @[Decoupled.scala 52:35]
    when _T_1 : @[AXIWriteBus.scala 83:34]
      w_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 84:19]
      write_data_reg_strb <= io.master.writeData.bits.strb @[AXIWriteBus.scala 85:25]
      write_data_reg <= io.master.writeData.bits.data @[AXIWriteBus.scala 86:20]
      write_data_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 87:26]
      write_data_reg_last <= io.master.writeData.bits.last @[AXIWriteBus.scala 88:25]
    node _T_2 = bits(write_port_reg, 1, 0)
    node _T_3 = and(write_addr_reg_valid, io.slave[_T_2].writeAddr.ready) @[AXIWriteBus.scala 91:29]
    when _T_3 : @[AXIWriteBus.scala 91:74]
      write_addr_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 92:28]
    node _T_4 = bits(write_port_reg, 1, 0)
    node _T_5 = and(write_data_reg_valid, io.slave[_T_4].writeData.ready) @[AXIWriteBus.scala 94:29]
    when _T_5 : @[AXIWriteBus.scala 94:74]
      write_data_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 95:28]
    node _T_6 = and(aw_outstanding, w_outstanding) @[AXIWriteBus.scala 97:23]
    node _T_7 = and(_T_6, write_resp_reg_valid) @[AXIWriteBus.scala 97:40]
    node _T_8 = and(_T_7, io.master.writeResp.ready) @[AXIWriteBus.scala 97:64]
    when _T_8 : @[AXIWriteBus.scala 97:94]
      write_resp_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 98:28]
      aw_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 99:22]
      w_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 100:21]
      b_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 101:21]
    when aw_outstanding : @[AXIWriteBus.scala 104:24]
      node _T_9 = bits(write_port_reg, 1, 0)
      node _T_10 = and(io.slave[_T_9].writeResp.ready, io.slave[_T_9].writeResp.valid) @[Decoupled.scala 52:35]
      when _T_10 : @[AXIWriteBus.scala 105:50]
        b_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 106:21]
        write_resp_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 107:28]
        node _write_resp_reg_T = bits(write_port_reg, 1, 0)
        write_resp_reg <= io.slave[_write_resp_reg_T].writeResp.bits.resp @[AXIWriteBus.scala 108:22]
        node _write_resp_reg_id_T = bits(write_port_reg, 1, 0)
        write_resp_reg_id <= io.slave[_write_resp_reg_id_T].writeResp.bits.id @[AXIWriteBus.scala 109:25]
      node _T_11 = bits(write_port_reg, 1, 0)
      io.slave[_T_11].writeAddr.bits.addr <= write_addr_reg @[AXIWriteBus.scala 111:50]
      node _T_12 = bits(write_port_reg, 1, 0)
      io.slave[_T_12].writeAddr.valid <= write_addr_reg_valid @[AXIWriteBus.scala 112:46]
      node _T_13 = bits(write_port_reg, 1, 0)
      io.slave[_T_13].writeAddr.bits.id <= write_addr_reg_id @[AXIWriteBus.scala 113:48]
      node _T_14 = bits(write_port_reg, 1, 0)
      io.slave[_T_14].writeAddr.bits.size <= write_addr_reg_size @[AXIWriteBus.scala 114:50]
      node _T_15 = bits(write_port_reg, 1, 0)
      io.slave[_T_15].writeData.bits.data <= write_data_reg @[AXIWriteBus.scala 115:50]
      node _T_16 = bits(write_port_reg, 1, 0)
      io.slave[_T_16].writeData.bits.strb <= write_data_reg_strb @[AXIWriteBus.scala 116:50]
      node _T_17 = bits(write_port_reg, 1, 0)
      io.slave[_T_17].writeData.valid <= write_data_reg_valid @[AXIWriteBus.scala 117:46]
      node _T_18 = bits(write_port_reg, 1, 0)
      io.slave[_T_18].writeData.bits.last <= write_data_reg_last @[AXIWriteBus.scala 118:50]
      node _T_19 = bits(write_port_reg, 1, 0)
      node _io_slave_writeResp_ready_T = not(b_outstanding) @[AXIWriteBus.scala 119:49]
      io.slave[_T_19].writeResp.ready <= _io_slave_writeResp_ready_T @[AXIWriteBus.scala 119:46]

  module AXIWriteBus_1 :
    input clock : Clock
    input reset : Reset
    output io : { master : { flip writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}}, slave : { writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}}[3]}

    node _write_port_T = geq(io.master.writeAddr.bits.addr, UInt<16>("h8000")) @[AXIWriteBus.scala 25:36]
    node _write_port_T_1 = lt(io.master.writeAddr.bits.addr, UInt<17>("h10000")) @[AXIWriteBus.scala 25:87]
    node _write_port_T_2 = and(_write_port_T, _write_port_T_1) @[AXIWriteBus.scala 25:54]
    node _write_port_T_3 = geq(io.master.writeAddr.bits.addr, UInt<21>("h100000")) @[AXIWriteBus.scala 25:36]
    node _write_port_T_4 = lt(io.master.writeAddr.bits.addr, UInt<22>("h300000")) @[AXIWriteBus.scala 25:87]
    node _write_port_T_5 = and(_write_port_T_3, _write_port_T_4) @[AXIWriteBus.scala 25:54]
    node _write_port_T_6 = geq(io.master.writeAddr.bits.addr, UInt<22>("h300000")) @[AXIWriteBus.scala 25:36]
    node _write_port_T_7 = lt(io.master.writeAddr.bits.addr, UInt<23>("h400000")) @[AXIWriteBus.scala 25:87]
    node _write_port_T_8 = and(_write_port_T_6, _write_port_T_7) @[AXIWriteBus.scala 25:54]
    node _write_port_T_9 = mux(_write_port_T_8, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _write_port_T_10 = mux(_write_port_T_5, UInt<1>("h1"), _write_port_T_9) @[Mux.scala 101:16]
    node write_port = mux(_write_port_T_2, UInt<1>("h0"), _write_port_T_10) @[Mux.scala 101:16]
    reg write_port_reg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIWriteBus.scala 28:31]
    reg write_addr_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXIWriteBus.scala 30:31]
    reg write_addr_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 31:37]
    reg write_addr_reg_id : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[AXIWriteBus.scala 32:34]
    reg write_addr_reg_size : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIWriteBus.scala 33:36]
    reg write_data_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXIWriteBus.scala 35:31]
    reg write_data_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 36:37]
    reg write_data_reg_strb : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIWriteBus.scala 37:36]
    reg write_data_reg_last : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 38:36]
    reg write_resp_reg : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[AXIWriteBus.scala 40:31]
    reg write_resp_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 41:37]
    reg write_resp_reg_id : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[AXIWriteBus.scala 42:34]
    reg w_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 45:30]
    reg aw_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 46:31]
    reg b_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 47:30]
    io.slave[0].writeData.valid <= UInt<1>("h0") @[AXIWriteBus.scala 51:33]
    io.slave[0].writeData.bits.data <= UInt<1>("h0") @[AXIWriteBus.scala 52:37]
    io.slave[0].writeData.bits.strb <= UInt<1>("h0") @[AXIWriteBus.scala 53:37]
    io.slave[0].writeData.bits.last <= UInt<1>("h0") @[AXIWriteBus.scala 54:37]
    io.slave[0].writeAddr.valid <= UInt<1>("h0") @[AXIWriteBus.scala 55:33]
    io.slave[0].writeAddr.bits.addr <= UInt<1>("h0") @[AXIWriteBus.scala 56:37]
    io.slave[0].writeAddr.bits.id <= UInt<1>("h0") @[AXIWriteBus.scala 57:35]
    io.slave[0].writeAddr.bits.region is invalid @[AXIWriteBus.scala 58:39]
    io.slave[0].writeAddr.bits.len is invalid @[AXIWriteBus.scala 59:36]
    io.slave[0].writeAddr.bits.size <= UInt<1>("h0") @[AXIWriteBus.scala 60:37]
    io.slave[0].writeAddr.bits.burst is invalid @[AXIWriteBus.scala 61:38]
    io.slave[0].writeAddr.bits.lock is invalid @[AXIWriteBus.scala 62:37]
    io.slave[0].writeAddr.bits.cache is invalid @[AXIWriteBus.scala 63:38]
    io.slave[0].writeAddr.bits.prot is invalid @[AXIWriteBus.scala 64:37]
    io.slave[0].writeAddr.bits.qos is invalid @[AXIWriteBus.scala 65:36]
    io.slave[0].writeResp.ready <= UInt<1>("h0") @[AXIWriteBus.scala 66:33]
    io.slave[1].writeData.valid <= UInt<1>("h0") @[AXIWriteBus.scala 51:33]
    io.slave[1].writeData.bits.data <= UInt<1>("h0") @[AXIWriteBus.scala 52:37]
    io.slave[1].writeData.bits.strb <= UInt<1>("h0") @[AXIWriteBus.scala 53:37]
    io.slave[1].writeData.bits.last <= UInt<1>("h0") @[AXIWriteBus.scala 54:37]
    io.slave[1].writeAddr.valid <= UInt<1>("h0") @[AXIWriteBus.scala 55:33]
    io.slave[1].writeAddr.bits.addr <= UInt<1>("h0") @[AXIWriteBus.scala 56:37]
    io.slave[1].writeAddr.bits.id <= UInt<1>("h0") @[AXIWriteBus.scala 57:35]
    io.slave[1].writeAddr.bits.region is invalid @[AXIWriteBus.scala 58:39]
    io.slave[1].writeAddr.bits.len is invalid @[AXIWriteBus.scala 59:36]
    io.slave[1].writeAddr.bits.size <= UInt<1>("h0") @[AXIWriteBus.scala 60:37]
    io.slave[1].writeAddr.bits.burst is invalid @[AXIWriteBus.scala 61:38]
    io.slave[1].writeAddr.bits.lock is invalid @[AXIWriteBus.scala 62:37]
    io.slave[1].writeAddr.bits.cache is invalid @[AXIWriteBus.scala 63:38]
    io.slave[1].writeAddr.bits.prot is invalid @[AXIWriteBus.scala 64:37]
    io.slave[1].writeAddr.bits.qos is invalid @[AXIWriteBus.scala 65:36]
    io.slave[1].writeResp.ready <= UInt<1>("h0") @[AXIWriteBus.scala 66:33]
    io.slave[2].writeData.valid <= UInt<1>("h0") @[AXIWriteBus.scala 51:33]
    io.slave[2].writeData.bits.data <= UInt<1>("h0") @[AXIWriteBus.scala 52:37]
    io.slave[2].writeData.bits.strb <= UInt<1>("h0") @[AXIWriteBus.scala 53:37]
    io.slave[2].writeData.bits.last <= UInt<1>("h0") @[AXIWriteBus.scala 54:37]
    io.slave[2].writeAddr.valid <= UInt<1>("h0") @[AXIWriteBus.scala 55:33]
    io.slave[2].writeAddr.bits.addr <= UInt<1>("h0") @[AXIWriteBus.scala 56:37]
    io.slave[2].writeAddr.bits.id <= UInt<1>("h0") @[AXIWriteBus.scala 57:35]
    io.slave[2].writeAddr.bits.region is invalid @[AXIWriteBus.scala 58:39]
    io.slave[2].writeAddr.bits.len is invalid @[AXIWriteBus.scala 59:36]
    io.slave[2].writeAddr.bits.size <= UInt<1>("h0") @[AXIWriteBus.scala 60:37]
    io.slave[2].writeAddr.bits.burst is invalid @[AXIWriteBus.scala 61:38]
    io.slave[2].writeAddr.bits.lock is invalid @[AXIWriteBus.scala 62:37]
    io.slave[2].writeAddr.bits.cache is invalid @[AXIWriteBus.scala 63:38]
    io.slave[2].writeAddr.bits.prot is invalid @[AXIWriteBus.scala 64:37]
    io.slave[2].writeAddr.bits.qos is invalid @[AXIWriteBus.scala 65:36]
    io.slave[2].writeResp.ready <= UInt<1>("h0") @[AXIWriteBus.scala 66:33]
    node _io_master_writeData_ready_T = not(w_outstanding) @[AXIWriteBus.scala 68:32]
    io.master.writeData.ready <= _io_master_writeData_ready_T @[AXIWriteBus.scala 68:29]
    node _io_master_writeAddr_ready_T = not(aw_outstanding) @[AXIWriteBus.scala 69:32]
    io.master.writeAddr.ready <= _io_master_writeAddr_ready_T @[AXIWriteBus.scala 69:29]
    io.master.writeResp.valid <= write_resp_reg_valid @[AXIWriteBus.scala 70:29]
    io.master.writeResp.bits.resp <= write_resp_reg @[AXIWriteBus.scala 71:33]
    io.master.writeResp.bits.id <= write_resp_reg_id @[AXIWriteBus.scala 72:31]
    node _T = and(io.master.writeAddr.ready, io.master.writeAddr.valid) @[Decoupled.scala 52:35]
    when _T : @[AXIWriteBus.scala 75:34]
      aw_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 76:20]
      write_port_reg <= write_port @[AXIWriteBus.scala 77:20]
      write_addr_reg <= io.master.writeAddr.bits.addr @[AXIWriteBus.scala 78:20]
      write_addr_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 79:26]
      write_addr_reg_id <= io.master.writeAddr.bits.id @[AXIWriteBus.scala 80:23]
      write_addr_reg_size <= io.master.writeAddr.bits.size @[AXIWriteBus.scala 81:25]
    node _T_1 = and(io.master.writeData.ready, io.master.writeData.valid) @[Decoupled.scala 52:35]
    when _T_1 : @[AXIWriteBus.scala 83:34]
      w_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 84:19]
      write_data_reg_strb <= io.master.writeData.bits.strb @[AXIWriteBus.scala 85:25]
      write_data_reg <= io.master.writeData.bits.data @[AXIWriteBus.scala 86:20]
      write_data_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 87:26]
      write_data_reg_last <= io.master.writeData.bits.last @[AXIWriteBus.scala 88:25]
    node _T_2 = bits(write_port_reg, 1, 0)
    node _T_3 = and(write_addr_reg_valid, io.slave[_T_2].writeAddr.ready) @[AXIWriteBus.scala 91:29]
    when _T_3 : @[AXIWriteBus.scala 91:74]
      write_addr_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 92:28]
    node _T_4 = bits(write_port_reg, 1, 0)
    node _T_5 = and(write_data_reg_valid, io.slave[_T_4].writeData.ready) @[AXIWriteBus.scala 94:29]
    when _T_5 : @[AXIWriteBus.scala 94:74]
      write_data_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 95:28]
    node _T_6 = and(aw_outstanding, w_outstanding) @[AXIWriteBus.scala 97:23]
    node _T_7 = and(_T_6, write_resp_reg_valid) @[AXIWriteBus.scala 97:40]
    node _T_8 = and(_T_7, io.master.writeResp.ready) @[AXIWriteBus.scala 97:64]
    when _T_8 : @[AXIWriteBus.scala 97:94]
      write_resp_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 98:28]
      aw_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 99:22]
      w_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 100:21]
      b_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 101:21]
    when aw_outstanding : @[AXIWriteBus.scala 104:24]
      node _T_9 = bits(write_port_reg, 1, 0)
      node _T_10 = and(io.slave[_T_9].writeResp.ready, io.slave[_T_9].writeResp.valid) @[Decoupled.scala 52:35]
      when _T_10 : @[AXIWriteBus.scala 105:50]
        b_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 106:21]
        write_resp_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 107:28]
        node _write_resp_reg_T = bits(write_port_reg, 1, 0)
        write_resp_reg <= io.slave[_write_resp_reg_T].writeResp.bits.resp @[AXIWriteBus.scala 108:22]
        node _write_resp_reg_id_T = bits(write_port_reg, 1, 0)
        write_resp_reg_id <= io.slave[_write_resp_reg_id_T].writeResp.bits.id @[AXIWriteBus.scala 109:25]
      node _T_11 = bits(write_port_reg, 1, 0)
      io.slave[_T_11].writeAddr.bits.addr <= write_addr_reg @[AXIWriteBus.scala 111:50]
      node _T_12 = bits(write_port_reg, 1, 0)
      io.slave[_T_12].writeAddr.valid <= write_addr_reg_valid @[AXIWriteBus.scala 112:46]
      node _T_13 = bits(write_port_reg, 1, 0)
      io.slave[_T_13].writeAddr.bits.id <= write_addr_reg_id @[AXIWriteBus.scala 113:48]
      node _T_14 = bits(write_port_reg, 1, 0)
      io.slave[_T_14].writeAddr.bits.size <= write_addr_reg_size @[AXIWriteBus.scala 114:50]
      node _T_15 = bits(write_port_reg, 1, 0)
      io.slave[_T_15].writeData.bits.data <= write_data_reg @[AXIWriteBus.scala 115:50]
      node _T_16 = bits(write_port_reg, 1, 0)
      io.slave[_T_16].writeData.bits.strb <= write_data_reg_strb @[AXIWriteBus.scala 116:50]
      node _T_17 = bits(write_port_reg, 1, 0)
      io.slave[_T_17].writeData.valid <= write_data_reg_valid @[AXIWriteBus.scala 117:46]
      node _T_18 = bits(write_port_reg, 1, 0)
      io.slave[_T_18].writeData.bits.last <= write_data_reg_last @[AXIWriteBus.scala 118:50]
      node _T_19 = bits(write_port_reg, 1, 0)
      node _io_slave_writeResp_ready_T = not(b_outstanding) @[AXIWriteBus.scala 119:49]
      io.slave[_T_19].writeResp.ready <= _io_slave_writeResp_ready_T @[AXIWriteBus.scala 119:46]

  module AXIWriteBus_2 :
    input clock : Clock
    input reset : Reset
    output io : { master : { flip writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}}, slave : { writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}}[3]}

    node _write_port_T = geq(io.master.writeAddr.bits.addr, UInt<16>("h8000")) @[AXIWriteBus.scala 25:36]
    node _write_port_T_1 = lt(io.master.writeAddr.bits.addr, UInt<17>("h10000")) @[AXIWriteBus.scala 25:87]
    node _write_port_T_2 = and(_write_port_T, _write_port_T_1) @[AXIWriteBus.scala 25:54]
    node _write_port_T_3 = geq(io.master.writeAddr.bits.addr, UInt<21>("h100000")) @[AXIWriteBus.scala 25:36]
    node _write_port_T_4 = lt(io.master.writeAddr.bits.addr, UInt<22>("h300000")) @[AXIWriteBus.scala 25:87]
    node _write_port_T_5 = and(_write_port_T_3, _write_port_T_4) @[AXIWriteBus.scala 25:54]
    node _write_port_T_6 = geq(io.master.writeAddr.bits.addr, UInt<22>("h300000")) @[AXIWriteBus.scala 25:36]
    node _write_port_T_7 = lt(io.master.writeAddr.bits.addr, UInt<23>("h400000")) @[AXIWriteBus.scala 25:87]
    node _write_port_T_8 = and(_write_port_T_6, _write_port_T_7) @[AXIWriteBus.scala 25:54]
    node _write_port_T_9 = mux(_write_port_T_8, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 101:16]
    node _write_port_T_10 = mux(_write_port_T_5, UInt<1>("h1"), _write_port_T_9) @[Mux.scala 101:16]
    node write_port = mux(_write_port_T_2, UInt<1>("h0"), _write_port_T_10) @[Mux.scala 101:16]
    reg write_port_reg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIWriteBus.scala 28:31]
    reg write_addr_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXIWriteBus.scala 30:31]
    reg write_addr_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 31:37]
    reg write_addr_reg_id : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[AXIWriteBus.scala 32:34]
    reg write_addr_reg_size : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[AXIWriteBus.scala 33:36]
    reg write_data_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[AXIWriteBus.scala 35:31]
    reg write_data_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 36:37]
    reg write_data_reg_strb : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[AXIWriteBus.scala 37:36]
    reg write_data_reg_last : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 38:36]
    reg write_resp_reg : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[AXIWriteBus.scala 40:31]
    reg write_resp_reg_valid : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 41:37]
    reg write_resp_reg_id : UInt<17>, clock with :
      reset => (reset, UInt<17>("h0")) @[AXIWriteBus.scala 42:34]
    reg w_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 45:30]
    reg aw_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 46:31]
    reg b_outstanding : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXIWriteBus.scala 47:30]
    io.slave[0].writeData.valid <= UInt<1>("h0") @[AXIWriteBus.scala 51:33]
    io.slave[0].writeData.bits.data <= UInt<1>("h0") @[AXIWriteBus.scala 52:37]
    io.slave[0].writeData.bits.strb <= UInt<1>("h0") @[AXIWriteBus.scala 53:37]
    io.slave[0].writeData.bits.last <= UInt<1>("h0") @[AXIWriteBus.scala 54:37]
    io.slave[0].writeAddr.valid <= UInt<1>("h0") @[AXIWriteBus.scala 55:33]
    io.slave[0].writeAddr.bits.addr <= UInt<1>("h0") @[AXIWriteBus.scala 56:37]
    io.slave[0].writeAddr.bits.id <= UInt<1>("h0") @[AXIWriteBus.scala 57:35]
    io.slave[0].writeAddr.bits.region is invalid @[AXIWriteBus.scala 58:39]
    io.slave[0].writeAddr.bits.len is invalid @[AXIWriteBus.scala 59:36]
    io.slave[0].writeAddr.bits.size <= UInt<1>("h0") @[AXIWriteBus.scala 60:37]
    io.slave[0].writeAddr.bits.burst is invalid @[AXIWriteBus.scala 61:38]
    io.slave[0].writeAddr.bits.lock is invalid @[AXIWriteBus.scala 62:37]
    io.slave[0].writeAddr.bits.cache is invalid @[AXIWriteBus.scala 63:38]
    io.slave[0].writeAddr.bits.prot is invalid @[AXIWriteBus.scala 64:37]
    io.slave[0].writeAddr.bits.qos is invalid @[AXIWriteBus.scala 65:36]
    io.slave[0].writeResp.ready <= UInt<1>("h0") @[AXIWriteBus.scala 66:33]
    io.slave[1].writeData.valid <= UInt<1>("h0") @[AXIWriteBus.scala 51:33]
    io.slave[1].writeData.bits.data <= UInt<1>("h0") @[AXIWriteBus.scala 52:37]
    io.slave[1].writeData.bits.strb <= UInt<1>("h0") @[AXIWriteBus.scala 53:37]
    io.slave[1].writeData.bits.last <= UInt<1>("h0") @[AXIWriteBus.scala 54:37]
    io.slave[1].writeAddr.valid <= UInt<1>("h0") @[AXIWriteBus.scala 55:33]
    io.slave[1].writeAddr.bits.addr <= UInt<1>("h0") @[AXIWriteBus.scala 56:37]
    io.slave[1].writeAddr.bits.id <= UInt<1>("h0") @[AXIWriteBus.scala 57:35]
    io.slave[1].writeAddr.bits.region is invalid @[AXIWriteBus.scala 58:39]
    io.slave[1].writeAddr.bits.len is invalid @[AXIWriteBus.scala 59:36]
    io.slave[1].writeAddr.bits.size <= UInt<1>("h0") @[AXIWriteBus.scala 60:37]
    io.slave[1].writeAddr.bits.burst is invalid @[AXIWriteBus.scala 61:38]
    io.slave[1].writeAddr.bits.lock is invalid @[AXIWriteBus.scala 62:37]
    io.slave[1].writeAddr.bits.cache is invalid @[AXIWriteBus.scala 63:38]
    io.slave[1].writeAddr.bits.prot is invalid @[AXIWriteBus.scala 64:37]
    io.slave[1].writeAddr.bits.qos is invalid @[AXIWriteBus.scala 65:36]
    io.slave[1].writeResp.ready <= UInt<1>("h0") @[AXIWriteBus.scala 66:33]
    io.slave[2].writeData.valid <= UInt<1>("h0") @[AXIWriteBus.scala 51:33]
    io.slave[2].writeData.bits.data <= UInt<1>("h0") @[AXIWriteBus.scala 52:37]
    io.slave[2].writeData.bits.strb <= UInt<1>("h0") @[AXIWriteBus.scala 53:37]
    io.slave[2].writeData.bits.last <= UInt<1>("h0") @[AXIWriteBus.scala 54:37]
    io.slave[2].writeAddr.valid <= UInt<1>("h0") @[AXIWriteBus.scala 55:33]
    io.slave[2].writeAddr.bits.addr <= UInt<1>("h0") @[AXIWriteBus.scala 56:37]
    io.slave[2].writeAddr.bits.id <= UInt<1>("h0") @[AXIWriteBus.scala 57:35]
    io.slave[2].writeAddr.bits.region is invalid @[AXIWriteBus.scala 58:39]
    io.slave[2].writeAddr.bits.len is invalid @[AXIWriteBus.scala 59:36]
    io.slave[2].writeAddr.bits.size <= UInt<1>("h0") @[AXIWriteBus.scala 60:37]
    io.slave[2].writeAddr.bits.burst is invalid @[AXIWriteBus.scala 61:38]
    io.slave[2].writeAddr.bits.lock is invalid @[AXIWriteBus.scala 62:37]
    io.slave[2].writeAddr.bits.cache is invalid @[AXIWriteBus.scala 63:38]
    io.slave[2].writeAddr.bits.prot is invalid @[AXIWriteBus.scala 64:37]
    io.slave[2].writeAddr.bits.qos is invalid @[AXIWriteBus.scala 65:36]
    io.slave[2].writeResp.ready <= UInt<1>("h0") @[AXIWriteBus.scala 66:33]
    node _io_master_writeData_ready_T = not(w_outstanding) @[AXIWriteBus.scala 68:32]
    io.master.writeData.ready <= _io_master_writeData_ready_T @[AXIWriteBus.scala 68:29]
    node _io_master_writeAddr_ready_T = not(aw_outstanding) @[AXIWriteBus.scala 69:32]
    io.master.writeAddr.ready <= _io_master_writeAddr_ready_T @[AXIWriteBus.scala 69:29]
    io.master.writeResp.valid <= write_resp_reg_valid @[AXIWriteBus.scala 70:29]
    io.master.writeResp.bits.resp <= write_resp_reg @[AXIWriteBus.scala 71:33]
    io.master.writeResp.bits.id <= write_resp_reg_id @[AXIWriteBus.scala 72:31]
    node _T = and(io.master.writeAddr.ready, io.master.writeAddr.valid) @[Decoupled.scala 52:35]
    when _T : @[AXIWriteBus.scala 75:34]
      aw_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 76:20]
      write_port_reg <= write_port @[AXIWriteBus.scala 77:20]
      write_addr_reg <= io.master.writeAddr.bits.addr @[AXIWriteBus.scala 78:20]
      write_addr_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 79:26]
      write_addr_reg_id <= io.master.writeAddr.bits.id @[AXIWriteBus.scala 80:23]
      write_addr_reg_size <= io.master.writeAddr.bits.size @[AXIWriteBus.scala 81:25]
    node _T_1 = and(io.master.writeData.ready, io.master.writeData.valid) @[Decoupled.scala 52:35]
    when _T_1 : @[AXIWriteBus.scala 83:34]
      w_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 84:19]
      write_data_reg_strb <= io.master.writeData.bits.strb @[AXIWriteBus.scala 85:25]
      write_data_reg <= io.master.writeData.bits.data @[AXIWriteBus.scala 86:20]
      write_data_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 87:26]
      write_data_reg_last <= io.master.writeData.bits.last @[AXIWriteBus.scala 88:25]
    node _T_2 = bits(write_port_reg, 1, 0)
    node _T_3 = and(write_addr_reg_valid, io.slave[_T_2].writeAddr.ready) @[AXIWriteBus.scala 91:29]
    when _T_3 : @[AXIWriteBus.scala 91:74]
      write_addr_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 92:28]
    node _T_4 = bits(write_port_reg, 1, 0)
    node _T_5 = and(write_data_reg_valid, io.slave[_T_4].writeData.ready) @[AXIWriteBus.scala 94:29]
    when _T_5 : @[AXIWriteBus.scala 94:74]
      write_data_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 95:28]
    node _T_6 = and(aw_outstanding, w_outstanding) @[AXIWriteBus.scala 97:23]
    node _T_7 = and(_T_6, write_resp_reg_valid) @[AXIWriteBus.scala 97:40]
    node _T_8 = and(_T_7, io.master.writeResp.ready) @[AXIWriteBus.scala 97:64]
    when _T_8 : @[AXIWriteBus.scala 97:94]
      write_resp_reg_valid <= UInt<1>("h0") @[AXIWriteBus.scala 98:28]
      aw_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 99:22]
      w_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 100:21]
      b_outstanding <= UInt<1>("h0") @[AXIWriteBus.scala 101:21]
    when aw_outstanding : @[AXIWriteBus.scala 104:24]
      node _T_9 = bits(write_port_reg, 1, 0)
      node _T_10 = and(io.slave[_T_9].writeResp.ready, io.slave[_T_9].writeResp.valid) @[Decoupled.scala 52:35]
      when _T_10 : @[AXIWriteBus.scala 105:50]
        b_outstanding <= UInt<1>("h1") @[AXIWriteBus.scala 106:21]
        write_resp_reg_valid <= UInt<1>("h1") @[AXIWriteBus.scala 107:28]
        node _write_resp_reg_T = bits(write_port_reg, 1, 0)
        write_resp_reg <= io.slave[_write_resp_reg_T].writeResp.bits.resp @[AXIWriteBus.scala 108:22]
        node _write_resp_reg_id_T = bits(write_port_reg, 1, 0)
        write_resp_reg_id <= io.slave[_write_resp_reg_id_T].writeResp.bits.id @[AXIWriteBus.scala 109:25]
      node _T_11 = bits(write_port_reg, 1, 0)
      io.slave[_T_11].writeAddr.bits.addr <= write_addr_reg @[AXIWriteBus.scala 111:50]
      node _T_12 = bits(write_port_reg, 1, 0)
      io.slave[_T_12].writeAddr.valid <= write_addr_reg_valid @[AXIWriteBus.scala 112:46]
      node _T_13 = bits(write_port_reg, 1, 0)
      io.slave[_T_13].writeAddr.bits.id <= write_addr_reg_id @[AXIWriteBus.scala 113:48]
      node _T_14 = bits(write_port_reg, 1, 0)
      io.slave[_T_14].writeAddr.bits.size <= write_addr_reg_size @[AXIWriteBus.scala 114:50]
      node _T_15 = bits(write_port_reg, 1, 0)
      io.slave[_T_15].writeData.bits.data <= write_data_reg @[AXIWriteBus.scala 115:50]
      node _T_16 = bits(write_port_reg, 1, 0)
      io.slave[_T_16].writeData.bits.strb <= write_data_reg_strb @[AXIWriteBus.scala 116:50]
      node _T_17 = bits(write_port_reg, 1, 0)
      io.slave[_T_17].writeData.valid <= write_data_reg_valid @[AXIWriteBus.scala 117:46]
      node _T_18 = bits(write_port_reg, 1, 0)
      io.slave[_T_18].writeData.bits.last <= write_data_reg_last @[AXIWriteBus.scala 118:50]
      node _T_19 = bits(write_port_reg, 1, 0)
      node _io_slave_writeResp_ready_T = not(b_outstanding) @[AXIWriteBus.scala 119:49]
      io.slave[_T_19].writeResp.ready <= _io_slave_writeResp_ready_T @[AXIWriteBus.scala 119:46]

  module RRArbiter_3 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}[3], out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, chosen : UInt<2>}

    wire choice : UInt
    choice <= UInt<2>("h2")
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[io.chosen].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    reg lastGrant : UInt<2>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 82:76]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 82:76]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 45:68]
    node _ctrl_T_1 = or(_ctrl_T, validMask_2) @[Arbiter.scala 45:68]
    node _ctrl_T_2 = or(_ctrl_T_1, io.in[0].valid) @[Arbiter.scala 45:68]
    node _ctrl_T_3 = or(_ctrl_T_2, io.in[1].valid) @[Arbiter.scala 45:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_4 = eq(_ctrl_T_2, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_5 = eq(_ctrl_T_3, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_3) @[Arbiter.scala 86:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 86:34]
    node _T_3 = or(_T_2, ctrl_4) @[Arbiter.scala 86:50]
    node _T_4 = and(ctrl_2, grantMask_2) @[Arbiter.scala 86:34]
    node _T_5 = or(_T_4, ctrl_5) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 74:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 74:16]
    node _io_in_2_ready_T = and(_T_5, io.out.ready) @[Arbiter.scala 74:21]
    io.in[2].ready <= _io_in_2_ready_T @[Arbiter.scala 74:16]
    when io.in[1].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h1") @[Arbiter.scala 91:35]
    when io.in[0].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h0") @[Arbiter.scala 91:35]
    when validMask_2 : @[Arbiter.scala 93:24]
      choice <= UInt<2>("h2") @[Arbiter.scala 93:33]
    when validMask_1 : @[Arbiter.scala 93:24]
      choice <= UInt<1>("h1") @[Arbiter.scala 93:33]

  module AXISlaveWriteMux :
    input clock : Clock
    input reset : Reset
    output io : { out : { writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}}, in : { flip writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}}[3]}

    wire _mask_WIRE : UInt<1>[3] @[AXISlaveWriteMux.scala 25:33]
    _mask_WIRE[0] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 25:33]
    _mask_WIRE[1] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 25:33]
    _mask_WIRE[2] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 25:33]
    wire mask : UInt<1>[3]
    mask <= _mask_WIRE
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[AXISlaveWriteMux.scala 29:22]
    node _outstanding_T = or(io.in[0].writeAddr.valid, io.in[1].writeAddr.valid) @[AXISlaveWriteMux.scala 31:96]
    node _outstanding_T_1 = or(_outstanding_T, io.in[2].writeAddr.valid) @[AXISlaveWriteMux.scala 31:96]
    wire outstanding : UInt<1>
    outstanding <= _outstanding_T_1
    inst arbiter of RRArbiter_3 @[AXISlaveWriteMux.scala 34:23]
    arbiter.clock <= clock
    arbiter.reset <= reset
    reg chosen_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 35:27]
    reg w_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 36:29]
    reg aw_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 37:30]
    wire _address_reg_WIRE : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}
    _address_reg_WIRE.qos is invalid
    _address_reg_WIRE.prot is invalid
    _address_reg_WIRE.cache is invalid
    _address_reg_WIRE.lock is invalid
    _address_reg_WIRE.burst is invalid
    _address_reg_WIRE.size <= UInt<1>("h0")
    _address_reg_WIRE.len is invalid
    _address_reg_WIRE.region is invalid
    _address_reg_WIRE.addr <= UInt<1>("h0")
    _address_reg_WIRE.id <= UInt<1>("h0")
    reg address_reg : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}, clock with :
      reset => (reset, _address_reg_WIRE) @[AXISlaveWriteMux.scala 39:28]
    wire _data_reg_WIRE : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}
    _data_reg_WIRE.last <= UInt<1>("h0")
    _data_reg_WIRE.strb <= UInt<1>("h0")
    _data_reg_WIRE.data <= UInt<1>("h0")
    reg data_reg : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}, clock with :
      reset => (reset, _data_reg_WIRE) @[AXISlaveWriteMux.scala 44:25]
    wire _resp_reg_WIRE : { id : UInt<17>, resp : UInt<2>}
    _resp_reg_WIRE.resp <= UInt<1>("h0")
    _resp_reg_WIRE.id <= UInt<1>("h0")
    reg resp_reg : { id : UInt<17>, resp : UInt<2>}, clock with :
      reset => (reset, _resp_reg_WIRE) @[AXISlaveWriteMux.scala 49:25]
    io.out.writeAddr.bits.qos is invalid @[AXISlaveWriteMux.scala 54:29]
    io.out.writeAddr.bits.len is invalid @[AXISlaveWriteMux.scala 55:29]
    io.out.writeAddr.bits.cache is invalid @[AXISlaveWriteMux.scala 56:31]
    io.out.writeAddr.bits.lock is invalid @[AXISlaveWriteMux.scala 57:30]
    io.out.writeAddr.bits.size <= UInt<1>("h0") @[AXISlaveWriteMux.scala 58:30]
    io.out.writeAddr.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 59:28]
    io.out.writeAddr.bits.prot is invalid @[AXISlaveWriteMux.scala 60:30]
    io.out.writeAddr.bits.region is invalid @[AXISlaveWriteMux.scala 61:32]
    io.out.writeAddr.bits.burst is invalid @[AXISlaveWriteMux.scala 62:31]
    io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 63:26]
    arbiter.io.out.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 64:24]
    io.in[0].writeData.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 67:30]
    io.in[0].writeResp.valid <= UInt<1>("h0") @[AXISlaveWriteMux.scala 68:30]
    io.in[0].writeResp.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 69:32]
    io.in[0].writeResp.bits.resp <= UInt<1>("h0") @[AXISlaveWriteMux.scala 70:34]
    io.in[1].writeData.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 67:30]
    io.in[1].writeResp.valid <= UInt<1>("h0") @[AXISlaveWriteMux.scala 68:30]
    io.in[1].writeResp.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 69:32]
    io.in[1].writeResp.bits.resp <= UInt<1>("h0") @[AXISlaveWriteMux.scala 70:34]
    io.in[2].writeData.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 67:30]
    io.in[2].writeResp.valid <= UInt<1>("h0") @[AXISlaveWriteMux.scala 68:30]
    io.in[2].writeResp.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 69:32]
    io.in[2].writeResp.bits.resp <= UInt<1>("h0") @[AXISlaveWriteMux.scala 70:34]
    node _io_in_0_writeAddr_ready_T = and(arbiter.io.in[0].ready, mask[0]) @[AXISlaveWriteMux.scala 74:56]
    io.in[0].writeAddr.ready <= _io_in_0_writeAddr_ready_T @[AXISlaveWriteMux.scala 74:30]
    node _arbiter_io_in_0_valid_T = and(io.in[0].writeAddr.valid, mask[0]) @[AXISlaveWriteMux.scala 75:56]
    arbiter.io.in[0].valid <= _arbiter_io_in_0_valid_T @[AXISlaveWriteMux.scala 75:28]
    arbiter.io.in[0].bits <= UInt<1>("h0") @[AXISlaveWriteMux.scala 76:27]
    node _io_in_1_writeAddr_ready_T = and(arbiter.io.in[1].ready, mask[1]) @[AXISlaveWriteMux.scala 74:56]
    io.in[1].writeAddr.ready <= _io_in_1_writeAddr_ready_T @[AXISlaveWriteMux.scala 74:30]
    node _arbiter_io_in_1_valid_T = and(io.in[1].writeAddr.valid, mask[1]) @[AXISlaveWriteMux.scala 75:56]
    arbiter.io.in[1].valid <= _arbiter_io_in_1_valid_T @[AXISlaveWriteMux.scala 75:28]
    arbiter.io.in[1].bits <= UInt<1>("h0") @[AXISlaveWriteMux.scala 76:27]
    node _io_in_2_writeAddr_ready_T = and(arbiter.io.in[2].ready, mask[2]) @[AXISlaveWriteMux.scala 74:56]
    io.in[2].writeAddr.ready <= _io_in_2_writeAddr_ready_T @[AXISlaveWriteMux.scala 74:30]
    node _arbiter_io_in_2_valid_T = and(io.in[2].writeAddr.valid, mask[2]) @[AXISlaveWriteMux.scala 75:56]
    arbiter.io.in[2].valid <= _arbiter_io_in_2_valid_T @[AXISlaveWriteMux.scala 75:28]
    arbiter.io.in[2].bits <= UInt<1>("h0") @[AXISlaveWriteMux.scala 76:27]
    io.out.writeAddr.valid <= aw_determined @[AXISlaveWriteMux.scala 78:26]
    io.out.writeData.valid <= w_determined @[AXISlaveWriteMux.scala 79:26]
    node _T = eq(UInt<2>("h0"), state) @[AXISlaveWriteMux.scala 81:16]
    when _T : @[AXISlaveWriteMux.scala 81:16]
      when outstanding : @[AXISlaveWriteMux.scala 83:24]
        node _T_1 = and(io.in[arbiter.io.chosen].writeData.ready, io.in[arbiter.io.chosen].writeData.valid) @[Decoupled.scala 52:35]
        when _T_1 : @[AXISlaveWriteMux.scala 84:61]
          state <= UInt<2>("h2") @[AXISlaveWriteMux.scala 85:17]
        else :
          state <= UInt<2>("h1") @[AXISlaveWriteMux.scala 88:17]
    else :
      node _T_2 = eq(UInt<2>("h1"), state) @[AXISlaveWriteMux.scala 81:16]
      when _T_2 : @[AXISlaveWriteMux.scala 81:16]
        node _T_3 = or(chosen_reg, UInt<2>("h0"))
        node _T_4 = bits(_T_3, 1, 0)
        node _T_5 = and(io.in[_T_4].writeData.ready, io.in[_T_4].writeData.valid) @[Decoupled.scala 52:35]
        when _T_5 : @[AXISlaveWriteMux.scala 93:45]
          state <= UInt<2>("h2") @[AXISlaveWriteMux.scala 94:15]
      else :
        node _T_6 = eq(UInt<2>("h2"), state) @[AXISlaveWriteMux.scala 81:16]
        when _T_6 : @[AXISlaveWriteMux.scala 81:16]
          node _T_7 = and(io.out.writeResp.ready, io.out.writeResp.valid) @[Decoupled.scala 52:35]
          when _T_7 : @[AXISlaveWriteMux.scala 98:34]
            state <= UInt<2>("h3") @[AXISlaveWriteMux.scala 99:15]
        else :
          node _T_8 = eq(UInt<2>("h3"), state) @[AXISlaveWriteMux.scala 81:16]
          when _T_8 : @[AXISlaveWriteMux.scala 81:16]
            node _T_9 = or(chosen_reg, UInt<2>("h0"))
            node _T_10 = bits(_T_9, 1, 0)
            node _T_11 = and(io.in[_T_10].writeResp.ready, io.in[_T_10].writeResp.valid) @[Decoupled.scala 52:35]
            when _T_11 : @[AXISlaveWriteMux.scala 103:45]
              state <= UInt<2>("h0") @[AXISlaveWriteMux.scala 104:15]
    node _T_12 = eq(state, UInt<2>("h0")) @[AXISlaveWriteMux.scala 109:14]
    when _T_12 : @[AXISlaveWriteMux.scala 109:24]
      mask[0] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 110:20]
      mask[1] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 110:20]
      mask[2] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 110:20]
      when arbiter.io.out.valid : @[AXISlaveWriteMux.scala 111:31]
        io.in[arbiter.io.chosen].writeData.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 112:46]
        chosen_reg <= arbiter.io.chosen @[AXISlaveWriteMux.scala 113:18]
        address_reg <= io.in[arbiter.io.chosen].writeAddr.bits @[AXISlaveWriteMux.scala 114:19]
        aw_determined <= UInt<1>("h1") @[AXISlaveWriteMux.scala 115:21]
        node _T_13 = and(io.in[arbiter.io.chosen].writeData.ready, io.in[arbiter.io.chosen].writeData.valid) @[Decoupled.scala 52:35]
        when _T_13 : @[AXISlaveWriteMux.scala 116:59]
          data_reg <= io.in[arbiter.io.chosen].writeData.bits @[AXISlaveWriteMux.scala 117:18]
          w_determined <= UInt<1>("h1") @[AXISlaveWriteMux.scala 118:22]
      io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 121:28]
    else :
      node _T_14 = eq(state, UInt<2>("h1")) @[AXISlaveWriteMux.scala 123:19]
      when _T_14 : @[AXISlaveWriteMux.scala 123:33]
        mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 124:20]
        mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 124:20]
        mask[2] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 124:20]
        node _T_15 = or(chosen_reg, UInt<2>("h0"))
        node _T_16 = bits(_T_15, 1, 0)
        node _T_17 = and(io.in[_T_16].writeData.ready, io.in[_T_16].writeData.valid) @[Decoupled.scala 52:35]
        when _T_17 : @[AXISlaveWriteMux.scala 125:43]
          node _data_reg_T = or(chosen_reg, UInt<2>("h0"))
          node _data_reg_T_1 = bits(_data_reg_T, 1, 0)
          data_reg <= io.in[_data_reg_T_1].writeData.bits @[AXISlaveWriteMux.scala 126:16]
        node _T_18 = and(io.out.writeAddr.ready, io.out.writeAddr.valid) @[Decoupled.scala 52:35]
        when _T_18 : @[AXISlaveWriteMux.scala 128:32]
          aw_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 129:21]
        node _T_19 = or(chosen_reg, UInt<2>("h0"))
        node _T_20 = bits(_T_19, 1, 0)
        io.in[_T_20].writeData.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 131:39]
        io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 132:28]
      else :
        node _T_21 = eq(state, UInt<2>("h2")) @[AXISlaveWriteMux.scala 134:19]
        when _T_21 : @[AXISlaveWriteMux.scala 134:33]
          mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 135:22]
          mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 135:22]
          mask[2] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 135:22]
          node _T_22 = and(io.out.writeAddr.ready, io.out.writeAddr.valid) @[Decoupled.scala 52:35]
          when _T_22 : @[AXISlaveWriteMux.scala 136:34]
            aw_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 137:23]
          node _T_23 = and(io.out.writeData.ready, io.out.writeData.valid) @[Decoupled.scala 52:35]
          when _T_23 : @[AXISlaveWriteMux.scala 139:34]
            w_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 140:22]
          node _T_24 = and(io.out.writeResp.ready, io.out.writeResp.valid) @[Decoupled.scala 52:35]
          when _T_24 : @[AXISlaveWriteMux.scala 142:34]
            resp_reg <= io.out.writeResp.bits @[AXISlaveWriteMux.scala 143:18]
          io.out.writeResp.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 145:30]
        else :
          node _T_25 = eq(state, UInt<2>("h3")) @[AXISlaveWriteMux.scala 147:19]
          when _T_25 : @[AXISlaveWriteMux.scala 147:31]
            mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 148:20]
            mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 148:20]
            mask[2] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 148:20]
            node _T_26 = or(chosen_reg, UInt<2>("h0"))
            node _T_27 = bits(_T_26, 1, 0)
            io.in[_T_27].writeResp.valid <= UInt<1>("h1") @[AXISlaveWriteMux.scala 149:39]
    io.out.writeData.bits <= data_reg @[AXISlaveWriteMux.scala 152:25]
    io.out.writeAddr.bits <= address_reg @[AXISlaveWriteMux.scala 153:25]
    node _T_28 = or(chosen_reg, UInt<2>("h0"))
    node _T_29 = bits(_T_28, 1, 0)
    io.in[_T_29].writeResp.bits <= resp_reg @[AXISlaveWriteMux.scala 154:36]

  module RRArbiter_4 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}[3], out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, chosen : UInt<2>}

    wire choice : UInt
    choice <= UInt<2>("h2")
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[io.chosen].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    reg lastGrant : UInt<2>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 82:76]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 82:76]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 45:68]
    node _ctrl_T_1 = or(_ctrl_T, validMask_2) @[Arbiter.scala 45:68]
    node _ctrl_T_2 = or(_ctrl_T_1, io.in[0].valid) @[Arbiter.scala 45:68]
    node _ctrl_T_3 = or(_ctrl_T_2, io.in[1].valid) @[Arbiter.scala 45:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_4 = eq(_ctrl_T_2, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_5 = eq(_ctrl_T_3, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_3) @[Arbiter.scala 86:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 86:34]
    node _T_3 = or(_T_2, ctrl_4) @[Arbiter.scala 86:50]
    node _T_4 = and(ctrl_2, grantMask_2) @[Arbiter.scala 86:34]
    node _T_5 = or(_T_4, ctrl_5) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 74:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 74:16]
    node _io_in_2_ready_T = and(_T_5, io.out.ready) @[Arbiter.scala 74:21]
    io.in[2].ready <= _io_in_2_ready_T @[Arbiter.scala 74:16]
    when io.in[1].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h1") @[Arbiter.scala 91:35]
    when io.in[0].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h0") @[Arbiter.scala 91:35]
    when validMask_2 : @[Arbiter.scala 93:24]
      choice <= UInt<2>("h2") @[Arbiter.scala 93:33]
    when validMask_1 : @[Arbiter.scala 93:24]
      choice <= UInt<1>("h1") @[Arbiter.scala 93:33]

  module AXISlaveWriteMux_1 :
    input clock : Clock
    input reset : Reset
    output io : { out : { writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}}, in : { flip writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}}[3]}

    wire _mask_WIRE : UInt<1>[3] @[AXISlaveWriteMux.scala 25:33]
    _mask_WIRE[0] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 25:33]
    _mask_WIRE[1] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 25:33]
    _mask_WIRE[2] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 25:33]
    wire mask : UInt<1>[3]
    mask <= _mask_WIRE
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[AXISlaveWriteMux.scala 29:22]
    node _outstanding_T = or(io.in[0].writeAddr.valid, io.in[1].writeAddr.valid) @[AXISlaveWriteMux.scala 31:96]
    node _outstanding_T_1 = or(_outstanding_T, io.in[2].writeAddr.valid) @[AXISlaveWriteMux.scala 31:96]
    wire outstanding : UInt<1>
    outstanding <= _outstanding_T_1
    inst arbiter of RRArbiter_4 @[AXISlaveWriteMux.scala 34:23]
    arbiter.clock <= clock
    arbiter.reset <= reset
    reg chosen_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 35:27]
    reg w_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 36:29]
    reg aw_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 37:30]
    wire _address_reg_WIRE : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}
    _address_reg_WIRE.qos is invalid
    _address_reg_WIRE.prot is invalid
    _address_reg_WIRE.cache is invalid
    _address_reg_WIRE.lock is invalid
    _address_reg_WIRE.burst is invalid
    _address_reg_WIRE.size <= UInt<1>("h0")
    _address_reg_WIRE.len is invalid
    _address_reg_WIRE.region is invalid
    _address_reg_WIRE.addr <= UInt<1>("h0")
    _address_reg_WIRE.id <= UInt<1>("h0")
    reg address_reg : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}, clock with :
      reset => (reset, _address_reg_WIRE) @[AXISlaveWriteMux.scala 39:28]
    wire _data_reg_WIRE : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}
    _data_reg_WIRE.last <= UInt<1>("h0")
    _data_reg_WIRE.strb <= UInt<1>("h0")
    _data_reg_WIRE.data <= UInt<1>("h0")
    reg data_reg : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}, clock with :
      reset => (reset, _data_reg_WIRE) @[AXISlaveWriteMux.scala 44:25]
    wire _resp_reg_WIRE : { id : UInt<17>, resp : UInt<2>}
    _resp_reg_WIRE.resp <= UInt<1>("h0")
    _resp_reg_WIRE.id <= UInt<1>("h0")
    reg resp_reg : { id : UInt<17>, resp : UInt<2>}, clock with :
      reset => (reset, _resp_reg_WIRE) @[AXISlaveWriteMux.scala 49:25]
    io.out.writeAddr.bits.qos is invalid @[AXISlaveWriteMux.scala 54:29]
    io.out.writeAddr.bits.len is invalid @[AXISlaveWriteMux.scala 55:29]
    io.out.writeAddr.bits.cache is invalid @[AXISlaveWriteMux.scala 56:31]
    io.out.writeAddr.bits.lock is invalid @[AXISlaveWriteMux.scala 57:30]
    io.out.writeAddr.bits.size <= UInt<1>("h0") @[AXISlaveWriteMux.scala 58:30]
    io.out.writeAddr.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 59:28]
    io.out.writeAddr.bits.prot is invalid @[AXISlaveWriteMux.scala 60:30]
    io.out.writeAddr.bits.region is invalid @[AXISlaveWriteMux.scala 61:32]
    io.out.writeAddr.bits.burst is invalid @[AXISlaveWriteMux.scala 62:31]
    io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 63:26]
    arbiter.io.out.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 64:24]
    io.in[0].writeData.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 67:30]
    io.in[0].writeResp.valid <= UInt<1>("h0") @[AXISlaveWriteMux.scala 68:30]
    io.in[0].writeResp.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 69:32]
    io.in[0].writeResp.bits.resp <= UInt<1>("h0") @[AXISlaveWriteMux.scala 70:34]
    io.in[1].writeData.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 67:30]
    io.in[1].writeResp.valid <= UInt<1>("h0") @[AXISlaveWriteMux.scala 68:30]
    io.in[1].writeResp.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 69:32]
    io.in[1].writeResp.bits.resp <= UInt<1>("h0") @[AXISlaveWriteMux.scala 70:34]
    io.in[2].writeData.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 67:30]
    io.in[2].writeResp.valid <= UInt<1>("h0") @[AXISlaveWriteMux.scala 68:30]
    io.in[2].writeResp.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 69:32]
    io.in[2].writeResp.bits.resp <= UInt<1>("h0") @[AXISlaveWriteMux.scala 70:34]
    node _io_in_0_writeAddr_ready_T = and(arbiter.io.in[0].ready, mask[0]) @[AXISlaveWriteMux.scala 74:56]
    io.in[0].writeAddr.ready <= _io_in_0_writeAddr_ready_T @[AXISlaveWriteMux.scala 74:30]
    node _arbiter_io_in_0_valid_T = and(io.in[0].writeAddr.valid, mask[0]) @[AXISlaveWriteMux.scala 75:56]
    arbiter.io.in[0].valid <= _arbiter_io_in_0_valid_T @[AXISlaveWriteMux.scala 75:28]
    arbiter.io.in[0].bits <= UInt<1>("h0") @[AXISlaveWriteMux.scala 76:27]
    node _io_in_1_writeAddr_ready_T = and(arbiter.io.in[1].ready, mask[1]) @[AXISlaveWriteMux.scala 74:56]
    io.in[1].writeAddr.ready <= _io_in_1_writeAddr_ready_T @[AXISlaveWriteMux.scala 74:30]
    node _arbiter_io_in_1_valid_T = and(io.in[1].writeAddr.valid, mask[1]) @[AXISlaveWriteMux.scala 75:56]
    arbiter.io.in[1].valid <= _arbiter_io_in_1_valid_T @[AXISlaveWriteMux.scala 75:28]
    arbiter.io.in[1].bits <= UInt<1>("h0") @[AXISlaveWriteMux.scala 76:27]
    node _io_in_2_writeAddr_ready_T = and(arbiter.io.in[2].ready, mask[2]) @[AXISlaveWriteMux.scala 74:56]
    io.in[2].writeAddr.ready <= _io_in_2_writeAddr_ready_T @[AXISlaveWriteMux.scala 74:30]
    node _arbiter_io_in_2_valid_T = and(io.in[2].writeAddr.valid, mask[2]) @[AXISlaveWriteMux.scala 75:56]
    arbiter.io.in[2].valid <= _arbiter_io_in_2_valid_T @[AXISlaveWriteMux.scala 75:28]
    arbiter.io.in[2].bits <= UInt<1>("h0") @[AXISlaveWriteMux.scala 76:27]
    io.out.writeAddr.valid <= aw_determined @[AXISlaveWriteMux.scala 78:26]
    io.out.writeData.valid <= w_determined @[AXISlaveWriteMux.scala 79:26]
    node _T = eq(UInt<2>("h0"), state) @[AXISlaveWriteMux.scala 81:16]
    when _T : @[AXISlaveWriteMux.scala 81:16]
      when outstanding : @[AXISlaveWriteMux.scala 83:24]
        node _T_1 = and(io.in[arbiter.io.chosen].writeData.ready, io.in[arbiter.io.chosen].writeData.valid) @[Decoupled.scala 52:35]
        when _T_1 : @[AXISlaveWriteMux.scala 84:61]
          state <= UInt<2>("h2") @[AXISlaveWriteMux.scala 85:17]
        else :
          state <= UInt<2>("h1") @[AXISlaveWriteMux.scala 88:17]
    else :
      node _T_2 = eq(UInt<2>("h1"), state) @[AXISlaveWriteMux.scala 81:16]
      when _T_2 : @[AXISlaveWriteMux.scala 81:16]
        node _T_3 = or(chosen_reg, UInt<2>("h0"))
        node _T_4 = bits(_T_3, 1, 0)
        node _T_5 = and(io.in[_T_4].writeData.ready, io.in[_T_4].writeData.valid) @[Decoupled.scala 52:35]
        when _T_5 : @[AXISlaveWriteMux.scala 93:45]
          state <= UInt<2>("h2") @[AXISlaveWriteMux.scala 94:15]
      else :
        node _T_6 = eq(UInt<2>("h2"), state) @[AXISlaveWriteMux.scala 81:16]
        when _T_6 : @[AXISlaveWriteMux.scala 81:16]
          node _T_7 = and(io.out.writeResp.ready, io.out.writeResp.valid) @[Decoupled.scala 52:35]
          when _T_7 : @[AXISlaveWriteMux.scala 98:34]
            state <= UInt<2>("h3") @[AXISlaveWriteMux.scala 99:15]
        else :
          node _T_8 = eq(UInt<2>("h3"), state) @[AXISlaveWriteMux.scala 81:16]
          when _T_8 : @[AXISlaveWriteMux.scala 81:16]
            node _T_9 = or(chosen_reg, UInt<2>("h0"))
            node _T_10 = bits(_T_9, 1, 0)
            node _T_11 = and(io.in[_T_10].writeResp.ready, io.in[_T_10].writeResp.valid) @[Decoupled.scala 52:35]
            when _T_11 : @[AXISlaveWriteMux.scala 103:45]
              state <= UInt<2>("h0") @[AXISlaveWriteMux.scala 104:15]
    node _T_12 = eq(state, UInt<2>("h0")) @[AXISlaveWriteMux.scala 109:14]
    when _T_12 : @[AXISlaveWriteMux.scala 109:24]
      mask[0] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 110:20]
      mask[1] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 110:20]
      mask[2] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 110:20]
      when arbiter.io.out.valid : @[AXISlaveWriteMux.scala 111:31]
        io.in[arbiter.io.chosen].writeData.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 112:46]
        chosen_reg <= arbiter.io.chosen @[AXISlaveWriteMux.scala 113:18]
        address_reg <= io.in[arbiter.io.chosen].writeAddr.bits @[AXISlaveWriteMux.scala 114:19]
        aw_determined <= UInt<1>("h1") @[AXISlaveWriteMux.scala 115:21]
        node _T_13 = and(io.in[arbiter.io.chosen].writeData.ready, io.in[arbiter.io.chosen].writeData.valid) @[Decoupled.scala 52:35]
        when _T_13 : @[AXISlaveWriteMux.scala 116:59]
          data_reg <= io.in[arbiter.io.chosen].writeData.bits @[AXISlaveWriteMux.scala 117:18]
          w_determined <= UInt<1>("h1") @[AXISlaveWriteMux.scala 118:22]
      io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 121:28]
    else :
      node _T_14 = eq(state, UInt<2>("h1")) @[AXISlaveWriteMux.scala 123:19]
      when _T_14 : @[AXISlaveWriteMux.scala 123:33]
        mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 124:20]
        mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 124:20]
        mask[2] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 124:20]
        node _T_15 = or(chosen_reg, UInt<2>("h0"))
        node _T_16 = bits(_T_15, 1, 0)
        node _T_17 = and(io.in[_T_16].writeData.ready, io.in[_T_16].writeData.valid) @[Decoupled.scala 52:35]
        when _T_17 : @[AXISlaveWriteMux.scala 125:43]
          node _data_reg_T = or(chosen_reg, UInt<2>("h0"))
          node _data_reg_T_1 = bits(_data_reg_T, 1, 0)
          data_reg <= io.in[_data_reg_T_1].writeData.bits @[AXISlaveWriteMux.scala 126:16]
        node _T_18 = and(io.out.writeAddr.ready, io.out.writeAddr.valid) @[Decoupled.scala 52:35]
        when _T_18 : @[AXISlaveWriteMux.scala 128:32]
          aw_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 129:21]
        node _T_19 = or(chosen_reg, UInt<2>("h0"))
        node _T_20 = bits(_T_19, 1, 0)
        io.in[_T_20].writeData.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 131:39]
        io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 132:28]
      else :
        node _T_21 = eq(state, UInt<2>("h2")) @[AXISlaveWriteMux.scala 134:19]
        when _T_21 : @[AXISlaveWriteMux.scala 134:33]
          mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 135:22]
          mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 135:22]
          mask[2] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 135:22]
          node _T_22 = and(io.out.writeAddr.ready, io.out.writeAddr.valid) @[Decoupled.scala 52:35]
          when _T_22 : @[AXISlaveWriteMux.scala 136:34]
            aw_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 137:23]
          node _T_23 = and(io.out.writeData.ready, io.out.writeData.valid) @[Decoupled.scala 52:35]
          when _T_23 : @[AXISlaveWriteMux.scala 139:34]
            w_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 140:22]
          node _T_24 = and(io.out.writeResp.ready, io.out.writeResp.valid) @[Decoupled.scala 52:35]
          when _T_24 : @[AXISlaveWriteMux.scala 142:34]
            resp_reg <= io.out.writeResp.bits @[AXISlaveWriteMux.scala 143:18]
          io.out.writeResp.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 145:30]
        else :
          node _T_25 = eq(state, UInt<2>("h3")) @[AXISlaveWriteMux.scala 147:19]
          when _T_25 : @[AXISlaveWriteMux.scala 147:31]
            mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 148:20]
            mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 148:20]
            mask[2] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 148:20]
            node _T_26 = or(chosen_reg, UInt<2>("h0"))
            node _T_27 = bits(_T_26, 1, 0)
            io.in[_T_27].writeResp.valid <= UInt<1>("h1") @[AXISlaveWriteMux.scala 149:39]
    io.out.writeData.bits <= data_reg @[AXISlaveWriteMux.scala 152:25]
    io.out.writeAddr.bits <= address_reg @[AXISlaveWriteMux.scala 153:25]
    node _T_28 = or(chosen_reg, UInt<2>("h0"))
    node _T_29 = bits(_T_28, 1, 0)
    io.in[_T_29].writeResp.bits <= resp_reg @[AXISlaveWriteMux.scala 154:36]

  module RRArbiter_5 :
    input clock : Clock
    input reset : Reset
    output io : { flip in : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}[3], out : { flip ready : UInt<1>, valid : UInt<1>, bits : UInt<1>}, chosen : UInt<2>}

    wire choice : UInt
    choice <= UInt<2>("h2")
    io.chosen <= choice @[Arbiter.scala 54:13]
    io.out.valid <= io.in[io.chosen].valid @[Arbiter.scala 55:16]
    io.out.bits <= io.in[io.chosen].bits @[Arbiter.scala 56:15]
    node _ctrl_validMask_grantMask_lastGrant_T = and(io.out.ready, io.out.valid) @[Decoupled.scala 52:35]
    reg lastGrant : UInt<2>, clock with :
      reset => (UInt<1>("h0"), lastGrant) @[Reg.scala 19:16]
    when _ctrl_validMask_grantMask_lastGrant_T : @[Reg.scala 20:18]
      lastGrant <= io.chosen @[Reg.scala 20:22]
    node grantMask_0 = gt(UInt<1>("h0"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_1 = gt(UInt<1>("h1"), lastGrant) @[Arbiter.scala 81:49]
    node grantMask_2 = gt(UInt<2>("h2"), lastGrant) @[Arbiter.scala 81:49]
    node validMask_0 = and(io.in[0].valid, grantMask_0) @[Arbiter.scala 82:76]
    node validMask_1 = and(io.in[1].valid, grantMask_1) @[Arbiter.scala 82:76]
    node validMask_2 = and(io.in[2].valid, grantMask_2) @[Arbiter.scala 82:76]
    node _ctrl_T = or(validMask_0, validMask_1) @[Arbiter.scala 45:68]
    node _ctrl_T_1 = or(_ctrl_T, validMask_2) @[Arbiter.scala 45:68]
    node _ctrl_T_2 = or(_ctrl_T_1, io.in[0].valid) @[Arbiter.scala 45:68]
    node _ctrl_T_3 = or(_ctrl_T_2, io.in[1].valid) @[Arbiter.scala 45:68]
    node ctrl_1 = eq(validMask_0, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_2 = eq(_ctrl_T, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_3 = eq(_ctrl_T_1, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_4 = eq(_ctrl_T_2, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node ctrl_5 = eq(_ctrl_T_3, UInt<1>("h0")) @[Arbiter.scala 45:78]
    node _T = and(UInt<1>("h1"), grantMask_0) @[Arbiter.scala 86:34]
    node _T_1 = or(_T, ctrl_3) @[Arbiter.scala 86:50]
    node _T_2 = and(ctrl_1, grantMask_1) @[Arbiter.scala 86:34]
    node _T_3 = or(_T_2, ctrl_4) @[Arbiter.scala 86:50]
    node _T_4 = and(ctrl_2, grantMask_2) @[Arbiter.scala 86:34]
    node _T_5 = or(_T_4, ctrl_5) @[Arbiter.scala 86:50]
    node _io_in_0_ready_T = and(_T_1, io.out.ready) @[Arbiter.scala 74:21]
    io.in[0].ready <= _io_in_0_ready_T @[Arbiter.scala 74:16]
    node _io_in_1_ready_T = and(_T_3, io.out.ready) @[Arbiter.scala 74:21]
    io.in[1].ready <= _io_in_1_ready_T @[Arbiter.scala 74:16]
    node _io_in_2_ready_T = and(_T_5, io.out.ready) @[Arbiter.scala 74:21]
    io.in[2].ready <= _io_in_2_ready_T @[Arbiter.scala 74:16]
    when io.in[1].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h1") @[Arbiter.scala 91:35]
    when io.in[0].valid : @[Arbiter.scala 91:26]
      choice <= UInt<1>("h0") @[Arbiter.scala 91:35]
    when validMask_2 : @[Arbiter.scala 93:24]
      choice <= UInt<2>("h2") @[Arbiter.scala 93:33]
    when validMask_1 : @[Arbiter.scala 93:24]
      choice <= UInt<1>("h1") @[Arbiter.scala 93:33]

  module AXISlaveWriteMux_2 :
    input clock : Clock
    input reset : Reset
    output io : { out : { writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}}, in : { flip writeAddr : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip writeData : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, writeResp : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}}[3]}

    wire _mask_WIRE : UInt<1>[3] @[AXISlaveWriteMux.scala 25:33]
    _mask_WIRE[0] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 25:33]
    _mask_WIRE[1] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 25:33]
    _mask_WIRE[2] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 25:33]
    wire mask : UInt<1>[3]
    mask <= _mask_WIRE
    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[AXISlaveWriteMux.scala 29:22]
    node _outstanding_T = or(io.in[0].writeAddr.valid, io.in[1].writeAddr.valid) @[AXISlaveWriteMux.scala 31:96]
    node _outstanding_T_1 = or(_outstanding_T, io.in[2].writeAddr.valid) @[AXISlaveWriteMux.scala 31:96]
    wire outstanding : UInt<1>
    outstanding <= _outstanding_T_1
    inst arbiter of RRArbiter_5 @[AXISlaveWriteMux.scala 34:23]
    arbiter.clock <= clock
    arbiter.reset <= reset
    reg chosen_reg : UInt, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 35:27]
    reg w_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 36:29]
    reg aw_determined : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[AXISlaveWriteMux.scala 37:30]
    wire _address_reg_WIRE : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}
    _address_reg_WIRE.qos is invalid
    _address_reg_WIRE.prot is invalid
    _address_reg_WIRE.cache is invalid
    _address_reg_WIRE.lock is invalid
    _address_reg_WIRE.burst is invalid
    _address_reg_WIRE.size <= UInt<1>("h0")
    _address_reg_WIRE.len is invalid
    _address_reg_WIRE.region is invalid
    _address_reg_WIRE.addr <= UInt<1>("h0")
    _address_reg_WIRE.id <= UInt<1>("h0")
    reg address_reg : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}, clock with :
      reset => (reset, _address_reg_WIRE) @[AXISlaveWriteMux.scala 39:28]
    wire _data_reg_WIRE : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}
    _data_reg_WIRE.last <= UInt<1>("h0")
    _data_reg_WIRE.strb <= UInt<1>("h0")
    _data_reg_WIRE.data <= UInt<1>("h0")
    reg data_reg : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}, clock with :
      reset => (reset, _data_reg_WIRE) @[AXISlaveWriteMux.scala 44:25]
    wire _resp_reg_WIRE : { id : UInt<17>, resp : UInt<2>}
    _resp_reg_WIRE.resp <= UInt<1>("h0")
    _resp_reg_WIRE.id <= UInt<1>("h0")
    reg resp_reg : { id : UInt<17>, resp : UInt<2>}, clock with :
      reset => (reset, _resp_reg_WIRE) @[AXISlaveWriteMux.scala 49:25]
    io.out.writeAddr.bits.qos is invalid @[AXISlaveWriteMux.scala 54:29]
    io.out.writeAddr.bits.len is invalid @[AXISlaveWriteMux.scala 55:29]
    io.out.writeAddr.bits.cache is invalid @[AXISlaveWriteMux.scala 56:31]
    io.out.writeAddr.bits.lock is invalid @[AXISlaveWriteMux.scala 57:30]
    io.out.writeAddr.bits.size <= UInt<1>("h0") @[AXISlaveWriteMux.scala 58:30]
    io.out.writeAddr.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 59:28]
    io.out.writeAddr.bits.prot is invalid @[AXISlaveWriteMux.scala 60:30]
    io.out.writeAddr.bits.region is invalid @[AXISlaveWriteMux.scala 61:32]
    io.out.writeAddr.bits.burst is invalid @[AXISlaveWriteMux.scala 62:31]
    io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 63:26]
    arbiter.io.out.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 64:24]
    io.in[0].writeData.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 67:30]
    io.in[0].writeResp.valid <= UInt<1>("h0") @[AXISlaveWriteMux.scala 68:30]
    io.in[0].writeResp.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 69:32]
    io.in[0].writeResp.bits.resp <= UInt<1>("h0") @[AXISlaveWriteMux.scala 70:34]
    io.in[1].writeData.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 67:30]
    io.in[1].writeResp.valid <= UInt<1>("h0") @[AXISlaveWriteMux.scala 68:30]
    io.in[1].writeResp.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 69:32]
    io.in[1].writeResp.bits.resp <= UInt<1>("h0") @[AXISlaveWriteMux.scala 70:34]
    io.in[2].writeData.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 67:30]
    io.in[2].writeResp.valid <= UInt<1>("h0") @[AXISlaveWriteMux.scala 68:30]
    io.in[2].writeResp.bits.id <= UInt<1>("h0") @[AXISlaveWriteMux.scala 69:32]
    io.in[2].writeResp.bits.resp <= UInt<1>("h0") @[AXISlaveWriteMux.scala 70:34]
    node _io_in_0_writeAddr_ready_T = and(arbiter.io.in[0].ready, mask[0]) @[AXISlaveWriteMux.scala 74:56]
    io.in[0].writeAddr.ready <= _io_in_0_writeAddr_ready_T @[AXISlaveWriteMux.scala 74:30]
    node _arbiter_io_in_0_valid_T = and(io.in[0].writeAddr.valid, mask[0]) @[AXISlaveWriteMux.scala 75:56]
    arbiter.io.in[0].valid <= _arbiter_io_in_0_valid_T @[AXISlaveWriteMux.scala 75:28]
    arbiter.io.in[0].bits <= UInt<1>("h0") @[AXISlaveWriteMux.scala 76:27]
    node _io_in_1_writeAddr_ready_T = and(arbiter.io.in[1].ready, mask[1]) @[AXISlaveWriteMux.scala 74:56]
    io.in[1].writeAddr.ready <= _io_in_1_writeAddr_ready_T @[AXISlaveWriteMux.scala 74:30]
    node _arbiter_io_in_1_valid_T = and(io.in[1].writeAddr.valid, mask[1]) @[AXISlaveWriteMux.scala 75:56]
    arbiter.io.in[1].valid <= _arbiter_io_in_1_valid_T @[AXISlaveWriteMux.scala 75:28]
    arbiter.io.in[1].bits <= UInt<1>("h0") @[AXISlaveWriteMux.scala 76:27]
    node _io_in_2_writeAddr_ready_T = and(arbiter.io.in[2].ready, mask[2]) @[AXISlaveWriteMux.scala 74:56]
    io.in[2].writeAddr.ready <= _io_in_2_writeAddr_ready_T @[AXISlaveWriteMux.scala 74:30]
    node _arbiter_io_in_2_valid_T = and(io.in[2].writeAddr.valid, mask[2]) @[AXISlaveWriteMux.scala 75:56]
    arbiter.io.in[2].valid <= _arbiter_io_in_2_valid_T @[AXISlaveWriteMux.scala 75:28]
    arbiter.io.in[2].bits <= UInt<1>("h0") @[AXISlaveWriteMux.scala 76:27]
    io.out.writeAddr.valid <= aw_determined @[AXISlaveWriteMux.scala 78:26]
    io.out.writeData.valid <= w_determined @[AXISlaveWriteMux.scala 79:26]
    node _T = eq(UInt<2>("h0"), state) @[AXISlaveWriteMux.scala 81:16]
    when _T : @[AXISlaveWriteMux.scala 81:16]
      when outstanding : @[AXISlaveWriteMux.scala 83:24]
        node _T_1 = and(io.in[arbiter.io.chosen].writeData.ready, io.in[arbiter.io.chosen].writeData.valid) @[Decoupled.scala 52:35]
        when _T_1 : @[AXISlaveWriteMux.scala 84:61]
          state <= UInt<2>("h2") @[AXISlaveWriteMux.scala 85:17]
        else :
          state <= UInt<2>("h1") @[AXISlaveWriteMux.scala 88:17]
    else :
      node _T_2 = eq(UInt<2>("h1"), state) @[AXISlaveWriteMux.scala 81:16]
      when _T_2 : @[AXISlaveWriteMux.scala 81:16]
        node _T_3 = or(chosen_reg, UInt<2>("h0"))
        node _T_4 = bits(_T_3, 1, 0)
        node _T_5 = and(io.in[_T_4].writeData.ready, io.in[_T_4].writeData.valid) @[Decoupled.scala 52:35]
        when _T_5 : @[AXISlaveWriteMux.scala 93:45]
          state <= UInt<2>("h2") @[AXISlaveWriteMux.scala 94:15]
      else :
        node _T_6 = eq(UInt<2>("h2"), state) @[AXISlaveWriteMux.scala 81:16]
        when _T_6 : @[AXISlaveWriteMux.scala 81:16]
          node _T_7 = and(io.out.writeResp.ready, io.out.writeResp.valid) @[Decoupled.scala 52:35]
          when _T_7 : @[AXISlaveWriteMux.scala 98:34]
            state <= UInt<2>("h3") @[AXISlaveWriteMux.scala 99:15]
        else :
          node _T_8 = eq(UInt<2>("h3"), state) @[AXISlaveWriteMux.scala 81:16]
          when _T_8 : @[AXISlaveWriteMux.scala 81:16]
            node _T_9 = or(chosen_reg, UInt<2>("h0"))
            node _T_10 = bits(_T_9, 1, 0)
            node _T_11 = and(io.in[_T_10].writeResp.ready, io.in[_T_10].writeResp.valid) @[Decoupled.scala 52:35]
            when _T_11 : @[AXISlaveWriteMux.scala 103:45]
              state <= UInt<2>("h0") @[AXISlaveWriteMux.scala 104:15]
    node _T_12 = eq(state, UInt<2>("h0")) @[AXISlaveWriteMux.scala 109:14]
    when _T_12 : @[AXISlaveWriteMux.scala 109:24]
      mask[0] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 110:20]
      mask[1] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 110:20]
      mask[2] <= UInt<1>("h1") @[AXISlaveWriteMux.scala 110:20]
      when arbiter.io.out.valid : @[AXISlaveWriteMux.scala 111:31]
        io.in[arbiter.io.chosen].writeData.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 112:46]
        chosen_reg <= arbiter.io.chosen @[AXISlaveWriteMux.scala 113:18]
        address_reg <= io.in[arbiter.io.chosen].writeAddr.bits @[AXISlaveWriteMux.scala 114:19]
        aw_determined <= UInt<1>("h1") @[AXISlaveWriteMux.scala 115:21]
        node _T_13 = and(io.in[arbiter.io.chosen].writeData.ready, io.in[arbiter.io.chosen].writeData.valid) @[Decoupled.scala 52:35]
        when _T_13 : @[AXISlaveWriteMux.scala 116:59]
          data_reg <= io.in[arbiter.io.chosen].writeData.bits @[AXISlaveWriteMux.scala 117:18]
          w_determined <= UInt<1>("h1") @[AXISlaveWriteMux.scala 118:22]
      io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 121:28]
    else :
      node _T_14 = eq(state, UInt<2>("h1")) @[AXISlaveWriteMux.scala 123:19]
      when _T_14 : @[AXISlaveWriteMux.scala 123:33]
        mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 124:20]
        mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 124:20]
        mask[2] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 124:20]
        node _T_15 = or(chosen_reg, UInt<2>("h0"))
        node _T_16 = bits(_T_15, 1, 0)
        node _T_17 = and(io.in[_T_16].writeData.ready, io.in[_T_16].writeData.valid) @[Decoupled.scala 52:35]
        when _T_17 : @[AXISlaveWriteMux.scala 125:43]
          node _data_reg_T = or(chosen_reg, UInt<2>("h0"))
          node _data_reg_T_1 = bits(_data_reg_T, 1, 0)
          data_reg <= io.in[_data_reg_T_1].writeData.bits @[AXISlaveWriteMux.scala 126:16]
        node _T_18 = and(io.out.writeAddr.ready, io.out.writeAddr.valid) @[Decoupled.scala 52:35]
        when _T_18 : @[AXISlaveWriteMux.scala 128:32]
          aw_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 129:21]
        node _T_19 = or(chosen_reg, UInt<2>("h0"))
        node _T_20 = bits(_T_19, 1, 0)
        io.in[_T_20].writeData.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 131:39]
        io.out.writeResp.ready <= UInt<1>("h0") @[AXISlaveWriteMux.scala 132:28]
      else :
        node _T_21 = eq(state, UInt<2>("h2")) @[AXISlaveWriteMux.scala 134:19]
        when _T_21 : @[AXISlaveWriteMux.scala 134:33]
          mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 135:22]
          mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 135:22]
          mask[2] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 135:22]
          node _T_22 = and(io.out.writeAddr.ready, io.out.writeAddr.valid) @[Decoupled.scala 52:35]
          when _T_22 : @[AXISlaveWriteMux.scala 136:34]
            aw_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 137:23]
          node _T_23 = and(io.out.writeData.ready, io.out.writeData.valid) @[Decoupled.scala 52:35]
          when _T_23 : @[AXISlaveWriteMux.scala 139:34]
            w_determined <= UInt<1>("h0") @[AXISlaveWriteMux.scala 140:22]
          node _T_24 = and(io.out.writeResp.ready, io.out.writeResp.valid) @[Decoupled.scala 52:35]
          when _T_24 : @[AXISlaveWriteMux.scala 142:34]
            resp_reg <= io.out.writeResp.bits @[AXISlaveWriteMux.scala 143:18]
          io.out.writeResp.ready <= UInt<1>("h1") @[AXISlaveWriteMux.scala 145:30]
        else :
          node _T_25 = eq(state, UInt<2>("h3")) @[AXISlaveWriteMux.scala 147:19]
          when _T_25 : @[AXISlaveWriteMux.scala 147:31]
            mask[0] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 148:20]
            mask[1] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 148:20]
            mask[2] <= UInt<1>("h0") @[AXISlaveWriteMux.scala 148:20]
            node _T_26 = or(chosen_reg, UInt<2>("h0"))
            node _T_27 = bits(_T_26, 1, 0)
            io.in[_T_27].writeResp.valid <= UInt<1>("h1") @[AXISlaveWriteMux.scala 149:39]
    io.out.writeData.bits <= data_reg @[AXISlaveWriteMux.scala 152:25]
    io.out.writeAddr.bits <= address_reg @[AXISlaveWriteMux.scala 153:25]
    node _T_28 = or(chosen_reg, UInt<2>("h0"))
    node _T_29 = bits(_T_28, 1, 0)
    io.in[_T_29].writeResp.bits <= resp_reg @[AXISlaveWriteMux.scala 154:36]

  module AXILiteXBar :
    input clock : Clock
    input reset : Reset
    output io : { flip masters : { aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, flip b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}, ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[3], flip slaves : { flip aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}, flip ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}[3]}

    inst readBuses_0 of AXIReadBus @[AXILiteXBar.scala 15:11]
    readBuses_0.clock <= clock
    readBuses_0.reset <= reset
    inst readBuses_1 of AXIReadBus_1 @[AXILiteXBar.scala 15:11]
    readBuses_1.clock <= clock
    readBuses_1.reset <= reset
    inst readBuses_2 of AXIReadBus_2 @[AXILiteXBar.scala 15:11]
    readBuses_2.clock <= clock
    readBuses_2.reset <= reset
    inst readMuxes_0 of AXISlaveReadMux @[AXILiteXBar.scala 18:11]
    readMuxes_0.clock <= clock
    readMuxes_0.reset <= reset
    inst readMuxes_1 of AXISlaveReadMux_1 @[AXILiteXBar.scala 18:11]
    readMuxes_1.clock <= clock
    readMuxes_1.reset <= reset
    inst readMuxes_2 of AXISlaveReadMux_2 @[AXILiteXBar.scala 18:11]
    readMuxes_2.clock <= clock
    readMuxes_2.reset <= reset
    inst writeBuses_0 of AXIWriteBus @[AXILiteXBar.scala 23:11]
    writeBuses_0.clock <= clock
    writeBuses_0.reset <= reset
    inst writeBuses_1 of AXIWriteBus_1 @[AXILiteXBar.scala 23:11]
    writeBuses_1.clock <= clock
    writeBuses_1.reset <= reset
    inst writeBuses_2 of AXIWriteBus_2 @[AXILiteXBar.scala 23:11]
    writeBuses_2.clock <= clock
    writeBuses_2.reset <= reset
    inst writeMuxes_0 of AXISlaveWriteMux @[AXILiteXBar.scala 27:11]
    writeMuxes_0.clock <= clock
    writeMuxes_0.reset <= reset
    inst writeMuxes_1 of AXISlaveWriteMux_1 @[AXILiteXBar.scala 27:11]
    writeMuxes_1.clock <= clock
    writeMuxes_1.reset <= reset
    inst writeMuxes_2 of AXISlaveWriteMux_2 @[AXILiteXBar.scala 27:11]
    writeMuxes_2.clock <= clock
    writeMuxes_2.reset <= reset
    readBuses_0.io.master.readAddr <= io.masters[0].ar @[AXILiteXBar.scala 31:15]
    io.masters[0].r.bits <= readBuses_0.io.master.readData.bits @[AXILiteXBar.scala 32:14]
    io.masters[0].r.valid <= readBuses_0.io.master.readData.valid @[AXILiteXBar.scala 32:14]
    readBuses_0.io.master.readData.ready <= io.masters[0].r.ready @[AXILiteXBar.scala 32:14]
    readBuses_1.io.master.readAddr <= io.masters[1].ar @[AXILiteXBar.scala 31:15]
    io.masters[1].r.bits <= readBuses_1.io.master.readData.bits @[AXILiteXBar.scala 32:14]
    io.masters[1].r.valid <= readBuses_1.io.master.readData.valid @[AXILiteXBar.scala 32:14]
    readBuses_1.io.master.readData.ready <= io.masters[1].r.ready @[AXILiteXBar.scala 32:14]
    readBuses_2.io.master.readAddr <= io.masters[2].ar @[AXILiteXBar.scala 31:15]
    io.masters[2].r.bits <= readBuses_2.io.master.readData.bits @[AXILiteXBar.scala 32:14]
    io.masters[2].r.valid <= readBuses_2.io.master.readData.valid @[AXILiteXBar.scala 32:14]
    readBuses_2.io.master.readData.ready <= io.masters[2].r.ready @[AXILiteXBar.scala 32:14]
    writeBuses_0.io.master.writeAddr <= io.masters[0].aw @[AXILiteXBar.scala 36:15]
    writeBuses_0.io.master.writeData <= io.masters[0].w @[AXILiteXBar.scala 37:14]
    io.masters[0].b.bits <= writeBuses_0.io.master.writeResp.bits @[AXILiteXBar.scala 38:14]
    io.masters[0].b.valid <= writeBuses_0.io.master.writeResp.valid @[AXILiteXBar.scala 38:14]
    writeBuses_0.io.master.writeResp.ready <= io.masters[0].b.ready @[AXILiteXBar.scala 38:14]
    writeBuses_1.io.master.writeAddr <= io.masters[1].aw @[AXILiteXBar.scala 36:15]
    writeBuses_1.io.master.writeData <= io.masters[1].w @[AXILiteXBar.scala 37:14]
    io.masters[1].b.bits <= writeBuses_1.io.master.writeResp.bits @[AXILiteXBar.scala 38:14]
    io.masters[1].b.valid <= writeBuses_1.io.master.writeResp.valid @[AXILiteXBar.scala 38:14]
    writeBuses_1.io.master.writeResp.ready <= io.masters[1].b.ready @[AXILiteXBar.scala 38:14]
    writeBuses_2.io.master.writeAddr <= io.masters[2].aw @[AXILiteXBar.scala 36:15]
    writeBuses_2.io.master.writeData <= io.masters[2].w @[AXILiteXBar.scala 37:14]
    io.masters[2].b.bits <= writeBuses_2.io.master.writeResp.bits @[AXILiteXBar.scala 38:14]
    io.masters[2].b.valid <= writeBuses_2.io.master.writeResp.valid @[AXILiteXBar.scala 38:14]
    writeBuses_2.io.master.writeResp.ready <= io.masters[2].b.ready @[AXILiteXBar.scala 38:14]
    io.slaves[0].ar.bits <= readMuxes_0.io.out.readAddr.bits @[AXILiteXBar.scala 42:16]
    io.slaves[0].ar.valid <= readMuxes_0.io.out.readAddr.valid @[AXILiteXBar.scala 42:16]
    readMuxes_0.io.out.readAddr.ready <= io.slaves[0].ar.ready @[AXILiteXBar.scala 42:16]
    readMuxes_0.io.out.readData <= io.slaves[0].r @[AXILiteXBar.scala 43:15]
    io.slaves[1].ar.bits <= readMuxes_1.io.out.readAddr.bits @[AXILiteXBar.scala 42:16]
    io.slaves[1].ar.valid <= readMuxes_1.io.out.readAddr.valid @[AXILiteXBar.scala 42:16]
    readMuxes_1.io.out.readAddr.ready <= io.slaves[1].ar.ready @[AXILiteXBar.scala 42:16]
    readMuxes_1.io.out.readData <= io.slaves[1].r @[AXILiteXBar.scala 43:15]
    io.slaves[2].ar.bits <= readMuxes_2.io.out.readAddr.bits @[AXILiteXBar.scala 42:16]
    io.slaves[2].ar.valid <= readMuxes_2.io.out.readAddr.valid @[AXILiteXBar.scala 42:16]
    readMuxes_2.io.out.readAddr.ready <= io.slaves[2].ar.ready @[AXILiteXBar.scala 42:16]
    readMuxes_2.io.out.readData <= io.slaves[2].r @[AXILiteXBar.scala 43:15]
    io.slaves[0].aw.bits <= writeMuxes_0.io.out.writeAddr.bits @[AXILiteXBar.scala 48:16]
    io.slaves[0].aw.valid <= writeMuxes_0.io.out.writeAddr.valid @[AXILiteXBar.scala 48:16]
    writeMuxes_0.io.out.writeAddr.ready <= io.slaves[0].aw.ready @[AXILiteXBar.scala 48:16]
    io.slaves[0].w.bits <= writeMuxes_0.io.out.writeData.bits @[AXILiteXBar.scala 49:15]
    io.slaves[0].w.valid <= writeMuxes_0.io.out.writeData.valid @[AXILiteXBar.scala 49:15]
    writeMuxes_0.io.out.writeData.ready <= io.slaves[0].w.ready @[AXILiteXBar.scala 49:15]
    writeMuxes_0.io.out.writeResp <= io.slaves[0].b @[AXILiteXBar.scala 50:15]
    io.slaves[1].aw.bits <= writeMuxes_1.io.out.writeAddr.bits @[AXILiteXBar.scala 48:16]
    io.slaves[1].aw.valid <= writeMuxes_1.io.out.writeAddr.valid @[AXILiteXBar.scala 48:16]
    writeMuxes_1.io.out.writeAddr.ready <= io.slaves[1].aw.ready @[AXILiteXBar.scala 48:16]
    io.slaves[1].w.bits <= writeMuxes_1.io.out.writeData.bits @[AXILiteXBar.scala 49:15]
    io.slaves[1].w.valid <= writeMuxes_1.io.out.writeData.valid @[AXILiteXBar.scala 49:15]
    writeMuxes_1.io.out.writeData.ready <= io.slaves[1].w.ready @[AXILiteXBar.scala 49:15]
    writeMuxes_1.io.out.writeResp <= io.slaves[1].b @[AXILiteXBar.scala 50:15]
    io.slaves[2].aw.bits <= writeMuxes_2.io.out.writeAddr.bits @[AXILiteXBar.scala 48:16]
    io.slaves[2].aw.valid <= writeMuxes_2.io.out.writeAddr.valid @[AXILiteXBar.scala 48:16]
    writeMuxes_2.io.out.writeAddr.ready <= io.slaves[2].aw.ready @[AXILiteXBar.scala 48:16]
    io.slaves[2].w.bits <= writeMuxes_2.io.out.writeData.bits @[AXILiteXBar.scala 49:15]
    io.slaves[2].w.valid <= writeMuxes_2.io.out.writeData.valid @[AXILiteXBar.scala 49:15]
    writeMuxes_2.io.out.writeData.ready <= io.slaves[2].w.ready @[AXILiteXBar.scala 49:15]
    writeMuxes_2.io.out.writeResp <= io.slaves[2].b @[AXILiteXBar.scala 50:15]
    readBuses_0.io.slave[0].readData <= readMuxes_0.io.in[0].readData @[AXILiteXBar.scala 54:30]
    readMuxes_0.io.in[0].readAddr <= readBuses_0.io.slave[0].readAddr @[AXILiteXBar.scala 54:30]
    readBuses_0.io.slave[1].readData <= readMuxes_1.io.in[0].readData @[AXILiteXBar.scala 54:30]
    readMuxes_1.io.in[0].readAddr <= readBuses_0.io.slave[1].readAddr @[AXILiteXBar.scala 54:30]
    readBuses_0.io.slave[2].readData <= readMuxes_2.io.in[0].readData @[AXILiteXBar.scala 54:30]
    readMuxes_2.io.in[0].readAddr <= readBuses_0.io.slave[2].readAddr @[AXILiteXBar.scala 54:30]
    readBuses_1.io.slave[0].readData <= readMuxes_0.io.in[1].readData @[AXILiteXBar.scala 54:30]
    readMuxes_0.io.in[1].readAddr <= readBuses_1.io.slave[0].readAddr @[AXILiteXBar.scala 54:30]
    readBuses_1.io.slave[1].readData <= readMuxes_1.io.in[1].readData @[AXILiteXBar.scala 54:30]
    readMuxes_1.io.in[1].readAddr <= readBuses_1.io.slave[1].readAddr @[AXILiteXBar.scala 54:30]
    readBuses_1.io.slave[2].readData <= readMuxes_2.io.in[1].readData @[AXILiteXBar.scala 54:30]
    readMuxes_2.io.in[1].readAddr <= readBuses_1.io.slave[2].readAddr @[AXILiteXBar.scala 54:30]
    readBuses_2.io.slave[0].readData <= readMuxes_0.io.in[2].readData @[AXILiteXBar.scala 54:30]
    readMuxes_0.io.in[2].readAddr <= readBuses_2.io.slave[0].readAddr @[AXILiteXBar.scala 54:30]
    readBuses_2.io.slave[1].readData <= readMuxes_1.io.in[2].readData @[AXILiteXBar.scala 54:30]
    readMuxes_1.io.in[2].readAddr <= readBuses_2.io.slave[1].readAddr @[AXILiteXBar.scala 54:30]
    readBuses_2.io.slave[2].readData <= readMuxes_2.io.in[2].readData @[AXILiteXBar.scala 54:30]
    readMuxes_2.io.in[2].readAddr <= readBuses_2.io.slave[2].readAddr @[AXILiteXBar.scala 54:30]
    writeBuses_0.io.slave[0].writeResp <= writeMuxes_0.io.in[0].writeResp @[AXILiteXBar.scala 58:31]
    writeMuxes_0.io.in[0].writeData <= writeBuses_0.io.slave[0].writeData @[AXILiteXBar.scala 58:31]
    writeMuxes_0.io.in[0].writeAddr <= writeBuses_0.io.slave[0].writeAddr @[AXILiteXBar.scala 58:31]
    writeBuses_0.io.slave[1].writeResp <= writeMuxes_1.io.in[0].writeResp @[AXILiteXBar.scala 58:31]
    writeMuxes_1.io.in[0].writeData <= writeBuses_0.io.slave[1].writeData @[AXILiteXBar.scala 58:31]
    writeMuxes_1.io.in[0].writeAddr <= writeBuses_0.io.slave[1].writeAddr @[AXILiteXBar.scala 58:31]
    writeBuses_0.io.slave[2].writeResp <= writeMuxes_2.io.in[0].writeResp @[AXILiteXBar.scala 58:31]
    writeMuxes_2.io.in[0].writeData <= writeBuses_0.io.slave[2].writeData @[AXILiteXBar.scala 58:31]
    writeMuxes_2.io.in[0].writeAddr <= writeBuses_0.io.slave[2].writeAddr @[AXILiteXBar.scala 58:31]
    writeBuses_1.io.slave[0].writeResp <= writeMuxes_0.io.in[1].writeResp @[AXILiteXBar.scala 58:31]
    writeMuxes_0.io.in[1].writeData <= writeBuses_1.io.slave[0].writeData @[AXILiteXBar.scala 58:31]
    writeMuxes_0.io.in[1].writeAddr <= writeBuses_1.io.slave[0].writeAddr @[AXILiteXBar.scala 58:31]
    writeBuses_1.io.slave[1].writeResp <= writeMuxes_1.io.in[1].writeResp @[AXILiteXBar.scala 58:31]
    writeMuxes_1.io.in[1].writeData <= writeBuses_1.io.slave[1].writeData @[AXILiteXBar.scala 58:31]
    writeMuxes_1.io.in[1].writeAddr <= writeBuses_1.io.slave[1].writeAddr @[AXILiteXBar.scala 58:31]
    writeBuses_1.io.slave[2].writeResp <= writeMuxes_2.io.in[1].writeResp @[AXILiteXBar.scala 58:31]
    writeMuxes_2.io.in[1].writeData <= writeBuses_1.io.slave[2].writeData @[AXILiteXBar.scala 58:31]
    writeMuxes_2.io.in[1].writeAddr <= writeBuses_1.io.slave[2].writeAddr @[AXILiteXBar.scala 58:31]
    writeBuses_2.io.slave[0].writeResp <= writeMuxes_0.io.in[2].writeResp @[AXILiteXBar.scala 58:31]
    writeMuxes_0.io.in[2].writeData <= writeBuses_2.io.slave[0].writeData @[AXILiteXBar.scala 58:31]
    writeMuxes_0.io.in[2].writeAddr <= writeBuses_2.io.slave[0].writeAddr @[AXILiteXBar.scala 58:31]
    writeBuses_2.io.slave[1].writeResp <= writeMuxes_1.io.in[2].writeResp @[AXILiteXBar.scala 58:31]
    writeMuxes_1.io.in[2].writeData <= writeBuses_2.io.slave[1].writeData @[AXILiteXBar.scala 58:31]
    writeMuxes_1.io.in[2].writeAddr <= writeBuses_2.io.slave[1].writeAddr @[AXILiteXBar.scala 58:31]
    writeBuses_2.io.slave[2].writeResp <= writeMuxes_2.io.in[2].writeResp @[AXILiteXBar.scala 58:31]
    writeMuxes_2.io.in[2].writeData <= writeBuses_2.io.slave[2].writeData @[AXILiteXBar.scala 58:31]
    writeMuxes_2.io.in[2].writeAddr <= writeBuses_2.io.slave[2].writeAddr @[AXILiteXBar.scala 58:31]

  module top_Hw14_1 :
    input clock : Clock
    input reset : UInt<1>
    output io : { pc : UInt<15>, regs : UInt<32>[32], Hcf : UInt<1>, cycle_count : UInt<32>, tb_slave : { flip aw : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, flip w : { flip ready : UInt<1>, valid : UInt<1>, bits : { data : UInt<32>, strb : UInt<4>, last : UInt<1>}}, b : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, resp : UInt<2>}}, flip ar : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, addr : UInt<32>, region : UInt<4>, len : UInt<8>, size : UInt<2>, burst : UInt<2>, lock : UInt<1>, cache : UInt<4>, prot : UInt<3>, qos : UInt<4>}}, r : { flip ready : UInt<1>, valid : UInt<1>, bits : { id : UInt<17>, data : UInt<32>, resp : UInt<2>, last : UInt<1>}}}, flip tb_en : UInt<1>}

    inst cpu of SingleCycleCPU @[Hw14-1.scala 31:21]
    cpu.clock <= clock
    cpu.reset <= reset
    inst dm of DataMem @[Hw14-1.scala 32:21]
    dm.clock <= clock
    dm.reset <= reset
    inst sa of topSA @[Hw14-1.scala 33:21]
    sa.clock <= clock
    sa.reset <= reset
    inst dma of DMA @[Hw14-1.scala 34:21]
    dma.clock <= clock
    dma.reset <= reset
    inst bus of AXILiteXBar @[Hw14-1.scala 36:21]
    bus.clock <= clock
    bus.reset <= reset
    bus.io.masters[0] <= cpu.io.master @[Hw14-1.scala 38:23]
    bus.io.masters[1] <= sa.io.master @[Hw14-1.scala 39:23]
    bus.io.masters[2] <= dma.io.master @[Hw14-1.scala 40:23]
    bus.io.slaves[0] <= dm.io.slave @[Hw14-1.scala 41:22]
    bus.io.slaves[1] <= sa.io.slave @[Hw14-1.scala 42:22]
    bus.io.slaves[2] <= dma.io.slave @[Hw14-1.scala 43:22]
    io.pc <= cpu.io.pc @[Hw14-1.scala 46:13]
    io.regs <= cpu.io.regs @[Hw14-1.scala 47:13]
    io.Hcf <= cpu.io.Hcf @[Hw14-1.scala 48:13]
    reg cycle_counter : UInt<32>, clock with :
      reset => (reset, UInt<32>("h1")) @[Hw14-1.scala 51:32]
    node _cycle_counter_T = add(cycle_counter, UInt<1>("h1")) @[Hw14-1.scala 52:37]
    node _cycle_counter_T_1 = tail(_cycle_counter_T, 1) @[Hw14-1.scala 52:37]
    cycle_counter <= _cycle_counter_T_1 @[Hw14-1.scala 52:20]
    io.cycle_count <= cycle_counter @[Hw14-1.scala 53:20]
    io.tb_slave.r.bits <= sa.io.tb_slave.r.bits @[Hw14-1.scala 56:17]
    io.tb_slave.r.valid <= sa.io.tb_slave.r.valid @[Hw14-1.scala 56:17]
    sa.io.tb_slave.r.ready <= io.tb_slave.r.ready @[Hw14-1.scala 56:17]
    sa.io.tb_slave.ar <= io.tb_slave.ar @[Hw14-1.scala 56:17]
    io.tb_slave.b.bits <= sa.io.tb_slave.b.bits @[Hw14-1.scala 56:17]
    io.tb_slave.b.valid <= sa.io.tb_slave.b.valid @[Hw14-1.scala 56:17]
    sa.io.tb_slave.b.ready <= io.tb_slave.b.ready @[Hw14-1.scala 56:17]
    sa.io.tb_slave.w <= io.tb_slave.w @[Hw14-1.scala 56:17]
    sa.io.tb_slave.aw <= io.tb_slave.aw @[Hw14-1.scala 56:17]
    sa.io.tb_en <= io.tb_en @[Hw14-1.scala 57:17]

