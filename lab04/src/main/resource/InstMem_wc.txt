//wc: with comment

//Hw5-4-1 I-type testing 
// inst[31,20]  inst[19,15]  inst[14,12]  inst[11,7]  inst[6,0]
// imm[11,0]      rs1          funct3        rd        opcode
// 111111111111 00101 000 00001 0010011 //addi x1 x5 -1
// 000000000010 00011 001 00010 0010011 //slli x2, x3, 2 --> 12
// 000000000101 00100 010 00100 0010011 //slti x4, x4, 5 --> 1
// 000000000100 00100 010 00100 0010011 //slti x4, x4, 4 --> 0
// 000000000011 00100 010 00100 0010011 //slti x4, x4, 3 --> 0
// 111111111100 00100 010 00100 0010011 //slti x4, x4, -4 --> 0
// 000000000101 00101 011 00101 0010011 //sltiu x5, x5, 5 --> 0
// 000000000100 00101 011 00101 0010011 //sltiu x5, x5, 4 --> 0
// 000000000011 00101 011 00101 0010011 //sltiu x5, x5, 3 --> 0
// 000000000010 00110 100 00111 0010011 //xori x7, x6, 2 --> 4
// 000000000000 00110 100 00111 0010011 //xori x7, x6, 0 --> 6
// 111111111111 00110 100 00111 0010011 //xori x7, x6, -1 --> -7
// 000000000010 00110 101 00111 0010011 //srli x7, x6, 2 --> 1
// 000000000000 00110 101 00111 0010011 //srli x7, x6, 0 --> 6
// 000000011111 00110 101 00111 0010011 //srli x7, x6, -1 --> 0
// 010000000010 00110 101 00111 0010011 //srai x7, x6, 2 --> 1
// 010000000000 00110 101 00111 0010011 //srai x7, x6, 0 --> 6
// 010000011111 00110 101 00111 0010011 //srai x7, x6, -1 --> 0
// 000000000010 00110 110 00111 0010011 //ori x7, x6, 2 --> 6
// 111111111111 00110 110 00111 0010011 //ori x7, x6, -1 --> -1
// 000000000000 00110 110 00111 0010011 //ori x7, x6, 0 --> 6
// 000000000010 00110 111 00111 0010011 //andi x7, x6, 2 --> 2
// 111111111111 00110 111 00111 0010011 //andi x7, x6, -1 --> 6
// 000000000000 00110 111 00111 0010011 //andi x7, x6, 0 --> 0

//Hw5-4-2 R-type testing
// inst[31,25]  inst[24,20]  inst[19,15]  inst[14,12]  inst[11,7]  inst[6,0]
//  funct7         rs2          rs1          funct3        rd        opcode
// 0000000 11111 00011 000 11111 0110011 //add x31, x3, x31 --> 34
// 0100000 11111 00011 000 11111 0110011 //sub x31, x3, x31 --> -28
// 0100000 00011 00100 000 00011 0110011 //sub x3, x4, x3 --> 1
// 0100000 00100 00100 000 00011 0110011 //sub x3, x4, x4 --> 0
// 0000000 00011 00100 001 00011 0110011 //sll x3, x4, x3 --> 32
// 0000000 00001 00100 001 00011 0110011 //sll x3, x4, x1 --> 8
// 0000000 11111 00100 001 00011 0110011 //sll x3, x4, x31 --> 0
// 0000000 11111 00100 010 00011 0110011 //slt x3, x4, x31 --> 1
// 0000000 00100 11111 010 00011 0110011 //slt x3, x31, x4 --> 0
// 0000000 00100 00100 010 00011 0110011 //slt x3, x4, x4 --> 0
// 0000000 11111 00100 011 00011 0110011 //sltu x3, x4, x31 --> 1
// 0000000 00100 11111 011 00011 0110011 //sltu x3, x31, x4 --> 0
// 0000000 00100 00100 011 00011 0110011 //sltu x3, x4, x4 --> 0
// 0000000 00100 00000 011 00011 0110011 //sltu x3, x0, x4 --> 1
// 0000000 11111 00011 100 11111 0110011 //xor x31, x3, x31 --> 28
// 0000000 00100 01101 101 10000 0110011 //srl x16, x13, x4 --> 0
// 0100000 00101 01111 101 10001 0110011 //sra x17, x15, x5 --> 0
// 0000000 11111 00011 110 11111 0110011 //or x31, x3, x31 --> 31
// 0000000 11111 11110 111 11111 0110011 //and x31, x30, x31 --> 30

//Hw5-4-6 Load/Store inst. testing
//  inst[31,20]  inst[19,15]  inst[14,12]  inst[11,7]  inst[6,0]
//  imm[11,0]      rs1          funct3        rd        opcode
000000000000 00000 000 00001 0000011 //lb x1 x0 0
000000000010 00000 001 00001 0000011 //lh x1 x0 2
000000000000 00000 010 00001 0000011 //lw x1 x0 0
000000000011 00000 100 00001 0000011 //lbu x1 x0 3
000000000000 00000 101 00001 0000011 //lhu x1 x0 0

// inst[31,25]  inst[24,20]  inst[19,15]  inst[14,12]  inst[11,7]   inst[6,0]
//  imm[11,5]       rs2          rs1        funct3      imm[4,0]     opcode 
0000000 00001 00000 000 00000 0100011 //sb x1 x0 0
0000000 00001 00000 001 00010 0100011 //sh x1 x0 2
0000000 00001 00000 010 00000 0100011 //sw x1 x0 0

//Hw5-4-8 B-type testing
// inst[31]  inst[30,25]    inst[24,20]   inst[19,15]   inst[14,12]   inst[11,8]  inst[7]   inst[6,0]
// imm[12]    imm[10,5]         rs2          rs1          funct3       imm[4,1]   imm[11]    opcode
0 000000 00001 00001 000 1100 0 1100011 //beq x1 x1 24  --> 0 0 000000 1100 0
0 000000 00001 00001 001 1010 0 1100011 //bne x1 x1 20  --> 0 0 000000 1010 0
0 000000 00010 00001 100 1000 0 1100011 //blt x1 x2 16  --> 0 0 000000 1000 0
0 000000 00000 00001 101 0110 0 1100011 //bge x1 x0 12  --> 0 0 000000 0110 0
0 000000 00001 00001 110 0100 0 1100011 //bltu x1 x1 8  --> 0 0 000000 0100 0
0 000000 00001 00001 111 0010 0 1100011 //bgeu x1 x1 4  --> 0 0 000000 0010 0

//Hw5-4-9 J-type testing
// inst[31]  inst[30,21]    inst[20]   inst[19,12]   inst[11,7]     inst[6,0]
//  imm[20]   imm[10,1]      imm[11]    imm[19,12]       rd          opcode
 1 1111110110 1 11111111 00000 1101111 //jal x0 -20 --> 1 11111111 1 1111110110 0
// inst[31,20]   inst[19,15]   inst[14,12]   inst[11,7]    inst[6,0]
//  imm[11,0]      rs1           funct3         rd          opcode
 000000010000 00100 000 00000 1100111 //jalr x0 x4 16